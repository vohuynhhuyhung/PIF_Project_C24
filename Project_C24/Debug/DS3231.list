
DS3231.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  080078e4  080078e4  000178e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b28  08007b28  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08007b28  08007b28  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b28  08007b28  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b28  08007b28  00017b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b2c  08007b2c  00017b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  2000005c  08007b8c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08007b8c  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c828  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dee  00000000  00000000  0002c8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  0002e6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a4a  00000000  00000000  0002f408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002601  00000000  00000000  0002fe52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010108  00000000  00000000  00032453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a9ef  00000000  00000000  0004255b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e58  00000000  00000000  000ccf4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000d0da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080078cc 	.word	0x080078cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080078cc 	.word	0x080078cc

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	3a01      	subs	r2, #1
 8000a42:	bf28      	it	cs
 8000a44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a48:	d2ed      	bcs.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf6:	2afd      	cmp	r2, #253	; 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	; 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	; 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <__aeabi_f2uiz>:
 8000e44:	0042      	lsls	r2, r0, #1
 8000e46:	d20e      	bcs.n	8000e66 <__aeabi_f2uiz+0x22>
 8000e48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e4c:	d30b      	bcc.n	8000e66 <__aeabi_f2uiz+0x22>
 8000e4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e56:	d409      	bmi.n	8000e6c <__aeabi_f2uiz+0x28>
 8000e58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e60:	fa23 f002 	lsr.w	r0, r3, r2
 8000e64:	4770      	bx	lr
 8000e66:	f04f 0000 	mov.w	r0, #0
 8000e6a:	4770      	bx	lr
 8000e6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e70:	d101      	bne.n	8000e76 <__aeabi_f2uiz+0x32>
 8000e72:	0242      	lsls	r2, r0, #9
 8000e74:	d102      	bne.n	8000e7c <__aeabi_f2uiz+0x38>
 8000e76:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7a:	4770      	bx	lr
 8000e7c:	f04f 0000 	mov.w	r0, #0
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <I2C_Write_Time>:
#include "DS3231.h"

/********************** base layer ********************************/

static void I2C_Write_Time(DS3231_Time* DS3231)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af04      	add	r7, sp, #16
 8000e8a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Write(DS3231->I2C, DS3231_ADDR, 0, I2C_MEMADD_SIZE_8BIT, DS3231->TxTimeBuff, 3, 1000);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6818      	ldr	r0, [r3, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	330b      	adds	r3, #11
 8000e94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e98:	9202      	str	r2, [sp, #8]
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	9201      	str	r2, [sp, #4]
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	21d0      	movs	r1, #208	; 0xd0
 8000ea6:	f003 fe0d 	bl	8004ac4 <HAL_I2C_Mem_Write>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <I2C_Read_Time>:

static void I2C_Read_Time(DS3231_Time* DS3231)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af04      	add	r7, sp, #16
 8000eb8:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(DS3231->I2C, DS3231_ADDR, 0, I2C_MEMADD_SIZE_8BIT, DS3231->RxTimeBuff, 3, 1000);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6818      	ldr	r0, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	330e      	adds	r3, #14
 8000ec2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ec6:	9202      	str	r2, [sp, #8]
 8000ec8:	2203      	movs	r2, #3
 8000eca:	9201      	str	r2, [sp, #4]
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2301      	movs	r3, #1
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	21d0      	movs	r1, #208	; 0xd0
 8000ed4:	f003 fef0 	bl	8004cb8 <HAL_I2C_Mem_Read>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <I2C_Write_Date>:

static void I2C_Write_Date(DS3231_Time* DS3231)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af04      	add	r7, sp, #16
 8000ee6:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Write(DS3231->I2C, DS3231_ADDR, 3, I2C_MEMADD_SIZE_8BIT, DS3231->TxDateBuff, 4, 1000);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3311      	adds	r3, #17
 8000ef0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ef4:	9202      	str	r2, [sp, #8]
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	9201      	str	r2, [sp, #4]
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2301      	movs	r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	21d0      	movs	r1, #208	; 0xd0
 8000f02:	f003 fddf 	bl	8004ac4 <HAL_I2C_Mem_Write>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <I2C_Read_Date>:

static void I2C_Read_Date(DS3231_Time* DS3231)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af04      	add	r7, sp, #16
 8000f14:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(DS3231->I2C, DS3231_ADDR, 3, I2C_MEMADD_SIZE_8BIT, DS3231->RxDateBuff, 4,1000);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6818      	ldr	r0, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3315      	adds	r3, #21
 8000f1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f22:	9202      	str	r2, [sp, #8]
 8000f24:	2204      	movs	r2, #4
 8000f26:	9201      	str	r2, [sp, #4]
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	21d0      	movs	r1, #208	; 0xd0
 8000f30:	f003 fec2 	bl	8004cb8 <HAL_I2C_Mem_Read>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <BCD_DEC>:

static uint8_t BCD_DEC (uint8_t data)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
	return (data>>4) * 10 + (data & 0x0F);
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	091b      	lsrs	r3, r3, #4
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	0092      	lsls	r2, r2, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 030f 	and.w	r3, r3, #15
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	4413      	add	r3, r2
 8000f60:	b2db      	uxtb	r3, r3
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <DEC_BCD>:

static uint8_t DEC_BCD (uint8_t data)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	return (data/10) << 4 | (data%10);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <DEC_BCD+0x44>)
 8000f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7e:	08db      	lsrs	r3, r3, #3
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	011b      	lsls	r3, r3, #4
 8000f84:	b258      	sxtb	r0, r3
 8000f86:	79fa      	ldrb	r2, [r7, #7]
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <DEC_BCD+0x44>)
 8000f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8000f8e:	08d9      	lsrs	r1, r3, #3
 8000f90:	460b      	mov	r3, r1
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	4303      	orrs	r3, r0
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	b2db      	uxtb	r3, r3
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	cccccccd 	.word	0xcccccccd

08000fb4 <DS3231_Init>:


/************************************Main Layer****************************/

void DS3231_Init(DS3231_Time* DS3231, I2C_HandleTypeDef* I2C_In)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
	DS3231->I2C = I2C_In;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	601a      	str	r2, [r3, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr

08000fce <DS3231_SetTime>:

void DS3231_SetTime(DS3231_Time* DS3231, uint8_t Hour, uint8_t Min, uint8_t Sec)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	4611      	mov	r1, r2
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4603      	mov	r3, r0
 8000fde:	70fb      	strb	r3, [r7, #3]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	70bb      	strb	r3, [r7, #2]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	707b      	strb	r3, [r7, #1]
	DS3231->TxTimeBuff[0] = DEC_BCD(Sec);
 8000fe8:	787b      	ldrb	r3, [r7, #1]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ffbe 	bl	8000f6c <DEC_BCD>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	72da      	strb	r2, [r3, #11]
	DS3231->TxTimeBuff[1] = DEC_BCD(Min);
 8000ff8:	78bb      	ldrb	r3, [r7, #2]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ffb6 	bl	8000f6c <DEC_BCD>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	731a      	strb	r2, [r3, #12]
	DS3231->TxTimeBuff[2] = DEC_BCD(Hour);
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ffae 	bl	8000f6c <DEC_BCD>
 8001010:	4603      	mov	r3, r0
 8001012:	461a      	mov	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	735a      	strb	r2, [r3, #13]
	I2C_Write_Time(DS3231);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff33 	bl	8000e84 <I2C_Write_Time>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <DS3231_GetTime>:

void DS3231_GetTime(DS3231_Time* DS3231)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
	I2C_Read_Time(DS3231);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ff3f 	bl	8000eb2 <I2C_Read_Time>
	DS3231->Sec = BCD_DEC(DS3231->RxTimeBuff[0]);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b9b      	ldrb	r3, [r3, #14]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff7f 	bl	8000f3c <BCD_DEC>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	711a      	strb	r2, [r3, #4]
	DS3231->Min = BCD_DEC(DS3231->RxTimeBuff[1]);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7bdb      	ldrb	r3, [r3, #15]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff76 	bl	8000f3c <BCD_DEC>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	715a      	strb	r2, [r3, #5]
	DS3231->Hour = BCD_DEC(DS3231->RxTimeBuff[2]);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7c1b      	ldrb	r3, [r3, #16]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff6d 	bl	8000f3c <BCD_DEC>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	719a      	strb	r2, [r3, #6]
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <DS3231_SetDate>:

void DS3231_SetDate(DS3231_Time* DS3231, uint8_t Day, uint8_t Date, uint8_t Month, uint8_t Year)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	4608      	mov	r0, r1
 800107c:	4611      	mov	r1, r2
 800107e:	461a      	mov	r2, r3
 8001080:	4603      	mov	r3, r0
 8001082:	70fb      	strb	r3, [r7, #3]
 8001084:	460b      	mov	r3, r1
 8001086:	70bb      	strb	r3, [r7, #2]
 8001088:	4613      	mov	r3, r2
 800108a:	707b      	strb	r3, [r7, #1]
	DS3231->TxDateBuff[0] = DEC_BCD(Day);
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff6c 	bl	8000f6c <DEC_BCD>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	745a      	strb	r2, [r3, #17]
	DS3231->TxDateBuff[1] = DEC_BCD(Date);
 800109c:	78bb      	ldrb	r3, [r7, #2]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff64 	bl	8000f6c <DEC_BCD>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	749a      	strb	r2, [r3, #18]
	DS3231->TxDateBuff[2] = DEC_BCD(Month);
 80010ac:	787b      	ldrb	r3, [r7, #1]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ff5c 	bl	8000f6c <DEC_BCD>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	74da      	strb	r2, [r3, #19]
	DS3231->TxDateBuff[3] = DEC_BCD(Year);
 80010bc:	7c3b      	ldrb	r3, [r7, #16]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff54 	bl	8000f6c <DEC_BCD>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	751a      	strb	r2, [r3, #20]
	I2C_Write_Date(DS3231);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff07 	bl	8000ee0 <I2C_Write_Date>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <DS3231_GetDate>:

void DS3231_GetDate(DS3231_Time* DS3231)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
	I2C_Read_Date(DS3231);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ff13 	bl	8000f0e <I2C_Read_Date>
	DS3231->Day = BCD_DEC(DS3231->RxDateBuff[0]);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7d5b      	ldrb	r3, [r3, #21]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff25 	bl	8000f3c <BCD_DEC>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	721a      	strb	r2, [r3, #8]
	DS3231->Date = BCD_DEC(DS3231->RxDateBuff[1]);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7d9b      	ldrb	r3, [r3, #22]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff1c 	bl	8000f3c <BCD_DEC>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	71da      	strb	r2, [r3, #7]
	DS3231->Month = BCD_DEC(DS3231->RxDateBuff[2]);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7ddb      	ldrb	r3, [r3, #23]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff13 	bl	8000f3c <BCD_DEC>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	725a      	strb	r2, [r3, #9]
	DS3231->Year = BCD_DEC(DS3231->RxDateBuff[3]);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7e1b      	ldrb	r3, [r3, #24]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff0a 	bl	8000f3c <BCD_DEC>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	729a      	strb	r2, [r3, #10]
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <delay_us>:
 */

#include "lcd_i2c.h"

void delay_us(uint32_t us)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	htim2.Instance->CNT = 0;
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <delay_us+0x34>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2200      	movs	r2, #0
 8001146:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim2);
 8001148:	4808      	ldr	r0, [pc, #32]	; (800116c <delay_us+0x34>)
 800114a:	f005 f9cd 	bl	80064e8 <HAL_TIM_Base_Start>
	while(htim2.Instance->CNT < us);
 800114e:	bf00      	nop
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <delay_us+0x34>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f9      	bhi.n	8001150 <delay_us+0x18>
	HAL_TIM_Base_Stop(&htim2);
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <delay_us+0x34>)
 800115e:	f005 fa0d 	bl	800657c <HAL_TIM_Base_Stop>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000134 	.word	0x20000134

08001170 <lcd_i2c_init>:

void lcd_i2c_init(LCD_I2C_HandleTypeDef *p_LCD, I2C_HandleTypeDef *p_hi2c, uint8_t p_col, uint8_t p_row, uint8_t p_Slave_Address)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	4611      	mov	r1, r2
 800117c:	461a      	mov	r2, r3
 800117e:	460b      	mov	r3, r1
 8001180:	71fb      	strb	r3, [r7, #7]
 8001182:	4613      	mov	r3, r2
 8001184:	71bb      	strb	r3, [r7, #6]
	p_LCD->SLAVE_ADDRESS = p_Slave_Address;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	7e3a      	ldrb	r2, [r7, #24]
 800118a:	709a      	strb	r2, [r3, #2]
	p_LCD->LCD_Backlight_Value = lcd_backlight_on;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2208      	movs	r2, #8
 8001190:	70da      	strb	r2, [r3, #3]
	p_LCD->LCD_Columns = p_col;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	79fa      	ldrb	r2, [r7, #7]
 8001196:	701a      	strb	r2, [r3, #0]
	p_LCD->LCD_Rows = p_row;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	79ba      	ldrb	r2, [r7, #6]
 800119c:	705a      	strb	r2, [r3, #1]
	p_LCD->hi2c = p_hi2c;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	609a      	str	r2, [r3, #8]
	p_LCD->LCD_Display_Option = lcd_display_on | lcd_cursor_off | lcd_blinkOff;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2204      	movs	r2, #4
 80011a8:	711a      	strb	r2, [r3, #4]


	//4 bit initialization
	delay_us(40000); 	//waiting for > 40ms
 80011aa:	f649 4040 	movw	r0, #40000	; 0x9c40
 80011ae:	f7ff ffc3 	bl	8001138 <delay_us>
	lcd_send_cmd(p_LCD, 0x30);
 80011b2:	2130      	movs	r1, #48	; 0x30
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f000 f851 	bl	800125c <lcd_send_cmd>
	delay_us(5000);  // waiting for >4.1ms
 80011ba:	f241 3088 	movw	r0, #5000	; 0x1388
 80011be:	f7ff ffbb 	bl	8001138 <delay_us>
	lcd_send_cmd(p_LCD, 0x30);
 80011c2:	2130      	movs	r1, #48	; 0x30
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f000 f849 	bl	800125c <lcd_send_cmd>
	delay_us(1000);  // waiting for >100us
 80011ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ce:	f7ff ffb3 	bl	8001138 <delay_us>
	lcd_send_cmd(p_LCD, 0x30);
 80011d2:	2130      	movs	r1, #48	; 0x30
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f000 f841 	bl	800125c <lcd_send_cmd>
	delay_us(10000);
 80011da:	f242 7010 	movw	r0, #10000	; 0x2710
 80011de:	f7ff ffab 	bl	8001138 <delay_us>
	lcd_send_cmd(p_LCD, 0x20);	//4 bit mode
 80011e2:	2120      	movs	r1, #32
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f000 f839 	bl	800125c <lcd_send_cmd>
	delay_us(10000);
 80011ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80011ee:	f7ff ffa3 	bl	8001138 <delay_us>

	//display initialization
	lcd_send_cmd(p_LCD, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80011f2:	2128      	movs	r1, #40	; 0x28
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f000 f831 	bl	800125c <lcd_send_cmd>
	delay_us(1000);
 80011fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011fe:	f7ff ff9b 	bl	8001138 <delay_us>
	lcd_send_cmd(p_LCD, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off		HAL_Delay(1);
 8001202:	2108      	movs	r1, #8
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f000 f829 	bl	800125c <lcd_send_cmd>
	delay_us(1000);
 800120a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800120e:	f7ff ff93 	bl	8001138 <delay_us>
	lcd_send_cmd(p_LCD, 0x01);  // clear display
 8001212:	2101      	movs	r1, #1
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f000 f821 	bl	800125c <lcd_send_cmd>
	delay_us(1000);
 800121a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800121e:	f7ff ff8b 	bl	8001138 <delay_us>
	delay_us(1000);
 8001222:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001226:	f7ff ff87 	bl	8001138 <delay_us>
	lcd_send_cmd(p_LCD, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800122a:	2106      	movs	r1, #6
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f000 f815 	bl	800125c <lcd_send_cmd>
	delay_us(1000);
 8001232:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001236:	f7ff ff7f 	bl	8001138 <delay_us>
	lcd_send_cmd(p_LCD, lcd_displaycontrol | p_LCD -> LCD_Display_Option); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	791b      	ldrb	r3, [r3, #4]
 800123e:	f043 0308 	orr.w	r3, r3, #8
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4619      	mov	r1, r3
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f000 f808 	bl	800125c <lcd_send_cmd>
	delay_us(1000);
 800124c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001250:	f7ff ff72 	bl	8001138 <delay_us>
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <lcd_send_cmd>:

void lcd_send_cmd (LCD_I2C_HandleTypeDef *p_lcd, char cmd)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af02      	add	r7, sp, #8
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd & 0xf0);
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	f023 030f 	bic.w	r3, r3, #15
 800126e:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4) & 0xf0);
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	011b      	lsls	r3, r3, #4
 8001274:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0C;	//en=1, rs=0
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	f043 030c 	orr.w	r3, r3, #12
 800127c:	b2db      	uxtb	r3, r3
 800127e:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x08;	//en=0, rs=0
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	f043 0308 	orr.w	r3, r3, #8
 8001286:	b2db      	uxtb	r3, r3
 8001288:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;	//en=1, rs=0
 800128a:	7bbb      	ldrb	r3, [r7, #14]
 800128c:	f043 030c 	orr.w	r3, r3, #12
 8001290:	b2db      	uxtb	r3, r3
 8001292:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;	//en=0, rs=1
 8001294:	7bbb      	ldrb	r3, [r7, #14]
 8001296:	f043 0308 	orr.w	r3, r3, #8
 800129a:	b2db      	uxtb	r3, r3
 800129c:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, data_t, 4, 100);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6898      	ldr	r0, [r3, #8]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	789b      	ldrb	r3, [r3, #2]
 80012a6:	b299      	uxth	r1, r3
 80012a8:	f107 0208 	add.w	r2, r7, #8
 80012ac:	2364      	movs	r3, #100	; 0x64
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2304      	movs	r3, #4
 80012b2:	f003 fb09 	bl	80048c8 <HAL_I2C_Master_Transmit>
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <lcd_send_data>:

void lcd_send_data (LCD_I2C_HandleTypeDef *p_LCD, char data)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af02      	add	r7, sp, #8
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (data & 0xf0);
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	f023 030f 	bic.w	r3, r3, #15
 80012d0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	011b      	lsls	r3, r3, #4
 80012d6:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0D; //en=1, rs=0
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	f043 030d 	orr.w	r3, r3, #13
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x09; //en=0, rs=0
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	f043 0309 	orr.w	r3, r3, #9
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 80012ec:	7bbb      	ldrb	r3, [r7, #14]
 80012ee:	f043 030d 	orr.w	r3, r3, #13
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 80012f6:	7bbb      	ldrb	r3, [r7, #14]
 80012f8:	f043 0309 	orr.w	r3, r3, #9
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_LCD -> hi2c, p_LCD->SLAVE_ADDRESS, data_t, 4, 100);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6898      	ldr	r0, [r3, #8]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	789b      	ldrb	r3, [r3, #2]
 8001308:	b299      	uxth	r1, r3
 800130a:	f107 0208 	add.w	r2, r7, #8
 800130e:	2364      	movs	r3, #100	; 0x64
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2304      	movs	r3, #4
 8001314:	f003 fad8 	bl	80048c8 <HAL_I2C_Master_Transmit>
}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <lcd_set_cursor>:


void lcd_set_cursor(LCD_I2C_HandleTypeDef *p_LCD, uint8_t p_col, uint8_t p_row)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
 800132c:	4613      	mov	r3, r2
 800132e:	70bb      	strb	r3, [r7, #2]
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <lcd_set_cursor+0x50>)
 8001332:	60fb      	str	r3, [r7, #12]
	if(p_row > p_LCD->LCD_Rows) p_row = p_LCD->LCD_Rows - 1;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	785b      	ldrb	r3, [r3, #1]
 8001338:	78ba      	ldrb	r2, [r7, #2]
 800133a:	429a      	cmp	r2, r3
 800133c:	d903      	bls.n	8001346 <lcd_set_cursor+0x26>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	785b      	ldrb	r3, [r3, #1]
 8001342:	3b01      	subs	r3, #1
 8001344:	70bb      	strb	r3, [r7, #2]
	lcd_send_cmd(p_LCD, 0x80 | (p_col + t_row_Offets[p_row]));
 8001346:	78bb      	ldrb	r3, [r7, #2]
 8001348:	3310      	adds	r3, #16
 800134a:	443b      	add	r3, r7
 800134c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	4413      	add	r3, r2
 8001354:	b2db      	uxtb	r3, r3
 8001356:	b25b      	sxtb	r3, r3
 8001358:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800135c:	b25b      	sxtb	r3, r3
 800135e:	b2db      	uxtb	r3, r3
 8001360:	4619      	mov	r1, r3
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ff7a 	bl	800125c <lcd_send_cmd>
}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	54144000 	.word	0x54144000

08001374 <lcd_send_string>:

void lcd_send_string (LCD_I2C_HandleTypeDef *p_LCD, char *str)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
	while (*str) lcd_send_data(p_LCD, *str++);
 800137e:	e007      	b.n	8001390 <lcd_send_string+0x1c>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	603a      	str	r2, [r7, #0]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ff97 	bl	80012be <lcd_send_data>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f3      	bne.n	8001380 <lcd_send_string+0xc>
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <lcd_clear>:

void lcd_clear (LCD_I2C_HandleTypeDef *p_LCD)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
	lcd_send_cmd(p_LCD, lcd_cleardisplay);
 80013aa:	2101      	movs	r1, #1
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ff55 	bl	800125c <lcd_send_cmd>
//	uint32_t timer = HAL_GetTick();
//	while (HAL_GetTick() - timer < 5);
	delay_us(5000);
 80013b2:	f241 3088 	movw	r0, #5000	; 0x1388
 80013b6:	f7ff febf 	bl	8001138 <delay_us>
	lcd_set_cursor(p_LCD, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffae 	bl	8001320 <lcd_set_cursor>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_TIM_IC_CaptureCallback>:
	uint8_t TFD = 0;
	char strCopy[15];


    void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
	{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
		counter = __HAL_TIM_GET_COUNTER(htim);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <HAL_TIM_IC_CaptureCallback+0x20>)
 80013de:	701a      	strb	r2, [r3, #0]
	}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	2000024c 	.word	0x2000024c

080013f0 <HAL_GPIO_EXTI_Callback>:

    void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af02      	add	r7, sp, #8
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]


	  if(GPIO_Pin == GPIO_PIN_10)
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001400:	d164      	bne.n	80014cc <HAL_GPIO_EXTI_Callback+0xdc>
	  {
		if (__HAL_TIM_GET_COUNTER(&htim1) > 8000 )
 8001402:	4b5e      	ldr	r3, [pc, #376]	; (800157c <HAL_GPIO_EXTI_Callback+0x18c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001408:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800140c:	d906      	bls.n	800141c <HAL_GPIO_EXTI_Callback+0x2c>
		{
		  tempCode = 0;
 800140e:	4b5c      	ldr	r3, [pc, #368]	; (8001580 <HAL_GPIO_EXTI_Callback+0x190>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
		  bitIndex = 0;
 8001414:	4b5b      	ldr	r3, [pc, #364]	; (8001584 <HAL_GPIO_EXTI_Callback+0x194>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
 800141a:	e031      	b.n	8001480 <HAL_GPIO_EXTI_Callback+0x90>
		}
		else if (__HAL_TIM_GET_COUNTER(&htim1) > 1700)
 800141c:	4b57      	ldr	r3, [pc, #348]	; (800157c <HAL_GPIO_EXTI_Callback+0x18c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001426:	4293      	cmp	r3, r2
 8001428:	d912      	bls.n	8001450 <HAL_GPIO_EXTI_Callback+0x60>
		{
		  tempCode |= (1UL << (31-bitIndex));
 800142a:	4b56      	ldr	r3, [pc, #344]	; (8001584 <HAL_GPIO_EXTI_Callback+0x194>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001434:	fa23 f202 	lsr.w	r2, r3, r2
 8001438:	4b51      	ldr	r3, [pc, #324]	; (8001580 <HAL_GPIO_EXTI_Callback+0x190>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4313      	orrs	r3, r2
 800143e:	4a50      	ldr	r2, [pc, #320]	; (8001580 <HAL_GPIO_EXTI_Callback+0x190>)
 8001440:	6013      	str	r3, [r2, #0]
		  bitIndex++;
 8001442:	4b50      	ldr	r3, [pc, #320]	; (8001584 <HAL_GPIO_EXTI_Callback+0x194>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b4e      	ldr	r3, [pc, #312]	; (8001584 <HAL_GPIO_EXTI_Callback+0x194>)
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	e017      	b.n	8001480 <HAL_GPIO_EXTI_Callback+0x90>
		}
		else if (__HAL_TIM_GET_COUNTER(&htim1) > 1000)
 8001450:	4b4a      	ldr	r3, [pc, #296]	; (800157c <HAL_GPIO_EXTI_Callback+0x18c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800145a:	d911      	bls.n	8001480 <HAL_GPIO_EXTI_Callback+0x90>
		{
		  tempCode &= ~(1UL << (31-bitIndex));
 800145c:	4b49      	ldr	r3, [pc, #292]	; (8001584 <HAL_GPIO_EXTI_Callback+0x194>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001466:	40d3      	lsrs	r3, r2
 8001468:	43da      	mvns	r2, r3
 800146a:	4b45      	ldr	r3, [pc, #276]	; (8001580 <HAL_GPIO_EXTI_Callback+0x190>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4013      	ands	r3, r2
 8001470:	4a43      	ldr	r2, [pc, #268]	; (8001580 <HAL_GPIO_EXTI_Callback+0x190>)
 8001472:	6013      	str	r3, [r2, #0]
		  bitIndex++;
 8001474:	4b43      	ldr	r3, [pc, #268]	; (8001584 <HAL_GPIO_EXTI_Callback+0x194>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b41      	ldr	r3, [pc, #260]	; (8001584 <HAL_GPIO_EXTI_Callback+0x194>)
 800147e:	701a      	strb	r2, [r3, #0]
		}
		if(bitIndex == 32)
 8001480:	4b40      	ldr	r3, [pc, #256]	; (8001584 <HAL_GPIO_EXTI_Callback+0x194>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b20      	cmp	r3, #32
 8001486:	d119      	bne.n	80014bc <HAL_GPIO_EXTI_Callback+0xcc>
		{
		  cmdli = ~tempCode;
 8001488:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <HAL_GPIO_EXTI_Callback+0x190>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <HAL_GPIO_EXTI_Callback+0x198>)
 8001494:	701a      	strb	r2, [r3, #0]
		  cmd = tempCode >> 8;
 8001496:	4b3a      	ldr	r3, [pc, #232]	; (8001580 <HAL_GPIO_EXTI_Callback+0x190>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	0a1b      	lsrs	r3, r3, #8
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HAL_GPIO_EXTI_Callback+0x19c>)
 80014a0:	701a      	strb	r2, [r3, #0]
		  if(cmdli == cmd)
 80014a2:	4b39      	ldr	r3, [pc, #228]	; (8001588 <HAL_GPIO_EXTI_Callback+0x198>)
 80014a4:	781a      	ldrb	r2, [r3, #0]
 80014a6:	4b39      	ldr	r3, [pc, #228]	; (800158c <HAL_GPIO_EXTI_Callback+0x19c>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d103      	bne.n	80014b6 <HAL_GPIO_EXTI_Callback+0xc6>
		  {
			code = tempCode;
 80014ae:	4b34      	ldr	r3, [pc, #208]	; (8001580 <HAL_GPIO_EXTI_Callback+0x190>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a37      	ldr	r2, [pc, #220]	; (8001590 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80014b4:	6013      	str	r3, [r2, #0]
		  }
		  bitIndex = 0;
 80014b6:	4b33      	ldr	r3, [pc, #204]	; (8001584 <HAL_GPIO_EXTI_Callback+0x194>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
		}
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80014bc:	4b2f      	ldr	r3, [pc, #188]	; (800157c <HAL_GPIO_EXTI_Callback+0x18c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2200      	movs	r2, #0
 80014c2:	625a      	str	r2, [r3, #36]	; 0x24
		flag = code;
 80014c4:	4b32      	ldr	r3, [pc, #200]	; (8001590 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a32      	ldr	r2, [pc, #200]	; (8001594 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80014ca:	6013      	str	r3, [r2, #0]
	  }


	  if(GPIO_Pin == GPIO_PIN_8 && dht != DHT  && alarm == ALARM
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014d2:	d107      	bne.n	80014e4 <HAL_GPIO_EXTI_Callback+0xf4>
 80014d4:	4b30      	ldr	r3, [pc, #192]	; (8001598 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_EXTI_Callback+0xf4>
 80014dc:	4b2f      	ldr	r3, [pc, #188]	; (800159c <HAL_GPIO_EXTI_Callback+0x1ac>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00f      	beq.n	8001504 <HAL_GPIO_EXTI_Callback+0x114>
			  || flag == 16712445 && dht != DHT && alarm == ALARM)
 80014e4:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a2d      	ldr	r2, [pc, #180]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	f040 809d 	bne.w	800162a <HAL_GPIO_EXTI_Callback+0x23a>
 80014f0:	4b29      	ldr	r3, [pc, #164]	; (8001598 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	f000 8098 	beq.w	800162a <HAL_GPIO_EXTI_Callback+0x23a>
 80014fa:	4b28      	ldr	r3, [pc, #160]	; (800159c <HAL_GPIO_EXTI_Callback+0x1ac>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f040 8093 	bne.w	800162a <HAL_GPIO_EXTI_Callback+0x23a>
		  {
	  	  if(HAL_GetTick()- timer < 90)
 8001504:	f002 fd94 	bl	8004030 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b59      	cmp	r3, #89	; 0x59
 8001512:	f240 83c4 	bls.w	8001c9e <HAL_GPIO_EXTI_Callback+0x8ae>
		  {
			return;
		  }
			timer = HAL_GetTick();
 8001516:	f002 fd8b 	bl	8004030 <HAL_GetTick>
 800151a:	4603      	mov	r3, r0
 800151c:	4a21      	ldr	r2, [pc, #132]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800151e:	6013      	str	r3, [r2, #0]
			  if (state == DATE)
 8001520:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d153      	bne.n	80015d0 <HAL_GPIO_EXTI_Callback+0x1e0>
			  {
				  lcd_clear(&p_lcd);
 8001528:	4820      	ldr	r0, [pc, #128]	; (80015ac <HAL_GPIO_EXTI_Callback+0x1bc>)
 800152a:	f7ff ff3a 	bl	80013a2 <lcd_clear>
				  state++;
 800152e:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001538:	701a      	strb	r2, [r3, #0]
				  savehour = DS3231.Hour;
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800153c:	799a      	ldrb	r2, [r3, #6]
 800153e:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001540:	701a      	strb	r2, [r3, #0]
				  savemin = DS3231.Min;
 8001542:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001544:	795a      	ldrb	r2, [r3, #5]
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001548:	701a      	strb	r2, [r3, #0]
				  savesec = DS3231.Sec;
 800154a:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800154c:	791a      	ldrb	r2, [r3, #4]
 800154e:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001550:	701a      	strb	r2, [r3, #0]
				  saveday = DS3231.Day;
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001554:	7a1a      	ldrb	r2, [r3, #8]
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001558:	701a      	strb	r2, [r3, #0]
				  savedate = DS3231.Date;
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800155c:	79da      	ldrb	r2, [r3, #7]
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001560:	701a      	strb	r2, [r3, #0]
				  savemonth = DS3231.Month;
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001564:	7a5a      	ldrb	r2, [r3, #9]
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8001568:	701a      	strb	r2, [r3, #0]
				  saveyear = DS3231.Year;
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800156c:	7a9a      	ldrb	r2, [r3, #10]
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <HAL_GPIO_EXTI_Callback+0x1dc>)
 8001570:	701a      	strb	r2, [r3, #0]
				  flag = 0;
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e057      	b.n	800162a <HAL_GPIO_EXTI_Callback+0x23a>
 800157a:	bf00      	nop
 800157c:	200000ec 	.word	0x200000ec
 8001580:	20000254 	.word	0x20000254
 8001584:	20000258 	.word	0x20000258
 8001588:	2000025a 	.word	0x2000025a
 800158c:	20000259 	.word	0x20000259
 8001590:	2000025c 	.word	0x2000025c
 8001594:	20000250 	.word	0x20000250
 8001598:	2000021a 	.word	0x2000021a
 800159c:	20000218 	.word	0x20000218
 80015a0:	00ff02fd 	.word	0x00ff02fd
 80015a4:	20000248 	.word	0x20000248
 80015a8:	20000219 	.word	0x20000219
 80015ac:	2000020c 	.word	0x2000020c
 80015b0:	2000007c 	.word	0x2000007c
 80015b4:	20000240 	.word	0x20000240
 80015b8:	20000241 	.word	0x20000241
 80015bc:	20000242 	.word	0x20000242
 80015c0:	20000243 	.word	0x20000243
 80015c4:	20000244 	.word	0x20000244
 80015c8:	20000245 	.word	0x20000245
 80015cc:	20000246 	.word	0x20000246
			  }
			  else{
				  state++;
 80015d0:	4b93      	ldr	r3, [pc, #588]	; (8001820 <HAL_GPIO_EXTI_Callback+0x430>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	3301      	adds	r3, #1
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	4b91      	ldr	r3, [pc, #580]	; (8001820 <HAL_GPIO_EXTI_Callback+0x430>)
 80015da:	701a      	strb	r2, [r3, #0]
				  flag = 0;
 80015dc:	4b91      	ldr	r3, [pc, #580]	; (8001824 <HAL_GPIO_EXTI_Callback+0x434>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
				  if (state - SET_SEC == 1)
 80015e2:	4b8f      	ldr	r3, [pc, #572]	; (8001820 <HAL_GPIO_EXTI_Callback+0x430>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d102      	bne.n	80015f0 <HAL_GPIO_EXTI_Callback+0x200>
					  {
					   state = SET_DAY;
 80015ea:	4b8d      	ldr	r3, [pc, #564]	; (8001820 <HAL_GPIO_EXTI_Callback+0x430>)
 80015ec:	2204      	movs	r2, #4
 80015ee:	701a      	strb	r2, [r3, #0]
					  }
				  if (state - SET_DATE == 1)
 80015f0:	4b8b      	ldr	r3, [pc, #556]	; (8001820 <HAL_GPIO_EXTI_Callback+0x430>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d118      	bne.n	800162a <HAL_GPIO_EXTI_Callback+0x23a>
					  {
					   state = DATE;
 80015f8:	4b89      	ldr	r3, [pc, #548]	; (8001820 <HAL_GPIO_EXTI_Callback+0x430>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
					   DS3231_SetTime(&DS3231, savehour, savemin, savesec);
 80015fe:	4b8a      	ldr	r3, [pc, #552]	; (8001828 <HAL_GPIO_EXTI_Callback+0x438>)
 8001600:	7819      	ldrb	r1, [r3, #0]
 8001602:	4b8a      	ldr	r3, [pc, #552]	; (800182c <HAL_GPIO_EXTI_Callback+0x43c>)
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	4b8a      	ldr	r3, [pc, #552]	; (8001830 <HAL_GPIO_EXTI_Callback+0x440>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	488a      	ldr	r0, [pc, #552]	; (8001834 <HAL_GPIO_EXTI_Callback+0x444>)
 800160c:	f7ff fcdf 	bl	8000fce <DS3231_SetTime>
					   DS3231_SetDate(&DS3231, saveday, savedate, savemonth, saveyear);
 8001610:	4b89      	ldr	r3, [pc, #548]	; (8001838 <HAL_GPIO_EXTI_Callback+0x448>)
 8001612:	7819      	ldrb	r1, [r3, #0]
 8001614:	4b89      	ldr	r3, [pc, #548]	; (800183c <HAL_GPIO_EXTI_Callback+0x44c>)
 8001616:	781a      	ldrb	r2, [r3, #0]
 8001618:	4b89      	ldr	r3, [pc, #548]	; (8001840 <HAL_GPIO_EXTI_Callback+0x450>)
 800161a:	7818      	ldrb	r0, [r3, #0]
 800161c:	4b89      	ldr	r3, [pc, #548]	; (8001844 <HAL_GPIO_EXTI_Callback+0x454>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	4603      	mov	r3, r0
 8001624:	4883      	ldr	r0, [pc, #524]	; (8001834 <HAL_GPIO_EXTI_Callback+0x444>)
 8001626:	f7ff fd24 	bl	8001072 <DS3231_SetDate>
					  }
					}
		  }


	  if(GPIO_Pin == GPIO_PIN_11 && dht != DHT  && state == DATE
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001630:	d107      	bne.n	8001642 <HAL_GPIO_EXTI_Callback+0x252>
 8001632:	4b85      	ldr	r3, [pc, #532]	; (8001848 <HAL_GPIO_EXTI_Callback+0x458>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_EXTI_Callback+0x252>
 800163a:	4b79      	ldr	r3, [pc, #484]	; (8001820 <HAL_GPIO_EXTI_Callback+0x430>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00c      	beq.n	800165c <HAL_GPIO_EXTI_Callback+0x26c>
			  || flag == 16769055 && dht != DHT && state == DATE)
 8001642:	4b78      	ldr	r3, [pc, #480]	; (8001824 <HAL_GPIO_EXTI_Callback+0x434>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a81      	ldr	r2, [pc, #516]	; (800184c <HAL_GPIO_EXTI_Callback+0x45c>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d15d      	bne.n	8001708 <HAL_GPIO_EXTI_Callback+0x318>
 800164c:	4b7e      	ldr	r3, [pc, #504]	; (8001848 <HAL_GPIO_EXTI_Callback+0x458>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d059      	beq.n	8001708 <HAL_GPIO_EXTI_Callback+0x318>
 8001654:	4b72      	ldr	r3, [pc, #456]	; (8001820 <HAL_GPIO_EXTI_Callback+0x430>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d155      	bne.n	8001708 <HAL_GPIO_EXTI_Callback+0x318>
	  	  	  {
	  	  if(HAL_GetTick()- timer < 90)
 800165c:	f002 fce8 	bl	8004030 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	4b7b      	ldr	r3, [pc, #492]	; (8001850 <HAL_GPIO_EXTI_Callback+0x460>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b59      	cmp	r3, #89	; 0x59
 800166a:	f240 831a 	bls.w	8001ca2 <HAL_GPIO_EXTI_Callback+0x8b2>
		  {
			return;
		  }
			timer = HAL_GetTick();
 800166e:	f002 fcdf 	bl	8004030 <HAL_GetTick>
 8001672:	4603      	mov	r3, r0
 8001674:	4a76      	ldr	r2, [pc, #472]	; (8001850 <HAL_GPIO_EXTI_Callback+0x460>)
 8001676:	6013      	str	r3, [r2, #0]
	  	  		  if (alarm == ALARM)
 8001678:	4b76      	ldr	r3, [pc, #472]	; (8001854 <HAL_GPIO_EXTI_Callback+0x464>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d127      	bne.n	80016d0 <HAL_GPIO_EXTI_Callback+0x2e0>
	  			  {
	  				  lcd_clear(&p_lcd);
 8001680:	4875      	ldr	r0, [pc, #468]	; (8001858 <HAL_GPIO_EXTI_Callback+0x468>)
 8001682:	f7ff fe8e 	bl	80013a2 <lcd_clear>

		  			  savealarmhour = DS3231.Hour;
 8001686:	4b6b      	ldr	r3, [pc, #428]	; (8001834 <HAL_GPIO_EXTI_Callback+0x444>)
 8001688:	799b      	ldrb	r3, [r3, #6]
 800168a:	b29a      	uxth	r2, r3
 800168c:	4b73      	ldr	r3, [pc, #460]	; (800185c <HAL_GPIO_EXTI_Callback+0x46c>)
 800168e:	801a      	strh	r2, [r3, #0]
					  savealarmmin  = DS3231.Min;
 8001690:	4b68      	ldr	r3, [pc, #416]	; (8001834 <HAL_GPIO_EXTI_Callback+0x444>)
 8001692:	795b      	ldrb	r3, [r3, #5]
 8001694:	b29a      	uxth	r2, r3
 8001696:	4b72      	ldr	r3, [pc, #456]	; (8001860 <HAL_GPIO_EXTI_Callback+0x470>)
 8001698:	801a      	strh	r2, [r3, #0]
					  alarmday   = DS3231.Day;
 800169a:	4b66      	ldr	r3, [pc, #408]	; (8001834 <HAL_GPIO_EXTI_Callback+0x444>)
 800169c:	7a1b      	ldrb	r3, [r3, #8]
 800169e:	461a      	mov	r2, r3
 80016a0:	4b70      	ldr	r3, [pc, #448]	; (8001864 <HAL_GPIO_EXTI_Callback+0x474>)
 80016a2:	601a      	str	r2, [r3, #0]
	  				  alarmdate  = DS3231.Date;
 80016a4:	4b63      	ldr	r3, [pc, #396]	; (8001834 <HAL_GPIO_EXTI_Callback+0x444>)
 80016a6:	79db      	ldrb	r3, [r3, #7]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b6f      	ldr	r3, [pc, #444]	; (8001868 <HAL_GPIO_EXTI_Callback+0x478>)
 80016ac:	601a      	str	r2, [r3, #0]
	  				  alarmmonth = DS3231.Month;
 80016ae:	4b61      	ldr	r3, [pc, #388]	; (8001834 <HAL_GPIO_EXTI_Callback+0x444>)
 80016b0:	7a5b      	ldrb	r3, [r3, #9]
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b6d      	ldr	r3, [pc, #436]	; (800186c <HAL_GPIO_EXTI_Callback+0x47c>)
 80016b6:	601a      	str	r2, [r3, #0]
	  				  alarmyear  = DS3231.Year;
 80016b8:	4b5e      	ldr	r3, [pc, #376]	; (8001834 <HAL_GPIO_EXTI_Callback+0x444>)
 80016ba:	7a9b      	ldrb	r3, [r3, #10]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b6c      	ldr	r3, [pc, #432]	; (8001870 <HAL_GPIO_EXTI_Callback+0x480>)
 80016c0:	601a      	str	r2, [r3, #0]
	  				  alarm = ALARM_DAY;
 80016c2:	4b64      	ldr	r3, [pc, #400]	; (8001854 <HAL_GPIO_EXTI_Callback+0x464>)
 80016c4:	2204      	movs	r2, #4
 80016c6:	701a      	strb	r2, [r3, #0]
	  				  flag = 0;
 80016c8:	4b56      	ldr	r3, [pc, #344]	; (8001824 <HAL_GPIO_EXTI_Callback+0x434>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e01b      	b.n	8001708 <HAL_GPIO_EXTI_Callback+0x318>
	  			  }
	  	  		  else
	  	  		  {
	  				  alarm++;
 80016d0:	4b60      	ldr	r3, [pc, #384]	; (8001854 <HAL_GPIO_EXTI_Callback+0x464>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	4b5e      	ldr	r3, [pc, #376]	; (8001854 <HAL_GPIO_EXTI_Callback+0x464>)
 80016da:	701a      	strb	r2, [r3, #0]
	  				  if (alarm - ALARM_MIN == 1)
 80016dc:	4b5d      	ldr	r3, [pc, #372]	; (8001854 <HAL_GPIO_EXTI_Callback+0x464>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d102      	bne.n	80016ea <HAL_GPIO_EXTI_Callback+0x2fa>
	  				  	  {
	  					  alarm = ALARM;
 80016e4:	4b5b      	ldr	r3, [pc, #364]	; (8001854 <HAL_GPIO_EXTI_Callback+0x464>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
	  				  	  }
					  if (alarm - ALARM_DATE == 1)
 80016ea:	4b5a      	ldr	r3, [pc, #360]	; (8001854 <HAL_GPIO_EXTI_Callback+0x464>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d107      	bne.n	8001702 <HAL_GPIO_EXTI_Callback+0x312>
						  {
						   savealarmmin  = DS3231.Min;
 80016f2:	4b50      	ldr	r3, [pc, #320]	; (8001834 <HAL_GPIO_EXTI_Callback+0x444>)
 80016f4:	795b      	ldrb	r3, [r3, #5]
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4b59      	ldr	r3, [pc, #356]	; (8001860 <HAL_GPIO_EXTI_Callback+0x470>)
 80016fa:	801a      	strh	r2, [r3, #0]
						   alarm = ALARM_HOUR;
 80016fc:	4b55      	ldr	r3, [pc, #340]	; (8001854 <HAL_GPIO_EXTI_Callback+0x464>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]


						  }
	  				 flag = 0;
 8001702:	4b48      	ldr	r3, [pc, #288]	; (8001824 <HAL_GPIO_EXTI_Callback+0x434>)
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
	  	  		   }
	  	  	      }


	  if (GPIO_Pin == GPIO_PIN_15 || flag == 16748655)
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800170e:	d004      	beq.n	800171a <HAL_GPIO_EXTI_Callback+0x32a>
 8001710:	4b44      	ldr	r3, [pc, #272]	; (8001824 <HAL_GPIO_EXTI_Callback+0x434>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a57      	ldr	r2, [pc, #348]	; (8001874 <HAL_GPIO_EXTI_Callback+0x484>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d11d      	bne.n	8001756 <HAL_GPIO_EXTI_Callback+0x366>
	  	  	  {
	  	  if(HAL_GetTick()- timer < 50)
 800171a:	f002 fc89 	bl	8004030 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	4b4b      	ldr	r3, [pc, #300]	; (8001850 <HAL_GPIO_EXTI_Callback+0x460>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b31      	cmp	r3, #49	; 0x31
 8001728:	f240 82bd 	bls.w	8001ca6 <HAL_GPIO_EXTI_Callback+0x8b6>
		  {
			return;
		  }
					if (dht == HOME)
 800172c:	4b46      	ldr	r3, [pc, #280]	; (8001848 <HAL_GPIO_EXTI_Callback+0x458>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d103      	bne.n	800173c <HAL_GPIO_EXTI_Callback+0x34c>
						{
						dht = DHT;
 8001734:	4b44      	ldr	r3, [pc, #272]	; (8001848 <HAL_GPIO_EXTI_Callback+0x458>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	e00c      	b.n	8001756 <HAL_GPIO_EXTI_Callback+0x366>
						}
					else
					{
						dht++;
 800173c:	4b42      	ldr	r3, [pc, #264]	; (8001848 <HAL_GPIO_EXTI_Callback+0x458>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	3301      	adds	r3, #1
 8001742:	b2da      	uxtb	r2, r3
 8001744:	4b40      	ldr	r3, [pc, #256]	; (8001848 <HAL_GPIO_EXTI_Callback+0x458>)
 8001746:	701a      	strb	r2, [r3, #0]
						if (dht - DHT == 1)
 8001748:	4b3f      	ldr	r3, [pc, #252]	; (8001848 <HAL_GPIO_EXTI_Callback+0x458>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d102      	bne.n	8001756 <HAL_GPIO_EXTI_Callback+0x366>
							{
							dht = DATE;
 8001750:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <HAL_GPIO_EXTI_Callback+0x458>)
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
							}
					}

				}

	  if(        GPIO_Pin == GPIO_PIN_9  && dht != DHT  && alarm == ALARM
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800175c:	d107      	bne.n	800176e <HAL_GPIO_EXTI_Callback+0x37e>
 800175e:	4b3a      	ldr	r3, [pc, #232]	; (8001848 <HAL_GPIO_EXTI_Callback+0x458>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d003      	beq.n	800176e <HAL_GPIO_EXTI_Callback+0x37e>
 8001766:	4b3b      	ldr	r3, [pc, #236]	; (8001854 <HAL_GPIO_EXTI_Callback+0x464>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00f      	beq.n	800178e <HAL_GPIO_EXTI_Callback+0x39e>
			  || flag == 16761405 && dht != DHT && alarm == ALARM)
 800176e:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <HAL_GPIO_EXTI_Callback+0x434>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a41      	ldr	r2, [pc, #260]	; (8001878 <HAL_GPIO_EXTI_Callback+0x488>)
 8001774:	4293      	cmp	r3, r2
 8001776:	f040 815d 	bne.w	8001a34 <HAL_GPIO_EXTI_Callback+0x644>
 800177a:	4b33      	ldr	r3, [pc, #204]	; (8001848 <HAL_GPIO_EXTI_Callback+0x458>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b01      	cmp	r3, #1
 8001780:	f000 8158 	beq.w	8001a34 <HAL_GPIO_EXTI_Callback+0x644>
 8001784:	4b33      	ldr	r3, [pc, #204]	; (8001854 <HAL_GPIO_EXTI_Callback+0x464>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	f040 8153 	bne.w	8001a34 <HAL_GPIO_EXTI_Callback+0x644>
	 	 {
	  	  if(HAL_GetTick()- timer < 90)
 800178e:	f002 fc4f 	bl	8004030 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	4b2e      	ldr	r3, [pc, #184]	; (8001850 <HAL_GPIO_EXTI_Callback+0x460>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b59      	cmp	r3, #89	; 0x59
 800179c:	f240 8285 	bls.w	8001caa <HAL_GPIO_EXTI_Callback+0x8ba>
		  {
			return;
		  }
			timer = HAL_GetTick();
 80017a0:	f002 fc46 	bl	8004030 <HAL_GetTick>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4a2a      	ldr	r2, [pc, #168]	; (8001850 <HAL_GPIO_EXTI_Callback+0x460>)
 80017a8:	6013      	str	r3, [r2, #0]
      switch (state)
 80017aa:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <HAL_GPIO_EXTI_Callback+0x430>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	2b06      	cmp	r3, #6
 80017b2:	f200 813f 	bhi.w	8001a34 <HAL_GPIO_EXTI_Callback+0x644>
 80017b6:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <HAL_GPIO_EXTI_Callback+0x3cc>)
 80017b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017bc:	0800187d 	.word	0x0800187d
 80017c0:	080017fd 	.word	0x080017fd
 80017c4:	080017d9 	.word	0x080017d9
 80017c8:	080018a1 	.word	0x080018a1
 80017cc:	080018c5 	.word	0x080018c5
 80017d0:	080018e9 	.word	0x080018e9
 80017d4:	0800190d 	.word	0x0800190d
	 	 {
	 	 	 case SET_SEC:
	 	 		 savesec++;
 80017d8:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_GPIO_EXTI_Callback+0x440>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_GPIO_EXTI_Callback+0x440>)
 80017e2:	701a      	strb	r2, [r3, #0]
	 	 		 flag = 0;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <HAL_GPIO_EXTI_Callback+0x434>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
	 	 		 if (savesec > 59)
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_GPIO_EXTI_Callback+0x440>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b3b      	cmp	r3, #59	; 0x3b
 80017f0:	f240 8113 	bls.w	8001a1a <HAL_GPIO_EXTI_Callback+0x62a>

	 	 		 {
	 	 			 savesec = 0;
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_GPIO_EXTI_Callback+0x440>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
	 	 		 }
		     break;
 80017fa:	e10e      	b.n	8001a1a <HAL_GPIO_EXTI_Callback+0x62a>

			case SET_MIN:
				savemin++;
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_GPIO_EXTI_Callback+0x43c>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_GPIO_EXTI_Callback+0x43c>)
 8001806:	701a      	strb	r2, [r3, #0]
				flag = 0;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_GPIO_EXTI_Callback+0x434>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
				if (savemin > 59)
 800180e:	4b07      	ldr	r3, [pc, #28]	; (800182c <HAL_GPIO_EXTI_Callback+0x43c>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b3b      	cmp	r3, #59	; 0x3b
 8001814:	f240 8103 	bls.w	8001a1e <HAL_GPIO_EXTI_Callback+0x62e>
					{
					 savemin = 0;
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <HAL_GPIO_EXTI_Callback+0x43c>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
					}
				break;
 800181e:	e0fe      	b.n	8001a1e <HAL_GPIO_EXTI_Callback+0x62e>
 8001820:	20000219 	.word	0x20000219
 8001824:	20000250 	.word	0x20000250
 8001828:	20000240 	.word	0x20000240
 800182c:	20000241 	.word	0x20000241
 8001830:	20000242 	.word	0x20000242
 8001834:	2000007c 	.word	0x2000007c
 8001838:	20000243 	.word	0x20000243
 800183c:	20000244 	.word	0x20000244
 8001840:	20000245 	.word	0x20000245
 8001844:	20000246 	.word	0x20000246
 8001848:	2000021a 	.word	0x2000021a
 800184c:	00ffe01f 	.word	0x00ffe01f
 8001850:	20000248 	.word	0x20000248
 8001854:	20000218 	.word	0x20000218
 8001858:	2000020c 	.word	0x2000020c
 800185c:	2000022e 	.word	0x2000022e
 8001860:	2000022c 	.word	0x2000022c
 8001864:	20000230 	.word	0x20000230
 8001868:	20000234 	.word	0x20000234
 800186c:	20000238 	.word	0x20000238
 8001870:	2000023c 	.word	0x2000023c
 8001874:	00ff906f 	.word	0x00ff906f
 8001878:	00ffc23d 	.word	0x00ffc23d
			case SET_HOUR:
				savehour++;
 800187c:	4b8e      	ldr	r3, [pc, #568]	; (8001ab8 <HAL_GPIO_EXTI_Callback+0x6c8>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b8c      	ldr	r3, [pc, #560]	; (8001ab8 <HAL_GPIO_EXTI_Callback+0x6c8>)
 8001886:	701a      	strb	r2, [r3, #0]
				flag = 0;
 8001888:	4b8c      	ldr	r3, [pc, #560]	; (8001abc <HAL_GPIO_EXTI_Callback+0x6cc>)
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
				if (savehour > 23)
 800188e:	4b8a      	ldr	r3, [pc, #552]	; (8001ab8 <HAL_GPIO_EXTI_Callback+0x6c8>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b17      	cmp	r3, #23
 8001894:	f240 80c5 	bls.w	8001a22 <HAL_GPIO_EXTI_Callback+0x632>
					{
					 savehour = 0;
 8001898:	4b87      	ldr	r3, [pc, #540]	; (8001ab8 <HAL_GPIO_EXTI_Callback+0x6c8>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
					}
				break;
 800189e:	e0c0      	b.n	8001a22 <HAL_GPIO_EXTI_Callback+0x632>
			case SET_DAY:
				saveday++;
 80018a0:	4b87      	ldr	r3, [pc, #540]	; (8001ac0 <HAL_GPIO_EXTI_Callback+0x6d0>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b85      	ldr	r3, [pc, #532]	; (8001ac0 <HAL_GPIO_EXTI_Callback+0x6d0>)
 80018aa:	701a      	strb	r2, [r3, #0]
				flag = 0;
 80018ac:	4b83      	ldr	r3, [pc, #524]	; (8001abc <HAL_GPIO_EXTI_Callback+0x6cc>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
				if (saveday > 7 )
 80018b2:	4b83      	ldr	r3, [pc, #524]	; (8001ac0 <HAL_GPIO_EXTI_Callback+0x6d0>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b07      	cmp	r3, #7
 80018b8:	f240 80b5 	bls.w	8001a26 <HAL_GPIO_EXTI_Callback+0x636>
					{
					saveday = 1;
 80018bc:	4b80      	ldr	r3, [pc, #512]	; (8001ac0 <HAL_GPIO_EXTI_Callback+0x6d0>)
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
					}
				break;
 80018c2:	e0b0      	b.n	8001a26 <HAL_GPIO_EXTI_Callback+0x636>
			case SET_YEAR:
				saveyear++;
 80018c4:	4b7f      	ldr	r3, [pc, #508]	; (8001ac4 <HAL_GPIO_EXTI_Callback+0x6d4>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	3301      	adds	r3, #1
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	4b7d      	ldr	r3, [pc, #500]	; (8001ac4 <HAL_GPIO_EXTI_Callback+0x6d4>)
 80018ce:	701a      	strb	r2, [r3, #0]
				flag = 0;
 80018d0:	4b7a      	ldr	r3, [pc, #488]	; (8001abc <HAL_GPIO_EXTI_Callback+0x6cc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
				if ( saveyear > 30)
 80018d6:	4b7b      	ldr	r3, [pc, #492]	; (8001ac4 <HAL_GPIO_EXTI_Callback+0x6d4>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b1e      	cmp	r3, #30
 80018dc:	f240 80a5 	bls.w	8001a2a <HAL_GPIO_EXTI_Callback+0x63a>
				{
					saveyear = 24;
 80018e0:	4b78      	ldr	r3, [pc, #480]	; (8001ac4 <HAL_GPIO_EXTI_Callback+0x6d4>)
 80018e2:	2218      	movs	r2, #24
 80018e4:	701a      	strb	r2, [r3, #0]
				}
				break;
 80018e6:	e0a0      	b.n	8001a2a <HAL_GPIO_EXTI_Callback+0x63a>
			case SET_MONTH:
				savemonth++;
 80018e8:	4b77      	ldr	r3, [pc, #476]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	3301      	adds	r3, #1
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	4b75      	ldr	r3, [pc, #468]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 80018f2:	701a      	strb	r2, [r3, #0]
				flag = 0;
 80018f4:	4b71      	ldr	r3, [pc, #452]	; (8001abc <HAL_GPIO_EXTI_Callback+0x6cc>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
				if ( savemonth > 12)
 80018fa:	4b73      	ldr	r3, [pc, #460]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b0c      	cmp	r3, #12
 8001900:	f240 8095 	bls.w	8001a2e <HAL_GPIO_EXTI_Callback+0x63e>
				{
					savemonth = 1;
 8001904:	4b70      	ldr	r3, [pc, #448]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
				}
				break;
 800190a:	e090      	b.n	8001a2e <HAL_GPIO_EXTI_Callback+0x63e>
			case SET_DATE:
				savedate++;
 800190c:	4b6f      	ldr	r3, [pc, #444]	; (8001acc <HAL_GPIO_EXTI_Callback+0x6dc>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	3301      	adds	r3, #1
 8001912:	b2da      	uxtb	r2, r3
 8001914:	4b6d      	ldr	r3, [pc, #436]	; (8001acc <HAL_GPIO_EXTI_Callback+0x6dc>)
 8001916:	701a      	strb	r2, [r3, #0]
				flag = 0;
 8001918:	4b68      	ldr	r3, [pc, #416]	; (8001abc <HAL_GPIO_EXTI_Callback+0x6cc>)
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
				if (savemonth == 1
 800191e:	4b6a      	ldr	r3, [pc, #424]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d017      	beq.n	8001956 <HAL_GPIO_EXTI_Callback+0x566>
						|| savemonth == 3
 8001926:	4b68      	ldr	r3, [pc, #416]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b03      	cmp	r3, #3
 800192c:	d013      	beq.n	8001956 <HAL_GPIO_EXTI_Callback+0x566>
						|| savemonth == 5
 800192e:	4b66      	ldr	r3, [pc, #408]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b05      	cmp	r3, #5
 8001934:	d00f      	beq.n	8001956 <HAL_GPIO_EXTI_Callback+0x566>
						|| savemonth == 7
 8001936:	4b64      	ldr	r3, [pc, #400]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b07      	cmp	r3, #7
 800193c:	d00b      	beq.n	8001956 <HAL_GPIO_EXTI_Callback+0x566>
						|| savemonth == 8
 800193e:	4b62      	ldr	r3, [pc, #392]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b08      	cmp	r3, #8
 8001944:	d007      	beq.n	8001956 <HAL_GPIO_EXTI_Callback+0x566>
						|| savemonth == 10
 8001946:	4b60      	ldr	r3, [pc, #384]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b0a      	cmp	r3, #10
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_EXTI_Callback+0x566>
						|| savemonth == 12 )
 800194e:	4b5e      	ldr	r3, [pc, #376]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b0c      	cmp	r3, #12
 8001954:	d106      	bne.n	8001964 <HAL_GPIO_EXTI_Callback+0x574>
					{
					if (savedate > 31)
 8001956:	4b5d      	ldr	r3, [pc, #372]	; (8001acc <HAL_GPIO_EXTI_Callback+0x6dc>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b1f      	cmp	r3, #31
 800195c:	d902      	bls.n	8001964 <HAL_GPIO_EXTI_Callback+0x574>
						{
						savedate = 1;
 800195e:	4b5b      	ldr	r3, [pc, #364]	; (8001acc <HAL_GPIO_EXTI_Callback+0x6dc>)
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
						}
					}
				if (savemonth == 2 && saveyear == 24)
 8001964:	4b58      	ldr	r3, [pc, #352]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b02      	cmp	r3, #2
 800196a:	d10b      	bne.n	8001984 <HAL_GPIO_EXTI_Callback+0x594>
 800196c:	4b55      	ldr	r3, [pc, #340]	; (8001ac4 <HAL_GPIO_EXTI_Callback+0x6d4>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b18      	cmp	r3, #24
 8001972:	d107      	bne.n	8001984 <HAL_GPIO_EXTI_Callback+0x594>
					{
					if (savedate > 29)
 8001974:	4b55      	ldr	r3, [pc, #340]	; (8001acc <HAL_GPIO_EXTI_Callback+0x6dc>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b1d      	cmp	r3, #29
 800197a:	d932      	bls.n	80019e2 <HAL_GPIO_EXTI_Callback+0x5f2>
						{
						savedate = 1;
 800197c:	4b53      	ldr	r3, [pc, #332]	; (8001acc <HAL_GPIO_EXTI_Callback+0x6dc>)
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
					if (savedate > 29)
 8001982:	e02e      	b.n	80019e2 <HAL_GPIO_EXTI_Callback+0x5f2>
						}
					}
				else if (savemonth == 2 && saveyear == 28)
 8001984:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d10b      	bne.n	80019a4 <HAL_GPIO_EXTI_Callback+0x5b4>
 800198c:	4b4d      	ldr	r3, [pc, #308]	; (8001ac4 <HAL_GPIO_EXTI_Callback+0x6d4>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b1c      	cmp	r3, #28
 8001992:	d107      	bne.n	80019a4 <HAL_GPIO_EXTI_Callback+0x5b4>
				    {
					if (savedate > 29)
 8001994:	4b4d      	ldr	r3, [pc, #308]	; (8001acc <HAL_GPIO_EXTI_Callback+0x6dc>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b1d      	cmp	r3, #29
 800199a:	d922      	bls.n	80019e2 <HAL_GPIO_EXTI_Callback+0x5f2>
						{
						savedate = 1;
 800199c:	4b4b      	ldr	r3, [pc, #300]	; (8001acc <HAL_GPIO_EXTI_Callback+0x6dc>)
 800199e:	2201      	movs	r2, #1
 80019a0:	701a      	strb	r2, [r3, #0]
					if (savedate > 29)
 80019a2:	e01e      	b.n	80019e2 <HAL_GPIO_EXTI_Callback+0x5f2>
						}
					}
				else if (savemonth == 2 && saveyear != 24)
 80019a4:	4b48      	ldr	r3, [pc, #288]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d10b      	bne.n	80019c4 <HAL_GPIO_EXTI_Callback+0x5d4>
 80019ac:	4b45      	ldr	r3, [pc, #276]	; (8001ac4 <HAL_GPIO_EXTI_Callback+0x6d4>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b18      	cmp	r3, #24
 80019b2:	d007      	beq.n	80019c4 <HAL_GPIO_EXTI_Callback+0x5d4>
					{
					if (savedate > 28)
 80019b4:	4b45      	ldr	r3, [pc, #276]	; (8001acc <HAL_GPIO_EXTI_Callback+0x6dc>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b1c      	cmp	r3, #28
 80019ba:	d912      	bls.n	80019e2 <HAL_GPIO_EXTI_Callback+0x5f2>
						{
						savedate = 1;
 80019bc:	4b43      	ldr	r3, [pc, #268]	; (8001acc <HAL_GPIO_EXTI_Callback+0x6dc>)
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
					if (savedate > 28)
 80019c2:	e00e      	b.n	80019e2 <HAL_GPIO_EXTI_Callback+0x5f2>
						}
					}
				else if (savemonth == 2 && saveyear != 28)
 80019c4:	4b40      	ldr	r3, [pc, #256]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d10a      	bne.n	80019e2 <HAL_GPIO_EXTI_Callback+0x5f2>
 80019cc:	4b3d      	ldr	r3, [pc, #244]	; (8001ac4 <HAL_GPIO_EXTI_Callback+0x6d4>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b1c      	cmp	r3, #28
 80019d2:	d006      	beq.n	80019e2 <HAL_GPIO_EXTI_Callback+0x5f2>
					{
					if (savedate > 28)
 80019d4:	4b3d      	ldr	r3, [pc, #244]	; (8001acc <HAL_GPIO_EXTI_Callback+0x6dc>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b1c      	cmp	r3, #28
 80019da:	d902      	bls.n	80019e2 <HAL_GPIO_EXTI_Callback+0x5f2>
						{
						savedate = 1;
 80019dc:	4b3b      	ldr	r3, [pc, #236]	; (8001acc <HAL_GPIO_EXTI_Callback+0x6dc>)
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
						}
					}
				if (savemonth == 4
 80019e2:	4b39      	ldr	r3, [pc, #228]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d00f      	beq.n	8001a0a <HAL_GPIO_EXTI_Callback+0x61a>
						|| savemonth == 6
 80019ea:	4b37      	ldr	r3, [pc, #220]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d00b      	beq.n	8001a0a <HAL_GPIO_EXTI_Callback+0x61a>
						|| savemonth == 3
 80019f2:	4b35      	ldr	r3, [pc, #212]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d007      	beq.n	8001a0a <HAL_GPIO_EXTI_Callback+0x61a>
						|| savemonth == 9
 80019fa:	4b33      	ldr	r3, [pc, #204]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b09      	cmp	r3, #9
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_EXTI_Callback+0x61a>
						|| savemonth == 11)
 8001a02:	4b31      	ldr	r3, [pc, #196]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b0b      	cmp	r3, #11
 8001a08:	d113      	bne.n	8001a32 <HAL_GPIO_EXTI_Callback+0x642>
					{
					if (savedate > 30)
 8001a0a:	4b30      	ldr	r3, [pc, #192]	; (8001acc <HAL_GPIO_EXTI_Callback+0x6dc>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b1e      	cmp	r3, #30
 8001a10:	d90f      	bls.n	8001a32 <HAL_GPIO_EXTI_Callback+0x642>
						{
						savedate = 1;
 8001a12:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <HAL_GPIO_EXTI_Callback+0x6dc>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
						}
					}
				break;
 8001a18:	e00b      	b.n	8001a32 <HAL_GPIO_EXTI_Callback+0x642>
		     break;
 8001a1a:	bf00      	nop
 8001a1c:	e00a      	b.n	8001a34 <HAL_GPIO_EXTI_Callback+0x644>
				break;
 8001a1e:	bf00      	nop
 8001a20:	e008      	b.n	8001a34 <HAL_GPIO_EXTI_Callback+0x644>
				break;
 8001a22:	bf00      	nop
 8001a24:	e006      	b.n	8001a34 <HAL_GPIO_EXTI_Callback+0x644>
				break;
 8001a26:	bf00      	nop
 8001a28:	e004      	b.n	8001a34 <HAL_GPIO_EXTI_Callback+0x644>
				break;
 8001a2a:	bf00      	nop
 8001a2c:	e002      	b.n	8001a34 <HAL_GPIO_EXTI_Callback+0x644>
				break;
 8001a2e:	bf00      	nop
 8001a30:	e000      	b.n	8001a34 <HAL_GPIO_EXTI_Callback+0x644>
				break;
 8001a32:	bf00      	nop
	 	 }
	 	 }


      if(GPIO_Pin == GPIO_PIN_12 && dht != DHT  && state == DATE
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a3a:	d107      	bne.n	8001a4c <HAL_GPIO_EXTI_Callback+0x65c>
 8001a3c:	4b24      	ldr	r3, [pc, #144]	; (8001ad0 <HAL_GPIO_EXTI_Callback+0x6e0>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_EXTI_Callback+0x65c>
 8001a44:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00f      	beq.n	8001a6c <HAL_GPIO_EXTI_Callback+0x67c>
    		  || flag == 16754775 && dht != DHT && state == DATE)
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_GPIO_EXTI_Callback+0x6cc>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a21      	ldr	r2, [pc, #132]	; (8001ad8 <HAL_GPIO_EXTI_Callback+0x6e8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	f040 813a 	bne.w	8001ccc <HAL_GPIO_EXTI_Callback+0x8dc>
 8001a58:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <HAL_GPIO_EXTI_Callback+0x6e0>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	f000 8135 	beq.w	8001ccc <HAL_GPIO_EXTI_Callback+0x8dc>
 8001a62:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f040 8130 	bne.w	8001ccc <HAL_GPIO_EXTI_Callback+0x8dc>
      {
	  	  if(HAL_GetTick()- timer < 90)
 8001a6c:	f002 fae0 	bl	8004030 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <HAL_GPIO_EXTI_Callback+0x6ec>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b59      	cmp	r3, #89	; 0x59
 8001a7a:	f240 8118 	bls.w	8001cae <HAL_GPIO_EXTI_Callback+0x8be>
		  {
			return;
		  }
			timer = HAL_GetTick();
 8001a7e:	f002 fad7 	bl	8004030 <HAL_GetTick>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4a15      	ldr	r2, [pc, #84]	; (8001adc <HAL_GPIO_EXTI_Callback+0x6ec>)
 8001a86:	6013      	str	r3, [r2, #0]
				switch(alarm)
 8001a88:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_GPIO_EXTI_Callback+0x6f0>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	f200 810f 	bhi.w	8001cb2 <HAL_GPIO_EXTI_Callback+0x8c2>
 8001a94:	a201      	add	r2, pc, #4	; (adr r2, 8001a9c <HAL_GPIO_EXTI_Callback+0x6ac>)
 8001a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9a:	bf00      	nop
 8001a9c:	08001b09 	.word	0x08001b09
 8001aa0:	08001ae5 	.word	0x08001ae5
 8001aa4:	08001cb3 	.word	0x08001cb3
 8001aa8:	08001b2d 	.word	0x08001b2d
 8001aac:	08001b4f 	.word	0x08001b4f
 8001ab0:	08001b71 	.word	0x08001b71
 8001ab4:	08001b93 	.word	0x08001b93
 8001ab8:	20000240 	.word	0x20000240
 8001abc:	20000250 	.word	0x20000250
 8001ac0:	20000243 	.word	0x20000243
 8001ac4:	20000246 	.word	0x20000246
 8001ac8:	20000245 	.word	0x20000245
 8001acc:	20000244 	.word	0x20000244
 8001ad0:	2000021a 	.word	0x2000021a
 8001ad4:	20000219 	.word	0x20000219
 8001ad8:	00ffa857 	.word	0x00ffa857
 8001adc:	20000248 	.word	0x20000248
 8001ae0:	20000218 	.word	0x20000218
				{
				case ALARM_MIN:
					savealarmmin++;
 8001ae4:	4b7b      	ldr	r3, [pc, #492]	; (8001cd4 <HAL_GPIO_EXTI_Callback+0x8e4>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	4b79      	ldr	r3, [pc, #484]	; (8001cd4 <HAL_GPIO_EXTI_Callback+0x8e4>)
 8001aee:	801a      	strh	r2, [r3, #0]
					flag = 0;
 8001af0:	4b79      	ldr	r3, [pc, #484]	; (8001cd8 <HAL_GPIO_EXTI_Callback+0x8e8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
					if (savealarmmin > 59)
 8001af6:	4b77      	ldr	r3, [pc, #476]	; (8001cd4 <HAL_GPIO_EXTI_Callback+0x8e4>)
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	2b3b      	cmp	r3, #59	; 0x3b
 8001afc:	f240 80db 	bls.w	8001cb6 <HAL_GPIO_EXTI_Callback+0x8c6>
						{
						savealarmmin = 0;
 8001b00:	4b74      	ldr	r3, [pc, #464]	; (8001cd4 <HAL_GPIO_EXTI_Callback+0x8e4>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	801a      	strh	r2, [r3, #0]
						}
					break;
 8001b06:	e0d6      	b.n	8001cb6 <HAL_GPIO_EXTI_Callback+0x8c6>
				case ALARM_HOUR:
					savealarmhour ++;
 8001b08:	4b74      	ldr	r3, [pc, #464]	; (8001cdc <HAL_GPIO_EXTI_Callback+0x8ec>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	4b72      	ldr	r3, [pc, #456]	; (8001cdc <HAL_GPIO_EXTI_Callback+0x8ec>)
 8001b12:	801a      	strh	r2, [r3, #0]
					flag = 0;
 8001b14:	4b70      	ldr	r3, [pc, #448]	; (8001cd8 <HAL_GPIO_EXTI_Callback+0x8e8>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
					if (savealarmhour > 23)
 8001b1a:	4b70      	ldr	r3, [pc, #448]	; (8001cdc <HAL_GPIO_EXTI_Callback+0x8ec>)
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	2b17      	cmp	r3, #23
 8001b20:	f240 80cb 	bls.w	8001cba <HAL_GPIO_EXTI_Callback+0x8ca>
						{
						savealarmhour = 0;
 8001b24:	4b6d      	ldr	r3, [pc, #436]	; (8001cdc <HAL_GPIO_EXTI_Callback+0x8ec>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	801a      	strh	r2, [r3, #0]
						}
					break;
 8001b2a:	e0c6      	b.n	8001cba <HAL_GPIO_EXTI_Callback+0x8ca>
				case ALARM_DAY:
					alarmday++;
 8001b2c:	4b6c      	ldr	r3, [pc, #432]	; (8001ce0 <HAL_GPIO_EXTI_Callback+0x8f0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	3301      	adds	r3, #1
 8001b32:	4a6b      	ldr	r2, [pc, #428]	; (8001ce0 <HAL_GPIO_EXTI_Callback+0x8f0>)
 8001b34:	6013      	str	r3, [r2, #0]
					flag = 0;
 8001b36:	4b68      	ldr	r3, [pc, #416]	; (8001cd8 <HAL_GPIO_EXTI_Callback+0x8e8>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
					if (alarmday > 7 )
 8001b3c:	4b68      	ldr	r3, [pc, #416]	; (8001ce0 <HAL_GPIO_EXTI_Callback+0x8f0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b07      	cmp	r3, #7
 8001b42:	f240 80bc 	bls.w	8001cbe <HAL_GPIO_EXTI_Callback+0x8ce>
						{
						alarmday = 1;
 8001b46:	4b66      	ldr	r3, [pc, #408]	; (8001ce0 <HAL_GPIO_EXTI_Callback+0x8f0>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
						}
					break;
 8001b4c:	e0b7      	b.n	8001cbe <HAL_GPIO_EXTI_Callback+0x8ce>
				case ALARM_YEAR:
					alarmyear++;
 8001b4e:	4b65      	ldr	r3, [pc, #404]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x8f4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	3301      	adds	r3, #1
 8001b54:	4a63      	ldr	r2, [pc, #396]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x8f4>)
 8001b56:	6013      	str	r3, [r2, #0]
					flag = 0;
 8001b58:	4b5f      	ldr	r3, [pc, #380]	; (8001cd8 <HAL_GPIO_EXTI_Callback+0x8e8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
					if ( alarmyear > 30)
 8001b5e:	4b61      	ldr	r3, [pc, #388]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x8f4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b1e      	cmp	r3, #30
 8001b64:	f240 80ad 	bls.w	8001cc2 <HAL_GPIO_EXTI_Callback+0x8d2>
					{
						alarmyear = 24;
 8001b68:	4b5e      	ldr	r3, [pc, #376]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x8f4>)
 8001b6a:	2218      	movs	r2, #24
 8001b6c:	601a      	str	r2, [r3, #0]
					}
					break;
 8001b6e:	e0a8      	b.n	8001cc2 <HAL_GPIO_EXTI_Callback+0x8d2>
				case ALARM_MONTH:
					alarmmonth++;
 8001b70:	4b5d      	ldr	r3, [pc, #372]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	3301      	adds	r3, #1
 8001b76:	4a5c      	ldr	r2, [pc, #368]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8001b78:	6013      	str	r3, [r2, #0]
					flag = 0;
 8001b7a:	4b57      	ldr	r3, [pc, #348]	; (8001cd8 <HAL_GPIO_EXTI_Callback+0x8e8>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
					if ( alarmmonth > 12)
 8001b80:	4b59      	ldr	r3, [pc, #356]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b0c      	cmp	r3, #12
 8001b86:	f240 809e 	bls.w	8001cc6 <HAL_GPIO_EXTI_Callback+0x8d6>
					{
						alarmmonth = 1;
 8001b8a:	4b57      	ldr	r3, [pc, #348]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
					}
					break;
 8001b90:	e099      	b.n	8001cc6 <HAL_GPIO_EXTI_Callback+0x8d6>
				case ALARM_DATE:
					alarmdate++;
 8001b92:	4b56      	ldr	r3, [pc, #344]	; (8001cec <HAL_GPIO_EXTI_Callback+0x8fc>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3301      	adds	r3, #1
 8001b98:	4a54      	ldr	r2, [pc, #336]	; (8001cec <HAL_GPIO_EXTI_Callback+0x8fc>)
 8001b9a:	6013      	str	r3, [r2, #0]
					flag = 0;
 8001b9c:	4b4e      	ldr	r3, [pc, #312]	; (8001cd8 <HAL_GPIO_EXTI_Callback+0x8e8>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
					if (alarmmonth == 1
 8001ba2:	4b51      	ldr	r3, [pc, #324]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d017      	beq.n	8001bda <HAL_GPIO_EXTI_Callback+0x7ea>
							|| alarmmonth == 3
 8001baa:	4b4f      	ldr	r3, [pc, #316]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d013      	beq.n	8001bda <HAL_GPIO_EXTI_Callback+0x7ea>
							|| alarmmonth == 5
 8001bb2:	4b4d      	ldr	r3, [pc, #308]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b05      	cmp	r3, #5
 8001bb8:	d00f      	beq.n	8001bda <HAL_GPIO_EXTI_Callback+0x7ea>
							|| alarmmonth == 7
 8001bba:	4b4b      	ldr	r3, [pc, #300]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b07      	cmp	r3, #7
 8001bc0:	d00b      	beq.n	8001bda <HAL_GPIO_EXTI_Callback+0x7ea>
							|| alarmmonth == 8
 8001bc2:	4b49      	ldr	r3, [pc, #292]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d007      	beq.n	8001bda <HAL_GPIO_EXTI_Callback+0x7ea>
							|| alarmmonth == 10
 8001bca:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b0a      	cmp	r3, #10
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_EXTI_Callback+0x7ea>
							|| alarmmonth == 12 )
 8001bd2:	4b45      	ldr	r3, [pc, #276]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	d106      	bne.n	8001be8 <HAL_GPIO_EXTI_Callback+0x7f8>
						{
						if (alarmdate > 31)
 8001bda:	4b44      	ldr	r3, [pc, #272]	; (8001cec <HAL_GPIO_EXTI_Callback+0x8fc>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b1f      	cmp	r3, #31
 8001be0:	d902      	bls.n	8001be8 <HAL_GPIO_EXTI_Callback+0x7f8>
							{
							alarmdate = 1;
 8001be2:	4b42      	ldr	r3, [pc, #264]	; (8001cec <HAL_GPIO_EXTI_Callback+0x8fc>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
							}
						}
					if (alarmmonth == 2 && alarmyear == 24)
 8001be8:	4b3f      	ldr	r3, [pc, #252]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d10b      	bne.n	8001c08 <HAL_GPIO_EXTI_Callback+0x818>
 8001bf0:	4b3c      	ldr	r3, [pc, #240]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x8f4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b18      	cmp	r3, #24
 8001bf6:	d107      	bne.n	8001c08 <HAL_GPIO_EXTI_Callback+0x818>
						{
						if (alarmdate > 29)
 8001bf8:	4b3c      	ldr	r3, [pc, #240]	; (8001cec <HAL_GPIO_EXTI_Callback+0x8fc>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b1d      	cmp	r3, #29
 8001bfe:	d932      	bls.n	8001c66 <HAL_GPIO_EXTI_Callback+0x876>
							{
							alarmdate = 1;
 8001c00:	4b3a      	ldr	r3, [pc, #232]	; (8001cec <HAL_GPIO_EXTI_Callback+0x8fc>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
						if (alarmdate > 29)
 8001c06:	e02e      	b.n	8001c66 <HAL_GPIO_EXTI_Callback+0x876>
							}
						}
					else if (alarmmonth == 2 && alarmyear == 28)
 8001c08:	4b37      	ldr	r3, [pc, #220]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d10b      	bne.n	8001c28 <HAL_GPIO_EXTI_Callback+0x838>
 8001c10:	4b34      	ldr	r3, [pc, #208]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x8f4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b1c      	cmp	r3, #28
 8001c16:	d107      	bne.n	8001c28 <HAL_GPIO_EXTI_Callback+0x838>
						{
						if (alarmdate > 29)
 8001c18:	4b34      	ldr	r3, [pc, #208]	; (8001cec <HAL_GPIO_EXTI_Callback+0x8fc>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b1d      	cmp	r3, #29
 8001c1e:	d922      	bls.n	8001c66 <HAL_GPIO_EXTI_Callback+0x876>
							{
							alarmdate = 1;
 8001c20:	4b32      	ldr	r3, [pc, #200]	; (8001cec <HAL_GPIO_EXTI_Callback+0x8fc>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	601a      	str	r2, [r3, #0]
						if (alarmdate > 29)
 8001c26:	e01e      	b.n	8001c66 <HAL_GPIO_EXTI_Callback+0x876>
							}
						}
					else if (alarmmonth == 2 && alarmyear != 24)
 8001c28:	4b2f      	ldr	r3, [pc, #188]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d10b      	bne.n	8001c48 <HAL_GPIO_EXTI_Callback+0x858>
 8001c30:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x8f4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b18      	cmp	r3, #24
 8001c36:	d007      	beq.n	8001c48 <HAL_GPIO_EXTI_Callback+0x858>
						{
						if (alarmdate > 28)
 8001c38:	4b2c      	ldr	r3, [pc, #176]	; (8001cec <HAL_GPIO_EXTI_Callback+0x8fc>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b1c      	cmp	r3, #28
 8001c3e:	d912      	bls.n	8001c66 <HAL_GPIO_EXTI_Callback+0x876>
							{
							alarmdate = 1;
 8001c40:	4b2a      	ldr	r3, [pc, #168]	; (8001cec <HAL_GPIO_EXTI_Callback+0x8fc>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
						if (alarmdate > 28)
 8001c46:	e00e      	b.n	8001c66 <HAL_GPIO_EXTI_Callback+0x876>
							}
						}
					else if (alarmmonth == 2 && alarmyear != 28)
 8001c48:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d10a      	bne.n	8001c66 <HAL_GPIO_EXTI_Callback+0x876>
 8001c50:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x8f4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b1c      	cmp	r3, #28
 8001c56:	d006      	beq.n	8001c66 <HAL_GPIO_EXTI_Callback+0x876>
						{
						if (alarmdate > 28)
 8001c58:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_GPIO_EXTI_Callback+0x8fc>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b1c      	cmp	r3, #28
 8001c5e:	d902      	bls.n	8001c66 <HAL_GPIO_EXTI_Callback+0x876>
							{
							alarmdate = 1;
 8001c60:	4b22      	ldr	r3, [pc, #136]	; (8001cec <HAL_GPIO_EXTI_Callback+0x8fc>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
							}
						}
					if (alarmmonth == 4
 8001c66:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d00f      	beq.n	8001c8e <HAL_GPIO_EXTI_Callback+0x89e>
							|| alarmmonth == 6
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d00b      	beq.n	8001c8e <HAL_GPIO_EXTI_Callback+0x89e>
							|| alarmmonth == 3
 8001c76:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d007      	beq.n	8001c8e <HAL_GPIO_EXTI_Callback+0x89e>
							|| alarmmonth == 9
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b09      	cmp	r3, #9
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_EXTI_Callback+0x89e>
							|| alarmmonth == 11)
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b0b      	cmp	r3, #11
 8001c8c:	d11d      	bne.n	8001cca <HAL_GPIO_EXTI_Callback+0x8da>
						{
						if (alarmdate > 30)
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <HAL_GPIO_EXTI_Callback+0x8fc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b1e      	cmp	r3, #30
 8001c94:	d919      	bls.n	8001cca <HAL_GPIO_EXTI_Callback+0x8da>
							{
							alarmdate = 1;
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_GPIO_EXTI_Callback+0x8fc>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
							}
						}
					break;
 8001c9c:	e015      	b.n	8001cca <HAL_GPIO_EXTI_Callback+0x8da>
			return;
 8001c9e:	bf00      	nop
 8001ca0:	e014      	b.n	8001ccc <HAL_GPIO_EXTI_Callback+0x8dc>
			return;
 8001ca2:	bf00      	nop
 8001ca4:	e012      	b.n	8001ccc <HAL_GPIO_EXTI_Callback+0x8dc>
			return;
 8001ca6:	bf00      	nop
 8001ca8:	e010      	b.n	8001ccc <HAL_GPIO_EXTI_Callback+0x8dc>
			return;
 8001caa:	bf00      	nop
 8001cac:	e00e      	b.n	8001ccc <HAL_GPIO_EXTI_Callback+0x8dc>
			return;
 8001cae:	bf00      	nop
 8001cb0:	e00c      	b.n	8001ccc <HAL_GPIO_EXTI_Callback+0x8dc>
		 default:
			    break;
 8001cb2:	bf00      	nop
 8001cb4:	e00a      	b.n	8001ccc <HAL_GPIO_EXTI_Callback+0x8dc>
					break;
 8001cb6:	bf00      	nop
 8001cb8:	e008      	b.n	8001ccc <HAL_GPIO_EXTI_Callback+0x8dc>
					break;
 8001cba:	bf00      	nop
 8001cbc:	e006      	b.n	8001ccc <HAL_GPIO_EXTI_Callback+0x8dc>
					break;
 8001cbe:	bf00      	nop
 8001cc0:	e004      	b.n	8001ccc <HAL_GPIO_EXTI_Callback+0x8dc>
					break;
 8001cc2:	bf00      	nop
 8001cc4:	e002      	b.n	8001ccc <HAL_GPIO_EXTI_Callback+0x8dc>
					break;
 8001cc6:	bf00      	nop
 8001cc8:	e000      	b.n	8001ccc <HAL_GPIO_EXTI_Callback+0x8dc>
					break;
 8001cca:	bf00      	nop
		}

      }

	}
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000022c 	.word	0x2000022c
 8001cd8:	20000250 	.word	0x20000250
 8001cdc:	2000022e 	.word	0x2000022e
 8001ce0:	20000230 	.word	0x20000230
 8001ce4:	2000023c 	.word	0x2000023c
 8001ce8:	20000238 	.word	0x20000238
 8001cec:	20000234 	.word	0x20000234

08001cf0 <microDelay>:
			void microDelay (uint16_t delay)
		  {
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80fb      	strh	r3, [r7, #6]
			__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <microDelay+0x2c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24
			while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 8001d02:	bf00      	nop
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <microDelay+0x2c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d3f9      	bcc.n	8001d04 <microDelay+0x14>
		  }
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	200001c4 	.word	0x200001c4

08001d20 <DHT11_Start>:
			uint8_t DHT11_Start (void)
			{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
			  uint8_t Response = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]
			  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
			  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8001d36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d3a:	607b      	str	r3, [r7, #4]
			  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
			  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2302      	movs	r3, #2
 8001d42:	613b      	str	r3, [r7, #16]
			  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
			  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	482c      	ldr	r0, [pc, #176]	; (8001e00 <DHT11_Start+0xe0>)
 8001d4e:	f002 faab 	bl	80042a8 <HAL_GPIO_Init>
			  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001d52:	2200      	movs	r2, #0
 8001d54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d58:	4829      	ldr	r0, [pc, #164]	; (8001e00 <DHT11_Start+0xe0>)
 8001d5a:	f002 fc40 	bl	80045de <HAL_GPIO_WritePin>
			  HAL_Delay(20);   // wait for 20ms
 8001d5e:	2014      	movs	r0, #20
 8001d60:	f002 f970 	bl	8004044 <HAL_Delay>
			  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001d64:	2201      	movs	r2, #1
 8001d66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d6a:	4825      	ldr	r0, [pc, #148]	; (8001e00 <DHT11_Start+0xe0>)
 8001d6c:	f002 fc37 	bl	80045de <HAL_GPIO_WritePin>
			  microDelay (30);   // wait for 30us
 8001d70:	201e      	movs	r0, #30
 8001d72:	f7ff ffbd 	bl	8001cf0 <microDelay>
			  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60bb      	str	r3, [r7, #8]
			  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
			  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	4619      	mov	r1, r3
 8001d82:	481f      	ldr	r0, [pc, #124]	; (8001e00 <DHT11_Start+0xe0>)
 8001d84:	f002 fa90 	bl	80042a8 <HAL_GPIO_Init>
			  microDelay (40);
 8001d88:	2028      	movs	r0, #40	; 0x28
 8001d8a:	f7ff ffb1 	bl	8001cf0 <microDelay>
			  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001d8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d92:	481b      	ldr	r0, [pc, #108]	; (8001e00 <DHT11_Start+0xe0>)
 8001d94:	f002 fc0c 	bl	80045b0 <HAL_GPIO_ReadPin>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10c      	bne.n	8001db8 <DHT11_Start+0x98>
			  {
				microDelay (80);
 8001d9e:	2050      	movs	r0, #80	; 0x50
 8001da0:	f7ff ffa6 	bl	8001cf0 <microDelay>
				if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001da4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001da8:	4815      	ldr	r0, [pc, #84]	; (8001e00 <DHT11_Start+0xe0>)
 8001daa:	f002 fc01 	bl	80045b0 <HAL_GPIO_ReadPin>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <DHT11_Start+0x98>
 8001db4:	2301      	movs	r3, #1
 8001db6:	75fb      	strb	r3, [r7, #23]
			  }
			  pMillis = HAL_GetTick();
 8001db8:	f002 f93a 	bl	8004030 <HAL_GetTick>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4a11      	ldr	r2, [pc, #68]	; (8001e04 <DHT11_Start+0xe4>)
 8001dc0:	6013      	str	r3, [r2, #0]
			  cMillis = HAL_GetTick();
 8001dc2:	f002 f935 	bl	8004030 <HAL_GetTick>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4a0f      	ldr	r2, [pc, #60]	; (8001e08 <DHT11_Start+0xe8>)
 8001dca:	6013      	str	r3, [r2, #0]
			  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001dcc:	e004      	b.n	8001dd8 <DHT11_Start+0xb8>
			  {
				cMillis = HAL_GetTick();
 8001dce:	f002 f92f 	bl	8004030 <HAL_GetTick>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <DHT11_Start+0xe8>)
 8001dd6:	6013      	str	r3, [r2, #0]
			  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001dd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ddc:	4808      	ldr	r0, [pc, #32]	; (8001e00 <DHT11_Start+0xe0>)
 8001dde:	f002 fbe7 	bl	80045b0 <HAL_GPIO_ReadPin>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d006      	beq.n	8001df6 <DHT11_Start+0xd6>
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <DHT11_Start+0xe4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	1c9a      	adds	r2, r3, #2
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <DHT11_Start+0xe8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d8eb      	bhi.n	8001dce <DHT11_Start+0xae>
			  }
			  return Response;
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
			}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40010c00 	.word	0x40010c00
 8001e04:	20000268 	.word	0x20000268
 8001e08:	2000026c 	.word	0x2000026c

08001e0c <DHT11_Read>:

			uint8_t DHT11_Read (void)
			{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
			  uint8_t a,b;
			  for (a=0;a<8;a++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	71fb      	strb	r3, [r7, #7]
 8001e16:	e066      	b.n	8001ee6 <DHT11_Read+0xda>
			  {
				pMillis = HAL_GetTick();
 8001e18:	f002 f90a 	bl	8004030 <HAL_GetTick>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4a36      	ldr	r2, [pc, #216]	; (8001ef8 <DHT11_Read+0xec>)
 8001e20:	6013      	str	r3, [r2, #0]
				cMillis = HAL_GetTick();
 8001e22:	f002 f905 	bl	8004030 <HAL_GetTick>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4a34      	ldr	r2, [pc, #208]	; (8001efc <DHT11_Read+0xf0>)
 8001e2a:	6013      	str	r3, [r2, #0]
				while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001e2c:	e004      	b.n	8001e38 <DHT11_Read+0x2c>
				{  // wait for the pin to go high
				  cMillis = HAL_GetTick();
 8001e2e:	f002 f8ff 	bl	8004030 <HAL_GetTick>
 8001e32:	4603      	mov	r3, r0
 8001e34:	4a31      	ldr	r2, [pc, #196]	; (8001efc <DHT11_Read+0xf0>)
 8001e36:	6013      	str	r3, [r2, #0]
				while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001e38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e3c:	4830      	ldr	r0, [pc, #192]	; (8001f00 <DHT11_Read+0xf4>)
 8001e3e:	f002 fbb7 	bl	80045b0 <HAL_GPIO_ReadPin>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d106      	bne.n	8001e56 <DHT11_Read+0x4a>
 8001e48:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <DHT11_Read+0xec>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	1c9a      	adds	r2, r3, #2
 8001e4e:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <DHT11_Read+0xf0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d8eb      	bhi.n	8001e2e <DHT11_Read+0x22>
				}
				microDelay (40);   // wait for 40 us
 8001e56:	2028      	movs	r0, #40	; 0x28
 8001e58:	f7ff ff4a 	bl	8001cf0 <microDelay>
				if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001e5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e60:	4827      	ldr	r0, [pc, #156]	; (8001f00 <DHT11_Read+0xf4>)
 8001e62:	f002 fba5 	bl	80045b0 <HAL_GPIO_ReadPin>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10e      	bne.n	8001e8a <DHT11_Read+0x7e>
				  b&= ~(1<<(7-a));
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2201      	movs	r2, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	b25b      	sxtb	r3, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	b25a      	sxtb	r2, r3
 8001e7e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e82:	4013      	ands	r3, r2
 8001e84:	b25b      	sxtb	r3, r3
 8001e86:	71bb      	strb	r3, [r7, #6]
 8001e88:	e00b      	b.n	8001ea2 <DHT11_Read+0x96>
				else
				  b|= (1<<(7-a));
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	f1c3 0307 	rsb	r3, r3, #7
 8001e90:	2201      	movs	r2, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	b25a      	sxtb	r2, r3
 8001e98:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	b25b      	sxtb	r3, r3
 8001ea0:	71bb      	strb	r3, [r7, #6]
				pMillis = HAL_GetTick();
 8001ea2:	f002 f8c5 	bl	8004030 <HAL_GetTick>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4a13      	ldr	r2, [pc, #76]	; (8001ef8 <DHT11_Read+0xec>)
 8001eaa:	6013      	str	r3, [r2, #0]
				cMillis = HAL_GetTick();
 8001eac:	f002 f8c0 	bl	8004030 <HAL_GetTick>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	4a12      	ldr	r2, [pc, #72]	; (8001efc <DHT11_Read+0xf0>)
 8001eb4:	6013      	str	r3, [r2, #0]
				while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001eb6:	e004      	b.n	8001ec2 <DHT11_Read+0xb6>
				{  // wait for the pin to go low
				  cMillis = HAL_GetTick();
 8001eb8:	f002 f8ba 	bl	8004030 <HAL_GetTick>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <DHT11_Read+0xf0>)
 8001ec0:	6013      	str	r3, [r2, #0]
				while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001ec2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ec6:	480e      	ldr	r0, [pc, #56]	; (8001f00 <DHT11_Read+0xf4>)
 8001ec8:	f002 fb72 	bl	80045b0 <HAL_GPIO_ReadPin>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d006      	beq.n	8001ee0 <DHT11_Read+0xd4>
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <DHT11_Read+0xec>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	1c9a      	adds	r2, r3, #2
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <DHT11_Read+0xf0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d8eb      	bhi.n	8001eb8 <DHT11_Read+0xac>
			  for (a=0;a<8;a++)
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	71fb      	strb	r3, [r7, #7]
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	2b07      	cmp	r3, #7
 8001eea:	d995      	bls.n	8001e18 <DHT11_Read+0xc>
				}
			  }
			  return b;
 8001eec:	79bb      	ldrb	r3, [r7, #6]
			  }
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000268 	.word	0x20000268
 8001efc:	2000026c 	.word	0x2000026c
 8001f00:	40010c00 	.word	0x40010c00

08001f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f0a:	f002 f839 	bl	8003f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f0e:	f001 fc33 	bl	8003778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f12:	f001 fde3 	bl	8003adc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f16:	f001 fc75 	bl	8003804 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001f1a:	f001 fcf1 	bl	8003900 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001f1e:	f001 fc9f 	bl	8003860 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001f22:	f001 fd39 	bl	8003998 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001f26:	f001 fd8b 	bl	8003a40 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  lcd_i2c_init(&p_lcd, &hi2c1, 20, 4, 0x27<<1);
 8001f2a:	234e      	movs	r3, #78	; 0x4e
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2304      	movs	r3, #4
 8001f30:	2214      	movs	r2, #20
 8001f32:	499d      	ldr	r1, [pc, #628]	; (80021a8 <main+0x2a4>)
 8001f34:	489d      	ldr	r0, [pc, #628]	; (80021ac <main+0x2a8>)
 8001f36:	f7ff f91b 	bl	8001170 <lcd_i2c_init>
  HAL_TIM_Base_Start(&htim2);
 8001f3a:	489d      	ldr	r0, [pc, #628]	; (80021b0 <main+0x2ac>)
 8001f3c:	f004 fad4 	bl	80064e8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 8001f40:	489c      	ldr	r0, [pc, #624]	; (80021b4 <main+0x2b0>)
 8001f42:	f004 fad1 	bl	80064e8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8001f46:	489c      	ldr	r0, [pc, #624]	; (80021b8 <main+0x2b4>)
 8001f48:	f004 face 	bl	80064e8 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001f4c:	4b99      	ldr	r3, [pc, #612]	; (80021b4 <main+0x2b0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2200      	movs	r2, #0
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24

  for (int i = 0; i < 255; i++)
 8001f54:	2300      	movs	r3, #0
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	e010      	b.n	8001f7c <main+0x78>
  {
	   if (HAL_I2C_IsDeviceReady(&hi2c1, i, 1, 100) == HAL_OK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	b299      	uxth	r1, r3
 8001f5e:	2364      	movs	r3, #100	; 0x64
 8001f60:	2201      	movs	r2, #1
 8001f62:	4891      	ldr	r0, [pc, #580]	; (80021a8 <main+0x2a4>)
 8001f64:	f003 f910 	bl	8005188 <HAL_I2C_IsDeviceReady>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d103      	bne.n	8001f76 <main+0x72>
	   {
		   device = i;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4b92      	ldr	r3, [pc, #584]	; (80021bc <main+0x2b8>)
 8001f74:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 255; i++)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2bfe      	cmp	r3, #254	; 0xfe
 8001f80:	ddeb      	ble.n	8001f5a <main+0x56>
	   }
  }

  DS3231_Init(&DS3231, &hi2c1);
 8001f82:	4989      	ldr	r1, [pc, #548]	; (80021a8 <main+0x2a4>)
 8001f84:	488e      	ldr	r0, [pc, #568]	; (80021c0 <main+0x2bc>)
 8001f86:	f7ff f815 	bl	8000fb4 <DS3231_Init>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001f8a:	213c      	movs	r1, #60	; 0x3c
 8001f8c:	488d      	ldr	r0, [pc, #564]	; (80021c4 <main+0x2c0>)
 8001f8e:	f004 fbbd 	bl	800670c <HAL_TIM_Encoder_Start_IT>
  uint32_t timer1 = HAL_GetTick();
 8001f92:	f002 f84d 	bl	8004030 <HAL_GetTick>
 8001f96:	6038      	str	r0, [r7, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  DS3231_GetTime(&DS3231);
 8001f98:	4889      	ldr	r0, [pc, #548]	; (80021c0 <main+0x2bc>)
 8001f9a:	f7ff f844 	bl	8001026 <DS3231_GetTime>
	  DS3231_GetDate(&DS3231);
 8001f9e:	4888      	ldr	r0, [pc, #544]	; (80021c0 <main+0x2bc>)
 8001fa0:	f7ff f89b 	bl	80010da <DS3231_GetDate>


	  if(DHT11_Start())
 8001fa4:	f7ff febc 	bl	8001d20 <DHT11_Start>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 80a9 	beq.w	8002102 <main+0x1fe>
	  				  {
	  					RHI = DHT11_Read(); // Relative humidity integral
 8001fb0:	f7ff ff2c 	bl	8001e0c <DHT11_Read>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b83      	ldr	r3, [pc, #524]	; (80021c8 <main+0x2c4>)
 8001fba:	701a      	strb	r2, [r3, #0]
	  					RHD = DHT11_Read(); // Relative humidity decimal
 8001fbc:	f7ff ff26 	bl	8001e0c <DHT11_Read>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b81      	ldr	r3, [pc, #516]	; (80021cc <main+0x2c8>)
 8001fc6:	701a      	strb	r2, [r3, #0]
	  					TCI = DHT11_Read(); // Celsius integral
 8001fc8:	f7ff ff20 	bl	8001e0c <DHT11_Read>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4b7f      	ldr	r3, [pc, #508]	; (80021d0 <main+0x2cc>)
 8001fd2:	701a      	strb	r2, [r3, #0]
	  					TCD = DHT11_Read(); // Celsius decimal
 8001fd4:	f7ff ff1a 	bl	8001e0c <DHT11_Read>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b7d      	ldr	r3, [pc, #500]	; (80021d4 <main+0x2d0>)
 8001fde:	701a      	strb	r2, [r3, #0]
	  					SUM = DHT11_Read(); // Check sum
 8001fe0:	f7ff ff14 	bl	8001e0c <DHT11_Read>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4b7b      	ldr	r3, [pc, #492]	; (80021d8 <main+0x2d4>)
 8001fea:	701a      	strb	r2, [r3, #0]
	  					if (RHI + RHD + TCI + TCD == SUM)
 8001fec:	4b76      	ldr	r3, [pc, #472]	; (80021c8 <main+0x2c4>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b76      	ldr	r3, [pc, #472]	; (80021cc <main+0x2c8>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	4a75      	ldr	r2, [pc, #468]	; (80021d0 <main+0x2cc>)
 8001ffa:	7812      	ldrb	r2, [r2, #0]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4a75      	ldr	r2, [pc, #468]	; (80021d4 <main+0x2d0>)
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	4413      	add	r3, r2
 8002004:	4a74      	ldr	r2, [pc, #464]	; (80021d8 <main+0x2d4>)
 8002006:	7812      	ldrb	r2, [r2, #0]
 8002008:	4293      	cmp	r3, r2
 800200a:	d17a      	bne.n	8002102 <main+0x1fe>
	  					{
	  					  // Can use RHI and TCI for any purposes if whole number only needed
	  					  tCelsius = (float)TCI + (float)(TCD/10.0);
 800200c:	4b70      	ldr	r3, [pc, #448]	; (80021d0 <main+0x2cc>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fd6f 	bl	8000af4 <__aeabi_ui2f>
 8002016:	4604      	mov	r4, r0
 8002018:	4b6e      	ldr	r3, [pc, #440]	; (80021d4 <main+0x2d0>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe f9e7 	bl	80003f0 <__aeabi_i2d>
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	4b6d      	ldr	r3, [pc, #436]	; (80021dc <main+0x2d8>)
 8002028:	f7fe fb76 	bl	8000718 <__aeabi_ddiv>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	f7fe fc58 	bl	80008e8 <__aeabi_d2f>
 8002038:	4603      	mov	r3, r0
 800203a:	4619      	mov	r1, r3
 800203c:	4620      	mov	r0, r4
 800203e:	f7fe fca9 	bl	8000994 <__addsf3>
 8002042:	4603      	mov	r3, r0
 8002044:	461a      	mov	r2, r3
 8002046:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <main+0x2dc>)
 8002048:	601a      	str	r2, [r3, #0]
	  					  tFahrenheit = tCelsius * 9/5 + 32;
 800204a:	4b65      	ldr	r3, [pc, #404]	; (80021e0 <main+0x2dc>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4965      	ldr	r1, [pc, #404]	; (80021e4 <main+0x2e0>)
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fda7 	bl	8000ba4 <__aeabi_fmul>
 8002056:	4603      	mov	r3, r0
 8002058:	4963      	ldr	r1, [pc, #396]	; (80021e8 <main+0x2e4>)
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fe56 	bl	8000d0c <__aeabi_fdiv>
 8002060:	4603      	mov	r3, r0
 8002062:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fc94 	bl	8000994 <__addsf3>
 800206c:	4603      	mov	r3, r0
 800206e:	461a      	mov	r2, r3
 8002070:	4b5e      	ldr	r3, [pc, #376]	; (80021ec <main+0x2e8>)
 8002072:	601a      	str	r2, [r3, #0]
	  					  RH = (float)RHI + (float)(RHD/10.0);
 8002074:	4b54      	ldr	r3, [pc, #336]	; (80021c8 <main+0x2c4>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fd3b 	bl	8000af4 <__aeabi_ui2f>
 800207e:	4604      	mov	r4, r0
 8002080:	4b52      	ldr	r3, [pc, #328]	; (80021cc <main+0x2c8>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe f9b3 	bl	80003f0 <__aeabi_i2d>
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	4b53      	ldr	r3, [pc, #332]	; (80021dc <main+0x2d8>)
 8002090:	f7fe fb42 	bl	8000718 <__aeabi_ddiv>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	f7fe fc24 	bl	80008e8 <__aeabi_d2f>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4619      	mov	r1, r3
 80020a4:	4620      	mov	r0, r4
 80020a6:	f7fe fc75 	bl	8000994 <__addsf3>
 80020aa:	4603      	mov	r3, r0
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b50      	ldr	r3, [pc, #320]	; (80021f0 <main+0x2ec>)
 80020b0:	601a      	str	r2, [r3, #0]
	  					  // Can use tCelsius, tFahrenheit and RH for any purposes
	  					  TFI = tFahrenheit;  // Fahrenheit integral
 80020b2:	4b4e      	ldr	r3, [pc, #312]	; (80021ec <main+0x2e8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fec4 	bl	8000e44 <__aeabi_f2uiz>
 80020bc:	4603      	mov	r3, r0
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	4b4c      	ldr	r3, [pc, #304]	; (80021f4 <main+0x2f0>)
 80020c2:	701a      	strb	r2, [r3, #0]
	  					  TFD = tFahrenheit*10-TFI*10; // Fahrenheit decimal
 80020c4:	4b49      	ldr	r3, [pc, #292]	; (80021ec <main+0x2e8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	494b      	ldr	r1, [pc, #300]	; (80021f8 <main+0x2f4>)
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fd6a 	bl	8000ba4 <__aeabi_fmul>
 80020d0:	4603      	mov	r3, r0
 80020d2:	461c      	mov	r4, r3
 80020d4:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <main+0x2f0>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fd0a 	bl	8000afc <__aeabi_i2f>
 80020e8:	4603      	mov	r3, r0
 80020ea:	4619      	mov	r1, r3
 80020ec:	4620      	mov	r0, r4
 80020ee:	f7fe fc4f 	bl	8000990 <__aeabi_fsub>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fea5 	bl	8000e44 <__aeabi_f2uiz>
 80020fa:	4603      	mov	r3, r0
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <main+0x2f8>)
 8002100:	701a      	strb	r2, [r3, #0]
	  					}
	  				  }


	  if (    alarm == ALARM
 8002102:	4b3f      	ldr	r3, [pc, #252]	; (8002200 <main+0x2fc>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d130      	bne.n	800216c <main+0x268>
			  && DS3231.Hour == savealarmhour
 800210a:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <main+0x2bc>)
 800210c:	799b      	ldrb	r3, [r3, #6]
 800210e:	b29a      	uxth	r2, r3
 8002110:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <main+0x300>)
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d129      	bne.n	800216c <main+0x268>
			  && DS3231.Min == savealarmmin
 8002118:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <main+0x2bc>)
 800211a:	795b      	ldrb	r3, [r3, #5]
 800211c:	b29a      	uxth	r2, r3
 800211e:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <main+0x304>)
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d122      	bne.n	800216c <main+0x268>
			  && DS3231.Day == alarmday
 8002126:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <main+0x2bc>)
 8002128:	7a1b      	ldrb	r3, [r3, #8]
 800212a:	461a      	mov	r2, r3
 800212c:	4b37      	ldr	r3, [pc, #220]	; (800220c <main+0x308>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d11b      	bne.n	800216c <main+0x268>
			  && DS3231.Date == alarmdate
 8002134:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <main+0x2bc>)
 8002136:	79db      	ldrb	r3, [r3, #7]
 8002138:	461a      	mov	r2, r3
 800213a:	4b35      	ldr	r3, [pc, #212]	; (8002210 <main+0x30c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d114      	bne.n	800216c <main+0x268>
			  && DS3231.Month == alarmmonth
 8002142:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <main+0x2bc>)
 8002144:	7a5b      	ldrb	r3, [r3, #9]
 8002146:	461a      	mov	r2, r3
 8002148:	4b32      	ldr	r3, [pc, #200]	; (8002214 <main+0x310>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d10d      	bne.n	800216c <main+0x268>
			  && DS3231.Year == alarmyear)
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <main+0x2bc>)
 8002152:	7a9b      	ldrb	r3, [r3, #10]
 8002154:	461a      	mov	r2, r3
 8002156:	4b30      	ldr	r3, [pc, #192]	; (8002218 <main+0x314>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d106      	bne.n	800216c <main+0x268>
		   {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);}
 800215e:	2201      	movs	r2, #1
 8002160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002164:	482d      	ldr	r0, [pc, #180]	; (800221c <main+0x318>)
 8002166:	f002 fa3a 	bl	80045de <HAL_GPIO_WritePin>
 800216a:	e005      	b.n	8002178 <main+0x274>
	  else {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);}
 800216c:	2200      	movs	r2, #0
 800216e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002172:	482a      	ldr	r0, [pc, #168]	; (800221c <main+0x318>)
 8002174:	f002 fa33 	bl	80045de <HAL_GPIO_WritePin>


	  switch (state)
 8002178:	4b29      	ldr	r3, [pc, #164]	; (8002220 <main+0x31c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b07      	cmp	r3, #7
 800217e:	f200 8635 	bhi.w	8002dec <main+0xee8>
 8002182:	a201      	add	r2, pc, #4	; (adr r2, 8002188 <main+0x284>)
 8002184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002188:	08002225 	.word	0x08002225
 800218c:	080023c7 	.word	0x080023c7
 8002190:	080024d9 	.word	0x080024d9
 8002194:	08002595 	.word	0x08002595
 8002198:	0800264f 	.word	0x0800264f
 800219c:	08002791 	.word	0x08002791
 80021a0:	0800289b 	.word	0x0800289b
 80021a4:	080029d9 	.word	0x080029d9
 80021a8:	20000098 	.word	0x20000098
 80021ac:	2000020c 	.word	0x2000020c
 80021b0:	20000134 	.word	0x20000134
 80021b4:	200000ec 	.word	0x200000ec
 80021b8:	200001c4 	.word	0x200001c4
 80021bc:	20000078 	.word	0x20000078
 80021c0:	2000007c 	.word	0x2000007c
 80021c4:	2000017c 	.word	0x2000017c
 80021c8:	20000260 	.word	0x20000260
 80021cc:	20000261 	.word	0x20000261
 80021d0:	20000262 	.word	0x20000262
 80021d4:	20000263 	.word	0x20000263
 80021d8:	20000264 	.word	0x20000264
 80021dc:	40240000 	.word	0x40240000
 80021e0:	20000270 	.word	0x20000270
 80021e4:	41100000 	.word	0x41100000
 80021e8:	40a00000 	.word	0x40a00000
 80021ec:	20000274 	.word	0x20000274
 80021f0:	20000278 	.word	0x20000278
 80021f4:	2000027c 	.word	0x2000027c
 80021f8:	41200000 	.word	0x41200000
 80021fc:	2000027d 	.word	0x2000027d
 8002200:	20000218 	.word	0x20000218
 8002204:	2000022e 	.word	0x2000022e
 8002208:	2000022c 	.word	0x2000022c
 800220c:	20000230 	.word	0x20000230
 8002210:	20000234 	.word	0x20000234
 8002214:	20000238 	.word	0x20000238
 8002218:	2000023c 	.word	0x2000023c
 800221c:	40011000 	.word	0x40011000
 8002220:	20000219 	.word	0x20000219
	  {
	  	 case DATE:
	  		DS3231_GetTime(&DS3231);
 8002224:	4897      	ldr	r0, [pc, #604]	; (8002484 <main+0x580>)
 8002226:	f7fe fefe 	bl	8001026 <DS3231_GetTime>
		    DS3231_GetDate(&DS3231);
 800222a:	4896      	ldr	r0, [pc, #600]	; (8002484 <main+0x580>)
 800222c:	f7fe ff55 	bl	80010da <DS3231_GetDate>
		    HAL_Delay(100);
 8002230:	2064      	movs	r0, #100	; 0x64
 8002232:	f001 ff07 	bl	8004044 <HAL_Delay>
		    lcd_clear(&p_lcd);
 8002236:	4894      	ldr	r0, [pc, #592]	; (8002488 <main+0x584>)
 8002238:	f7ff f8b3 	bl	80013a2 <lcd_clear>
					if (DS3231.Day == 1)
 800223c:	4b91      	ldr	r3, [pc, #580]	; (8002484 <main+0x580>)
 800223e:	7a1b      	ldrb	r3, [r3, #8]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d117      	bne.n	8002274 <main+0x370>
					{
						lcd_set_cursor(&p_lcd, 0, 1);
 8002244:	2201      	movs	r2, #1
 8002246:	2100      	movs	r1, #0
 8002248:	488f      	ldr	r0, [pc, #572]	; (8002488 <main+0x584>)
 800224a:	f7ff f869 	bl	8001320 <lcd_set_cursor>
						sprintf(time, "CN %d-%d-20%d" , DS3231.Date, DS3231.Month, DS3231.Year);
 800224e:	4b8d      	ldr	r3, [pc, #564]	; (8002484 <main+0x580>)
 8002250:	79db      	ldrb	r3, [r3, #7]
 8002252:	461a      	mov	r2, r3
 8002254:	4b8b      	ldr	r3, [pc, #556]	; (8002484 <main+0x580>)
 8002256:	7a5b      	ldrb	r3, [r3, #9]
 8002258:	4619      	mov	r1, r3
 800225a:	4b8a      	ldr	r3, [pc, #552]	; (8002484 <main+0x580>)
 800225c:	7a9b      	ldrb	r3, [r3, #10]
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	460b      	mov	r3, r1
 8002262:	498a      	ldr	r1, [pc, #552]	; (800248c <main+0x588>)
 8002264:	488a      	ldr	r0, [pc, #552]	; (8002490 <main+0x58c>)
 8002266:	f004 fe7f 	bl	8006f68 <siprintf>
						lcd_send_string(&p_lcd, time);
 800226a:	4989      	ldr	r1, [pc, #548]	; (8002490 <main+0x58c>)
 800226c:	4886      	ldr	r0, [pc, #536]	; (8002488 <main+0x584>)
 800226e:	f7ff f881 	bl	8001374 <lcd_send_string>
 8002272:	e01b      	b.n	80022ac <main+0x3a8>
					}
					else
					{
						lcd_set_cursor(&p_lcd, 0, 1);
 8002274:	2201      	movs	r2, #1
 8002276:	2100      	movs	r1, #0
 8002278:	4883      	ldr	r0, [pc, #524]	; (8002488 <main+0x584>)
 800227a:	f7ff f851 	bl	8001320 <lcd_set_cursor>
						sprintf(time, "Thu %d %d-%d-20%d", DS3231.Day, DS3231.Date, DS3231.Month, DS3231.Year);
 800227e:	4b81      	ldr	r3, [pc, #516]	; (8002484 <main+0x580>)
 8002280:	7a1b      	ldrb	r3, [r3, #8]
 8002282:	4619      	mov	r1, r3
 8002284:	4b7f      	ldr	r3, [pc, #508]	; (8002484 <main+0x580>)
 8002286:	79db      	ldrb	r3, [r3, #7]
 8002288:	4618      	mov	r0, r3
 800228a:	4b7e      	ldr	r3, [pc, #504]	; (8002484 <main+0x580>)
 800228c:	7a5b      	ldrb	r3, [r3, #9]
 800228e:	461a      	mov	r2, r3
 8002290:	4b7c      	ldr	r3, [pc, #496]	; (8002484 <main+0x580>)
 8002292:	7a9b      	ldrb	r3, [r3, #10]
 8002294:	9301      	str	r3, [sp, #4]
 8002296:	9200      	str	r2, [sp, #0]
 8002298:	4603      	mov	r3, r0
 800229a:	460a      	mov	r2, r1
 800229c:	497d      	ldr	r1, [pc, #500]	; (8002494 <main+0x590>)
 800229e:	487c      	ldr	r0, [pc, #496]	; (8002490 <main+0x58c>)
 80022a0:	f004 fe62 	bl	8006f68 <siprintf>
						lcd_send_string(&p_lcd, time);
 80022a4:	497a      	ldr	r1, [pc, #488]	; (8002490 <main+0x58c>)
 80022a6:	4878      	ldr	r0, [pc, #480]	; (8002488 <main+0x584>)
 80022a8:	f7ff f864 	bl	8001374 <lcd_send_string>
					}

                    if (HAL_GetTick()- timer1 >= 5000)
 80022ac:	f001 fec0 	bl	8004030 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3287 	movw	r2, #4999	; 0x1387
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d95e      	bls.n	800237c <main+0x478>
                    	{
                    	  lcd_clear(&p_lcd);
 80022be:	4872      	ldr	r0, [pc, #456]	; (8002488 <main+0x584>)
 80022c0:	f7ff f86f 	bl	80013a2 <lcd_clear>
                    	  lcd_set_cursor(&p_lcd, 0, 1);
 80022c4:	2201      	movs	r2, #1
 80022c6:	2100      	movs	r1, #0
 80022c8:	486f      	ldr	r0, [pc, #444]	; (8002488 <main+0x584>)
 80022ca:	f7ff f829 	bl	8001320 <lcd_set_cursor>
                    	  sprintf(time, "%02d:%02d", savealarmhour, savealarmmin);
 80022ce:	4b72      	ldr	r3, [pc, #456]	; (8002498 <main+0x594>)
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b71      	ldr	r3, [pc, #452]	; (800249c <main+0x598>)
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	4971      	ldr	r1, [pc, #452]	; (80024a0 <main+0x59c>)
 80022da:	486d      	ldr	r0, [pc, #436]	; (8002490 <main+0x58c>)
 80022dc:	f004 fe44 	bl	8006f68 <siprintf>
                    	  lcd_send_string(&p_lcd, time);
 80022e0:	496b      	ldr	r1, [pc, #428]	; (8002490 <main+0x58c>)
 80022e2:	4869      	ldr	r0, [pc, #420]	; (8002488 <main+0x584>)
 80022e4:	f7ff f846 	bl	8001374 <lcd_send_string>

                    	  if (alarmday == 1)
 80022e8:	4b6e      	ldr	r3, [pc, #440]	; (80024a4 <main+0x5a0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d115      	bne.n	800231c <main+0x418>
						{
							lcd_set_cursor(&p_lcd, 6, 1);
 80022f0:	2201      	movs	r2, #1
 80022f2:	2106      	movs	r1, #6
 80022f4:	4864      	ldr	r0, [pc, #400]	; (8002488 <main+0x584>)
 80022f6:	f7ff f813 	bl	8001320 <lcd_set_cursor>
							sprintf(time, "CN/%d/%d/%d" , alarmdate, alarmmonth, alarmyear);
 80022fa:	4b6b      	ldr	r3, [pc, #428]	; (80024a8 <main+0x5a4>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4b6b      	ldr	r3, [pc, #428]	; (80024ac <main+0x5a8>)
 8002300:	6819      	ldr	r1, [r3, #0]
 8002302:	4b6b      	ldr	r3, [pc, #428]	; (80024b0 <main+0x5ac>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	460b      	mov	r3, r1
 800230a:	496a      	ldr	r1, [pc, #424]	; (80024b4 <main+0x5b0>)
 800230c:	4860      	ldr	r0, [pc, #384]	; (8002490 <main+0x58c>)
 800230e:	f004 fe2b 	bl	8006f68 <siprintf>
							lcd_send_string(&p_lcd, time);
 8002312:	495f      	ldr	r1, [pc, #380]	; (8002490 <main+0x58c>)
 8002314:	485c      	ldr	r0, [pc, #368]	; (8002488 <main+0x584>)
 8002316:	f7ff f82d 	bl	8001374 <lcd_send_string>
 800231a:	e018      	b.n	800234e <main+0x44a>
						}
						else
						{
							lcd_set_cursor(&p_lcd, 6, 1);
 800231c:	2201      	movs	r2, #1
 800231e:	2106      	movs	r1, #6
 8002320:	4859      	ldr	r0, [pc, #356]	; (8002488 <main+0x584>)
 8002322:	f7fe fffd 	bl	8001320 <lcd_set_cursor>
							sprintf(time, "%d/%d/%d/%d", alarmday, alarmdate, alarmmonth, alarmyear);
 8002326:	4b5f      	ldr	r3, [pc, #380]	; (80024a4 <main+0x5a0>)
 8002328:	6819      	ldr	r1, [r3, #0]
 800232a:	4b5f      	ldr	r3, [pc, #380]	; (80024a8 <main+0x5a4>)
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	4b5f      	ldr	r3, [pc, #380]	; (80024ac <main+0x5a8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a5f      	ldr	r2, [pc, #380]	; (80024b0 <main+0x5ac>)
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	9201      	str	r2, [sp, #4]
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	4603      	mov	r3, r0
 800233c:	460a      	mov	r2, r1
 800233e:	495e      	ldr	r1, [pc, #376]	; (80024b8 <main+0x5b4>)
 8002340:	4853      	ldr	r0, [pc, #332]	; (8002490 <main+0x58c>)
 8002342:	f004 fe11 	bl	8006f68 <siprintf>
							lcd_send_string(&p_lcd, time);
 8002346:	4952      	ldr	r1, [pc, #328]	; (8002490 <main+0x58c>)
 8002348:	484f      	ldr	r0, [pc, #316]	; (8002488 <main+0x584>)
 800234a:	f7ff f813 	bl	8001374 <lcd_send_string>
						}
                    	  lcd_set_cursor(&p_lcd, 4, 0);
 800234e:	2200      	movs	r2, #0
 8002350:	2104      	movs	r1, #4
 8002352:	484d      	ldr	r0, [pc, #308]	; (8002488 <main+0x584>)
 8002354:	f7fe ffe4 	bl	8001320 <lcd_set_cursor>
						  sprintf(time, "%02d:%02d:%02d ", DS3231.Hour, DS3231.Min, DS3231.Sec);
 8002358:	4b4a      	ldr	r3, [pc, #296]	; (8002484 <main+0x580>)
 800235a:	799b      	ldrb	r3, [r3, #6]
 800235c:	461a      	mov	r2, r3
 800235e:	4b49      	ldr	r3, [pc, #292]	; (8002484 <main+0x580>)
 8002360:	795b      	ldrb	r3, [r3, #5]
 8002362:	4619      	mov	r1, r3
 8002364:	4b47      	ldr	r3, [pc, #284]	; (8002484 <main+0x580>)
 8002366:	791b      	ldrb	r3, [r3, #4]
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	460b      	mov	r3, r1
 800236c:	4953      	ldr	r1, [pc, #332]	; (80024bc <main+0x5b8>)
 800236e:	4848      	ldr	r0, [pc, #288]	; (8002490 <main+0x58c>)
 8002370:	f004 fdfa 	bl	8006f68 <siprintf>
						  lcd_send_string(&p_lcd, time);
 8002374:	4946      	ldr	r1, [pc, #280]	; (8002490 <main+0x58c>)
 8002376:	4844      	ldr	r0, [pc, #272]	; (8002488 <main+0x584>)
 8002378:	f7fe fffc 	bl	8001374 <lcd_send_string>
					    }
					  if (HAL_GetTick()- timer1 >= 8500)
 800237c:	f001 fe58 	bl	8004030 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	f242 1233 	movw	r2, #8499	; 0x2133
 800238a:	4293      	cmp	r3, r2
 800238c:	d902      	bls.n	8002394 <main+0x490>
					  {
					  timer1 = HAL_GetTick();
 800238e:	f001 fe4f 	bl	8004030 <HAL_GetTick>
 8002392:	6038      	str	r0, [r7, #0]
					  }


		    lcd_set_cursor(&p_lcd, 4, 0);
 8002394:	2200      	movs	r2, #0
 8002396:	2104      	movs	r1, #4
 8002398:	483b      	ldr	r0, [pc, #236]	; (8002488 <main+0x584>)
 800239a:	f7fe ffc1 	bl	8001320 <lcd_set_cursor>
			sprintf(time, "%02d:%02d:%02d ", DS3231.Hour, DS3231.Min, DS3231.Sec);
 800239e:	4b39      	ldr	r3, [pc, #228]	; (8002484 <main+0x580>)
 80023a0:	799b      	ldrb	r3, [r3, #6]
 80023a2:	461a      	mov	r2, r3
 80023a4:	4b37      	ldr	r3, [pc, #220]	; (8002484 <main+0x580>)
 80023a6:	795b      	ldrb	r3, [r3, #5]
 80023a8:	4619      	mov	r1, r3
 80023aa:	4b36      	ldr	r3, [pc, #216]	; (8002484 <main+0x580>)
 80023ac:	791b      	ldrb	r3, [r3, #4]
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	460b      	mov	r3, r1
 80023b2:	4942      	ldr	r1, [pc, #264]	; (80024bc <main+0x5b8>)
 80023b4:	4836      	ldr	r0, [pc, #216]	; (8002490 <main+0x58c>)
 80023b6:	f004 fdd7 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 80023ba:	4935      	ldr	r1, [pc, #212]	; (8002490 <main+0x58c>)
 80023bc:	4832      	ldr	r0, [pc, #200]	; (8002488 <main+0x584>)
 80023be:	f7fe ffd9 	bl	8001374 <lcd_send_string>
	  		break;
 80023c2:	f000 bd14 	b.w	8002dee <main+0xeea>

	  	 case SET_HOUR:
	  		if (trangthai < counter)
 80023c6:	4b3e      	ldr	r3, [pc, #248]	; (80024c0 <main+0x5bc>)
 80023c8:	781a      	ldrb	r2, [r3, #0]
 80023ca:	4b3e      	ldr	r3, [pc, #248]	; (80024c4 <main+0x5c0>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d215      	bcs.n	80023fe <main+0x4fa>
					{
					  trangthai = counter;
 80023d2:	4b3c      	ldr	r3, [pc, #240]	; (80024c4 <main+0x5c0>)
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	4b3a      	ldr	r3, [pc, #232]	; (80024c0 <main+0x5bc>)
 80023d8:	701a      	strb	r2, [r3, #0]
					  savehour++;
 80023da:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <main+0x5c4>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	3301      	adds	r3, #1
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4b39      	ldr	r3, [pc, #228]	; (80024c8 <main+0x5c4>)
 80023e4:	701a      	strb	r2, [r3, #0]
							if (savehour > 23)
 80023e6:	4b38      	ldr	r3, [pc, #224]	; (80024c8 <main+0x5c4>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b17      	cmp	r3, #23
 80023ec:	d902      	bls.n	80023f4 <main+0x4f0>
								{
								savehour = 0;
 80023ee:	4b36      	ldr	r3, [pc, #216]	; (80024c8 <main+0x5c4>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
								}
						trangthai = counter;
 80023f4:	4b33      	ldr	r3, [pc, #204]	; (80024c4 <main+0x5c0>)
 80023f6:	781a      	ldrb	r2, [r3, #0]
 80023f8:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <main+0x5bc>)
 80023fa:	701a      	strb	r2, [r3, #0]
 80023fc:	e013      	b.n	8002426 <main+0x522>
					}
			  else if (trangthai > counter)
 80023fe:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <main+0x5bc>)
 8002400:	781a      	ldrb	r2, [r3, #0]
 8002402:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <main+0x5c0>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d90d      	bls.n	8002426 <main+0x522>
					{
						trangthai = counter;
 800240a:	4b2e      	ldr	r3, [pc, #184]	; (80024c4 <main+0x5c0>)
 800240c:	781a      	ldrb	r2, [r3, #0]
 800240e:	4b2c      	ldr	r3, [pc, #176]	; (80024c0 <main+0x5bc>)
 8002410:	701a      	strb	r2, [r3, #0]
						savehour--;
 8002412:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <main+0x5c4>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	3b01      	subs	r3, #1
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <main+0x5c4>)
 800241c:	701a      	strb	r2, [r3, #0]
						if (savehour < 0)
							{
							savehour = 23;
							}
						trangthai = counter;
 800241e:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <main+0x5c0>)
 8002420:	781a      	ldrb	r2, [r3, #0]
 8002422:	4b27      	ldr	r3, [pc, #156]	; (80024c0 <main+0x5bc>)
 8002424:	701a      	strb	r2, [r3, #0]
					}
			  if (trangthai = counter)
 8002426:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <main+0x5c0>)
 8002428:	781a      	ldrb	r2, [r3, #0]
 800242a:	4b25      	ldr	r3, [pc, #148]	; (80024c0 <main+0x5bc>)
 800242c:	701a      	strb	r2, [r3, #0]
 800242e:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <main+0x5bc>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d006      	beq.n	8002444 <main+0x540>
					{
					  if (savehour > 23)
 8002436:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <main+0x5c4>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b17      	cmp	r3, #23
 800243c:	d902      	bls.n	8002444 <main+0x540>
						{
						  savehour = 23;
 800243e:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <main+0x5c4>)
 8002440:	2217      	movs	r2, #23
 8002442:	701a      	strb	r2, [r3, #0]
						}
					}
	  		lcd_clear(&p_lcd);
 8002444:	4810      	ldr	r0, [pc, #64]	; (8002488 <main+0x584>)
 8002446:	f7fe ffac 	bl	80013a2 <lcd_clear>
	  		lcd_set_cursor(&p_lcd, 4, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	2104      	movs	r1, #4
 800244e:	480e      	ldr	r0, [pc, #56]	; (8002488 <main+0x584>)
 8002450:	f7fe ff66 	bl	8001320 <lcd_set_cursor>
	  		sprintf(time, " +%02d:%02d:%02d", savehour, savemin, savesec);
 8002454:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <main+0x5c4>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <main+0x5c8>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	4619      	mov	r1, r3
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <main+0x5cc>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	460b      	mov	r3, r1
 8002468:	491a      	ldr	r1, [pc, #104]	; (80024d4 <main+0x5d0>)
 800246a:	4809      	ldr	r0, [pc, #36]	; (8002490 <main+0x58c>)
 800246c:	f004 fd7c 	bl	8006f68 <siprintf>
	  		lcd_send_string(&p_lcd, time);
 8002470:	4907      	ldr	r1, [pc, #28]	; (8002490 <main+0x58c>)
 8002472:	4805      	ldr	r0, [pc, #20]	; (8002488 <main+0x584>)
 8002474:	f7fe ff7e 	bl	8001374 <lcd_send_string>
	  		HAL_Delay(150);
 8002478:	2096      	movs	r0, #150	; 0x96
 800247a:	f001 fde3 	bl	8004044 <HAL_Delay>
	  	 	break;
 800247e:	f000 bcb6 	b.w	8002dee <main+0xeea>
 8002482:	bf00      	nop
 8002484:	2000007c 	.word	0x2000007c
 8002488:	2000020c 	.word	0x2000020c
 800248c:	080078e4 	.word	0x080078e4
 8002490:	2000021c 	.word	0x2000021c
 8002494:	080078f4 	.word	0x080078f4
 8002498:	2000022e 	.word	0x2000022e
 800249c:	2000022c 	.word	0x2000022c
 80024a0:	08007908 	.word	0x08007908
 80024a4:	20000230 	.word	0x20000230
 80024a8:	20000234 	.word	0x20000234
 80024ac:	20000238 	.word	0x20000238
 80024b0:	2000023c 	.word	0x2000023c
 80024b4:	08007914 	.word	0x08007914
 80024b8:	08007920 	.word	0x08007920
 80024bc:	0800792c 	.word	0x0800792c
 80024c0:	2000024d 	.word	0x2000024d
 80024c4:	2000024c 	.word	0x2000024c
 80024c8:	20000240 	.word	0x20000240
 80024cc:	20000241 	.word	0x20000241
 80024d0:	20000242 	.word	0x20000242
 80024d4:	0800793c 	.word	0x0800793c

	  	 case SET_MIN:
	  		if (trangthai < counter)
 80024d8:	4b8f      	ldr	r3, [pc, #572]	; (8002718 <main+0x814>)
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	4b8f      	ldr	r3, [pc, #572]	; (800271c <main+0x818>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d215      	bcs.n	8002510 <main+0x60c>
					{
					  trangthai = counter;
 80024e4:	4b8d      	ldr	r3, [pc, #564]	; (800271c <main+0x818>)
 80024e6:	781a      	ldrb	r2, [r3, #0]
 80024e8:	4b8b      	ldr	r3, [pc, #556]	; (8002718 <main+0x814>)
 80024ea:	701a      	strb	r2, [r3, #0]
					  savemin++;
 80024ec:	4b8c      	ldr	r3, [pc, #560]	; (8002720 <main+0x81c>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	4b8a      	ldr	r3, [pc, #552]	; (8002720 <main+0x81c>)
 80024f6:	701a      	strb	r2, [r3, #0]
							if (savemin > 59)
 80024f8:	4b89      	ldr	r3, [pc, #548]	; (8002720 <main+0x81c>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b3b      	cmp	r3, #59	; 0x3b
 80024fe:	d902      	bls.n	8002506 <main+0x602>
								{
								savemin = 0;
 8002500:	4b87      	ldr	r3, [pc, #540]	; (8002720 <main+0x81c>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
								}
						trangthai = counter;
 8002506:	4b85      	ldr	r3, [pc, #532]	; (800271c <main+0x818>)
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	4b83      	ldr	r3, [pc, #524]	; (8002718 <main+0x814>)
 800250c:	701a      	strb	r2, [r3, #0]
 800250e:	e013      	b.n	8002538 <main+0x634>
					}
			  else if (trangthai > counter)
 8002510:	4b81      	ldr	r3, [pc, #516]	; (8002718 <main+0x814>)
 8002512:	781a      	ldrb	r2, [r3, #0]
 8002514:	4b81      	ldr	r3, [pc, #516]	; (800271c <main+0x818>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d90d      	bls.n	8002538 <main+0x634>
					{
						trangthai = counter;
 800251c:	4b7f      	ldr	r3, [pc, #508]	; (800271c <main+0x818>)
 800251e:	781a      	ldrb	r2, [r3, #0]
 8002520:	4b7d      	ldr	r3, [pc, #500]	; (8002718 <main+0x814>)
 8002522:	701a      	strb	r2, [r3, #0]
						savemin--;
 8002524:	4b7e      	ldr	r3, [pc, #504]	; (8002720 <main+0x81c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	3b01      	subs	r3, #1
 800252a:	b2da      	uxtb	r2, r3
 800252c:	4b7c      	ldr	r3, [pc, #496]	; (8002720 <main+0x81c>)
 800252e:	701a      	strb	r2, [r3, #0]
						if (savemin < 0)
							{
							savemin = 59;
							}
						trangthai = counter;
 8002530:	4b7a      	ldr	r3, [pc, #488]	; (800271c <main+0x818>)
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	4b78      	ldr	r3, [pc, #480]	; (8002718 <main+0x814>)
 8002536:	701a      	strb	r2, [r3, #0]
					}
			  if (trangthai = counter)
 8002538:	4b78      	ldr	r3, [pc, #480]	; (800271c <main+0x818>)
 800253a:	781a      	ldrb	r2, [r3, #0]
 800253c:	4b76      	ldr	r3, [pc, #472]	; (8002718 <main+0x814>)
 800253e:	701a      	strb	r2, [r3, #0]
 8002540:	4b75      	ldr	r3, [pc, #468]	; (8002718 <main+0x814>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d006      	beq.n	8002556 <main+0x652>
					{
					  if (savemin > 59)
 8002548:	4b75      	ldr	r3, [pc, #468]	; (8002720 <main+0x81c>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b3b      	cmp	r3, #59	; 0x3b
 800254e:	d902      	bls.n	8002556 <main+0x652>
						{
						  savemin = 59;
 8002550:	4b73      	ldr	r3, [pc, #460]	; (8002720 <main+0x81c>)
 8002552:	223b      	movs	r2, #59	; 0x3b
 8002554:	701a      	strb	r2, [r3, #0]
						}
					}
		 	lcd_clear(&p_lcd);
 8002556:	4873      	ldr	r0, [pc, #460]	; (8002724 <main+0x820>)
 8002558:	f7fe ff23 	bl	80013a2 <lcd_clear>
	  		lcd_set_cursor(&p_lcd, 4, 0);
 800255c:	2200      	movs	r2, #0
 800255e:	2104      	movs	r1, #4
 8002560:	4870      	ldr	r0, [pc, #448]	; (8002724 <main+0x820>)
 8002562:	f7fe fedd 	bl	8001320 <lcd_set_cursor>
	  		sprintf(time, "  %02d:+%02d:%02d", savehour, savemin, savesec);
 8002566:	4b70      	ldr	r3, [pc, #448]	; (8002728 <main+0x824>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	4b6c      	ldr	r3, [pc, #432]	; (8002720 <main+0x81c>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	4b6e      	ldr	r3, [pc, #440]	; (800272c <main+0x828>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	460b      	mov	r3, r1
 800257a:	496d      	ldr	r1, [pc, #436]	; (8002730 <main+0x82c>)
 800257c:	486d      	ldr	r0, [pc, #436]	; (8002734 <main+0x830>)
 800257e:	f004 fcf3 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 8002582:	496c      	ldr	r1, [pc, #432]	; (8002734 <main+0x830>)
 8002584:	4867      	ldr	r0, [pc, #412]	; (8002724 <main+0x820>)
 8002586:	f7fe fef5 	bl	8001374 <lcd_send_string>
			HAL_Delay(150);
 800258a:	2096      	movs	r0, #150	; 0x96
 800258c:	f001 fd5a 	bl	8004044 <HAL_Delay>
		    break;
 8002590:	f000 bc2d 	b.w	8002dee <main+0xeea>

	  	 case SET_SEC:
	  		if (trangthai < counter)
 8002594:	4b60      	ldr	r3, [pc, #384]	; (8002718 <main+0x814>)
 8002596:	781a      	ldrb	r2, [r3, #0]
 8002598:	4b60      	ldr	r3, [pc, #384]	; (800271c <main+0x818>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d215      	bcs.n	80025cc <main+0x6c8>
					{
					  trangthai = counter;
 80025a0:	4b5e      	ldr	r3, [pc, #376]	; (800271c <main+0x818>)
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	4b5c      	ldr	r3, [pc, #368]	; (8002718 <main+0x814>)
 80025a6:	701a      	strb	r2, [r3, #0]
					  savesec++;
 80025a8:	4b60      	ldr	r3, [pc, #384]	; (800272c <main+0x828>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	3301      	adds	r3, #1
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	4b5e      	ldr	r3, [pc, #376]	; (800272c <main+0x828>)
 80025b2:	701a      	strb	r2, [r3, #0]
							if (savesec > 59)
 80025b4:	4b5d      	ldr	r3, [pc, #372]	; (800272c <main+0x828>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b3b      	cmp	r3, #59	; 0x3b
 80025ba:	d902      	bls.n	80025c2 <main+0x6be>
								{
								savesec = 0;
 80025bc:	4b5b      	ldr	r3, [pc, #364]	; (800272c <main+0x828>)
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
								}
						trangthai = counter;
 80025c2:	4b56      	ldr	r3, [pc, #344]	; (800271c <main+0x818>)
 80025c4:	781a      	ldrb	r2, [r3, #0]
 80025c6:	4b54      	ldr	r3, [pc, #336]	; (8002718 <main+0x814>)
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	e013      	b.n	80025f4 <main+0x6f0>
					}
			  else if (trangthai > counter)
 80025cc:	4b52      	ldr	r3, [pc, #328]	; (8002718 <main+0x814>)
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	4b52      	ldr	r3, [pc, #328]	; (800271c <main+0x818>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d90d      	bls.n	80025f4 <main+0x6f0>
					{
						trangthai = counter;
 80025d8:	4b50      	ldr	r3, [pc, #320]	; (800271c <main+0x818>)
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	4b4e      	ldr	r3, [pc, #312]	; (8002718 <main+0x814>)
 80025de:	701a      	strb	r2, [r3, #0]
						savesec--;
 80025e0:	4b52      	ldr	r3, [pc, #328]	; (800272c <main+0x828>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	4b50      	ldr	r3, [pc, #320]	; (800272c <main+0x828>)
 80025ea:	701a      	strb	r2, [r3, #0]
						if (savesec < 0)
							{
							savesec = 59;
							}
						trangthai = counter;
 80025ec:	4b4b      	ldr	r3, [pc, #300]	; (800271c <main+0x818>)
 80025ee:	781a      	ldrb	r2, [r3, #0]
 80025f0:	4b49      	ldr	r3, [pc, #292]	; (8002718 <main+0x814>)
 80025f2:	701a      	strb	r2, [r3, #0]
					}
			  if (trangthai = counter)
 80025f4:	4b49      	ldr	r3, [pc, #292]	; (800271c <main+0x818>)
 80025f6:	781a      	ldrb	r2, [r3, #0]
 80025f8:	4b47      	ldr	r3, [pc, #284]	; (8002718 <main+0x814>)
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	4b46      	ldr	r3, [pc, #280]	; (8002718 <main+0x814>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d006      	beq.n	8002612 <main+0x70e>
					{
					  if (savesec > 59)
 8002604:	4b49      	ldr	r3, [pc, #292]	; (800272c <main+0x828>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b3b      	cmp	r3, #59	; 0x3b
 800260a:	d902      	bls.n	8002612 <main+0x70e>
						{
						  savesec = 59;
 800260c:	4b47      	ldr	r3, [pc, #284]	; (800272c <main+0x828>)
 800260e:	223b      	movs	r2, #59	; 0x3b
 8002610:	701a      	strb	r2, [r3, #0]
						}
					}
		 	lcd_clear(&p_lcd);
 8002612:	4844      	ldr	r0, [pc, #272]	; (8002724 <main+0x820>)
 8002614:	f7fe fec5 	bl	80013a2 <lcd_clear>
			lcd_set_cursor(&p_lcd, 4, 0);
 8002618:	2200      	movs	r2, #0
 800261a:	2104      	movs	r1, #4
 800261c:	4841      	ldr	r0, [pc, #260]	; (8002724 <main+0x820>)
 800261e:	f7fe fe7f 	bl	8001320 <lcd_set_cursor>
			sprintf(time, " %02d:%02d:+%02d", savehour, savemin, savesec);
 8002622:	4b41      	ldr	r3, [pc, #260]	; (8002728 <main+0x824>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	4b3d      	ldr	r3, [pc, #244]	; (8002720 <main+0x81c>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	4619      	mov	r1, r3
 800262e:	4b3f      	ldr	r3, [pc, #252]	; (800272c <main+0x828>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	460b      	mov	r3, r1
 8002636:	4940      	ldr	r1, [pc, #256]	; (8002738 <main+0x834>)
 8002638:	483e      	ldr	r0, [pc, #248]	; (8002734 <main+0x830>)
 800263a:	f004 fc95 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 800263e:	493d      	ldr	r1, [pc, #244]	; (8002734 <main+0x830>)
 8002640:	4838      	ldr	r0, [pc, #224]	; (8002724 <main+0x820>)
 8002642:	f7fe fe97 	bl	8001374 <lcd_send_string>
			HAL_Delay(150);
 8002646:	2096      	movs	r0, #150	; 0x96
 8002648:	f001 fcfc 	bl	8004044 <HAL_Delay>
			break;
 800264c:	e3cf      	b.n	8002dee <main+0xeea>

	  	 case SET_DAY:
	  		if (trangthai < counter)
 800264e:	4b32      	ldr	r3, [pc, #200]	; (8002718 <main+0x814>)
 8002650:	781a      	ldrb	r2, [r3, #0]
 8002652:	4b32      	ldr	r3, [pc, #200]	; (800271c <main+0x818>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d215      	bcs.n	8002686 <main+0x782>
					{
					  trangthai = counter;
 800265a:	4b30      	ldr	r3, [pc, #192]	; (800271c <main+0x818>)
 800265c:	781a      	ldrb	r2, [r3, #0]
 800265e:	4b2e      	ldr	r3, [pc, #184]	; (8002718 <main+0x814>)
 8002660:	701a      	strb	r2, [r3, #0]
					  saveday++;
 8002662:	4b36      	ldr	r3, [pc, #216]	; (800273c <main+0x838>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	3301      	adds	r3, #1
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4b34      	ldr	r3, [pc, #208]	; (800273c <main+0x838>)
 800266c:	701a      	strb	r2, [r3, #0]
							if ( saveday > 7)
 800266e:	4b33      	ldr	r3, [pc, #204]	; (800273c <main+0x838>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b07      	cmp	r3, #7
 8002674:	d902      	bls.n	800267c <main+0x778>
								{
								saveday = 1;
 8002676:	4b31      	ldr	r3, [pc, #196]	; (800273c <main+0x838>)
 8002678:	2201      	movs	r2, #1
 800267a:	701a      	strb	r2, [r3, #0]
								}
						trangthai = counter;
 800267c:	4b27      	ldr	r3, [pc, #156]	; (800271c <main+0x818>)
 800267e:	781a      	ldrb	r2, [r3, #0]
 8002680:	4b25      	ldr	r3, [pc, #148]	; (8002718 <main+0x814>)
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	e01a      	b.n	80026bc <main+0x7b8>
					}
			  else if (trangthai > counter)
 8002686:	4b24      	ldr	r3, [pc, #144]	; (8002718 <main+0x814>)
 8002688:	781a      	ldrb	r2, [r3, #0]
 800268a:	4b24      	ldr	r3, [pc, #144]	; (800271c <main+0x818>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d914      	bls.n	80026bc <main+0x7b8>
					{
						trangthai = counter;
 8002692:	4b22      	ldr	r3, [pc, #136]	; (800271c <main+0x818>)
 8002694:	781a      	ldrb	r2, [r3, #0]
 8002696:	4b20      	ldr	r3, [pc, #128]	; (8002718 <main+0x814>)
 8002698:	701a      	strb	r2, [r3, #0]
						saveday--;
 800269a:	4b28      	ldr	r3, [pc, #160]	; (800273c <main+0x838>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	3b01      	subs	r3, #1
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4b26      	ldr	r3, [pc, #152]	; (800273c <main+0x838>)
 80026a4:	701a      	strb	r2, [r3, #0]
						if (saveday < 1)
 80026a6:	4b25      	ldr	r3, [pc, #148]	; (800273c <main+0x838>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d102      	bne.n	80026b4 <main+0x7b0>
							{
							saveday = 7;
 80026ae:	4b23      	ldr	r3, [pc, #140]	; (800273c <main+0x838>)
 80026b0:	2207      	movs	r2, #7
 80026b2:	701a      	strb	r2, [r3, #0]
							}
						trangthai = counter;
 80026b4:	4b19      	ldr	r3, [pc, #100]	; (800271c <main+0x818>)
 80026b6:	781a      	ldrb	r2, [r3, #0]
 80026b8:	4b17      	ldr	r3, [pc, #92]	; (8002718 <main+0x814>)
 80026ba:	701a      	strb	r2, [r3, #0]
					}
			  if (trangthai = counter)
 80026bc:	4b17      	ldr	r3, [pc, #92]	; (800271c <main+0x818>)
 80026be:	781a      	ldrb	r2, [r3, #0]
 80026c0:	4b15      	ldr	r3, [pc, #84]	; (8002718 <main+0x814>)
 80026c2:	701a      	strb	r2, [r3, #0]
 80026c4:	4b14      	ldr	r3, [pc, #80]	; (8002718 <main+0x814>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d006      	beq.n	80026da <main+0x7d6>
					{
					  if (saveday > 7)
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <main+0x838>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b07      	cmp	r3, #7
 80026d2:	d902      	bls.n	80026da <main+0x7d6>
						{
						  saveday = 7;
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <main+0x838>)
 80026d6:	2207      	movs	r2, #7
 80026d8:	701a      	strb	r2, [r3, #0]
						}
					}
		 	lcd_clear(&p_lcd);
 80026da:	4812      	ldr	r0, [pc, #72]	; (8002724 <main+0x820>)
 80026dc:	f7fe fe61 	bl	80013a2 <lcd_clear>
	  		if (saveday == 1)
 80026e0:	4b16      	ldr	r3, [pc, #88]	; (800273c <main+0x838>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d133      	bne.n	8002750 <main+0x84c>
			{
			lcd_set_cursor(&p_lcd, 0, 0);
 80026e8:	2200      	movs	r2, #0
 80026ea:	2100      	movs	r1, #0
 80026ec:	480d      	ldr	r0, [pc, #52]	; (8002724 <main+0x820>)
 80026ee:	f7fe fe17 	bl	8001320 <lcd_set_cursor>
			sprintf(time, "CN%d-%d-20%d", savedate, savemonth, saveyear);
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <main+0x83c>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <main+0x840>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4619      	mov	r1, r3
 80026fe:	4b12      	ldr	r3, [pc, #72]	; (8002748 <main+0x844>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	460b      	mov	r3, r1
 8002706:	4911      	ldr	r1, [pc, #68]	; (800274c <main+0x848>)
 8002708:	480a      	ldr	r0, [pc, #40]	; (8002734 <main+0x830>)
 800270a:	f004 fc2d 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 800270e:	4909      	ldr	r1, [pc, #36]	; (8002734 <main+0x830>)
 8002710:	4804      	ldr	r0, [pc, #16]	; (8002724 <main+0x820>)
 8002712:	f7fe fe2f 	bl	8001374 <lcd_send_string>
 8002716:	e037      	b.n	8002788 <main+0x884>
 8002718:	2000024d 	.word	0x2000024d
 800271c:	2000024c 	.word	0x2000024c
 8002720:	20000241 	.word	0x20000241
 8002724:	2000020c 	.word	0x2000020c
 8002728:	20000240 	.word	0x20000240
 800272c:	20000242 	.word	0x20000242
 8002730:	08007950 	.word	0x08007950
 8002734:	2000021c 	.word	0x2000021c
 8002738:	08007964 	.word	0x08007964
 800273c:	20000243 	.word	0x20000243
 8002740:	20000244 	.word	0x20000244
 8002744:	20000245 	.word	0x20000245
 8002748:	20000246 	.word	0x20000246
 800274c:	08007978 	.word	0x08007978
			}
	  		else
			{
			lcd_set_cursor(&p_lcd, 0, 0);
 8002750:	2200      	movs	r2, #0
 8002752:	2100      	movs	r1, #0
 8002754:	4893      	ldr	r0, [pc, #588]	; (80029a4 <main+0xaa0>)
 8002756:	f7fe fde3 	bl	8001320 <lcd_set_cursor>
			sprintf(time, "Thu+%d %d-%d-20%d", saveday, savedate, savemonth, saveyear);
 800275a:	4b93      	ldr	r3, [pc, #588]	; (80029a8 <main+0xaa4>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	4619      	mov	r1, r3
 8002760:	4b92      	ldr	r3, [pc, #584]	; (80029ac <main+0xaa8>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	4b92      	ldr	r3, [pc, #584]	; (80029b0 <main+0xaac>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	4b91      	ldr	r3, [pc, #580]	; (80029b4 <main+0xab0>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	9200      	str	r2, [sp, #0]
 8002774:	4603      	mov	r3, r0
 8002776:	460a      	mov	r2, r1
 8002778:	498f      	ldr	r1, [pc, #572]	; (80029b8 <main+0xab4>)
 800277a:	4890      	ldr	r0, [pc, #576]	; (80029bc <main+0xab8>)
 800277c:	f004 fbf4 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 8002780:	498e      	ldr	r1, [pc, #568]	; (80029bc <main+0xab8>)
 8002782:	4888      	ldr	r0, [pc, #544]	; (80029a4 <main+0xaa0>)
 8002784:	f7fe fdf6 	bl	8001374 <lcd_send_string>
			}
	  		HAL_Delay(150);
 8002788:	2096      	movs	r0, #150	; 0x96
 800278a:	f001 fc5b 	bl	8004044 <HAL_Delay>
	  		break;
 800278e:	e32e      	b.n	8002dee <main+0xeea>

	  	 case SET_YEAR:
	  		 if (trangthai < counter)
 8002790:	4b8b      	ldr	r3, [pc, #556]	; (80029c0 <main+0xabc>)
 8002792:	781a      	ldrb	r2, [r3, #0]
 8002794:	4b8b      	ldr	r3, [pc, #556]	; (80029c4 <main+0xac0>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d215      	bcs.n	80027c8 <main+0x8c4>
					{
					  trangthai = counter;
 800279c:	4b89      	ldr	r3, [pc, #548]	; (80029c4 <main+0xac0>)
 800279e:	781a      	ldrb	r2, [r3, #0]
 80027a0:	4b87      	ldr	r3, [pc, #540]	; (80029c0 <main+0xabc>)
 80027a2:	701a      	strb	r2, [r3, #0]
					  saveyear++;
 80027a4:	4b83      	ldr	r3, [pc, #524]	; (80029b4 <main+0xab0>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	3301      	adds	r3, #1
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	4b81      	ldr	r3, [pc, #516]	; (80029b4 <main+0xab0>)
 80027ae:	701a      	strb	r2, [r3, #0]
							if (saveyear > 30)
 80027b0:	4b80      	ldr	r3, [pc, #512]	; (80029b4 <main+0xab0>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b1e      	cmp	r3, #30
 80027b6:	d902      	bls.n	80027be <main+0x8ba>
								{
								saveyear = 24;
 80027b8:	4b7e      	ldr	r3, [pc, #504]	; (80029b4 <main+0xab0>)
 80027ba:	2218      	movs	r2, #24
 80027bc:	701a      	strb	r2, [r3, #0]
								}
						trangthai = counter;
 80027be:	4b81      	ldr	r3, [pc, #516]	; (80029c4 <main+0xac0>)
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	4b7f      	ldr	r3, [pc, #508]	; (80029c0 <main+0xabc>)
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	e01a      	b.n	80027fe <main+0x8fa>
					}
			  else if (trangthai > counter)
 80027c8:	4b7d      	ldr	r3, [pc, #500]	; (80029c0 <main+0xabc>)
 80027ca:	781a      	ldrb	r2, [r3, #0]
 80027cc:	4b7d      	ldr	r3, [pc, #500]	; (80029c4 <main+0xac0>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d914      	bls.n	80027fe <main+0x8fa>
					{
						trangthai = counter;
 80027d4:	4b7b      	ldr	r3, [pc, #492]	; (80029c4 <main+0xac0>)
 80027d6:	781a      	ldrb	r2, [r3, #0]
 80027d8:	4b79      	ldr	r3, [pc, #484]	; (80029c0 <main+0xabc>)
 80027da:	701a      	strb	r2, [r3, #0]
						saveyear--;
 80027dc:	4b75      	ldr	r3, [pc, #468]	; (80029b4 <main+0xab0>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	4b73      	ldr	r3, [pc, #460]	; (80029b4 <main+0xab0>)
 80027e6:	701a      	strb	r2, [r3, #0]
						if (saveyear < 24)
 80027e8:	4b72      	ldr	r3, [pc, #456]	; (80029b4 <main+0xab0>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b17      	cmp	r3, #23
 80027ee:	d802      	bhi.n	80027f6 <main+0x8f2>
							{
							saveyear = 30;
 80027f0:	4b70      	ldr	r3, [pc, #448]	; (80029b4 <main+0xab0>)
 80027f2:	221e      	movs	r2, #30
 80027f4:	701a      	strb	r2, [r3, #0]
							}
						trangthai = counter;
 80027f6:	4b73      	ldr	r3, [pc, #460]	; (80029c4 <main+0xac0>)
 80027f8:	781a      	ldrb	r2, [r3, #0]
 80027fa:	4b71      	ldr	r3, [pc, #452]	; (80029c0 <main+0xabc>)
 80027fc:	701a      	strb	r2, [r3, #0]
					}
			  if (trangthai = counter)
 80027fe:	4b71      	ldr	r3, [pc, #452]	; (80029c4 <main+0xac0>)
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	4b6f      	ldr	r3, [pc, #444]	; (80029c0 <main+0xabc>)
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	4b6e      	ldr	r3, [pc, #440]	; (80029c0 <main+0xabc>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d006      	beq.n	800281c <main+0x918>
					{
					  if (saveyear > 30)
 800280e:	4b69      	ldr	r3, [pc, #420]	; (80029b4 <main+0xab0>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b1e      	cmp	r3, #30
 8002814:	d902      	bls.n	800281c <main+0x918>
						{
						  saveyear = 30;
 8002816:	4b67      	ldr	r3, [pc, #412]	; (80029b4 <main+0xab0>)
 8002818:	221e      	movs	r2, #30
 800281a:	701a      	strb	r2, [r3, #0]
						}
					}
			lcd_clear(&p_lcd);
 800281c:	4861      	ldr	r0, [pc, #388]	; (80029a4 <main+0xaa0>)
 800281e:	f7fe fdc0 	bl	80013a2 <lcd_clear>
	  		if (saveday == 1)
 8002822:	4b61      	ldr	r3, [pc, #388]	; (80029a8 <main+0xaa4>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d117      	bne.n	800285a <main+0x956>
			{
			lcd_set_cursor(&p_lcd, 0, 0);
 800282a:	2200      	movs	r2, #0
 800282c:	2100      	movs	r1, #0
 800282e:	485d      	ldr	r0, [pc, #372]	; (80029a4 <main+0xaa0>)
 8002830:	f7fe fd76 	bl	8001320 <lcd_set_cursor>
			sprintf(time, "CN%d-%d-20+%d" , savedate, savemonth, saveyear);
 8002834:	4b5d      	ldr	r3, [pc, #372]	; (80029ac <main+0xaa8>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	4b5d      	ldr	r3, [pc, #372]	; (80029b0 <main+0xaac>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	4619      	mov	r1, r3
 8002840:	4b5c      	ldr	r3, [pc, #368]	; (80029b4 <main+0xab0>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	460b      	mov	r3, r1
 8002848:	495f      	ldr	r1, [pc, #380]	; (80029c8 <main+0xac4>)
 800284a:	485c      	ldr	r0, [pc, #368]	; (80029bc <main+0xab8>)
 800284c:	f004 fb8c 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 8002850:	495a      	ldr	r1, [pc, #360]	; (80029bc <main+0xab8>)
 8002852:	4854      	ldr	r0, [pc, #336]	; (80029a4 <main+0xaa0>)
 8002854:	f7fe fd8e 	bl	8001374 <lcd_send_string>
 8002858:	e01b      	b.n	8002892 <main+0x98e>
			}
			else
			{
			lcd_set_cursor(&p_lcd, 0, 0);
 800285a:	2200      	movs	r2, #0
 800285c:	2100      	movs	r1, #0
 800285e:	4851      	ldr	r0, [pc, #324]	; (80029a4 <main+0xaa0>)
 8002860:	f7fe fd5e 	bl	8001320 <lcd_set_cursor>
			sprintf(time, "Thu%d %d-%d-20+%d", saveday, savedate, savemonth, saveyear);
 8002864:	4b50      	ldr	r3, [pc, #320]	; (80029a8 <main+0xaa4>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	4619      	mov	r1, r3
 800286a:	4b50      	ldr	r3, [pc, #320]	; (80029ac <main+0xaa8>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	4b4f      	ldr	r3, [pc, #316]	; (80029b0 <main+0xaac>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	4b4f      	ldr	r3, [pc, #316]	; (80029b4 <main+0xab0>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	9301      	str	r3, [sp, #4]
 800287c:	9200      	str	r2, [sp, #0]
 800287e:	4603      	mov	r3, r0
 8002880:	460a      	mov	r2, r1
 8002882:	4952      	ldr	r1, [pc, #328]	; (80029cc <main+0xac8>)
 8002884:	484d      	ldr	r0, [pc, #308]	; (80029bc <main+0xab8>)
 8002886:	f004 fb6f 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 800288a:	494c      	ldr	r1, [pc, #304]	; (80029bc <main+0xab8>)
 800288c:	4845      	ldr	r0, [pc, #276]	; (80029a4 <main+0xaa0>)
 800288e:	f7fe fd71 	bl	8001374 <lcd_send_string>
			}

	  		HAL_Delay(150);
 8002892:	2096      	movs	r0, #150	; 0x96
 8002894:	f001 fbd6 	bl	8004044 <HAL_Delay>
	  		break;
 8002898:	e2a9      	b.n	8002dee <main+0xeea>

	  	 case SET_MONTH:
	  		if (trangthai < counter)
 800289a:	4b49      	ldr	r3, [pc, #292]	; (80029c0 <main+0xabc>)
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	4b49      	ldr	r3, [pc, #292]	; (80029c4 <main+0xac0>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d215      	bcs.n	80028d2 <main+0x9ce>
					{
					  trangthai = counter;
 80028a6:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <main+0xac0>)
 80028a8:	781a      	ldrb	r2, [r3, #0]
 80028aa:	4b45      	ldr	r3, [pc, #276]	; (80029c0 <main+0xabc>)
 80028ac:	701a      	strb	r2, [r3, #0]
					  savemonth++;
 80028ae:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <main+0xaac>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4b3e      	ldr	r3, [pc, #248]	; (80029b0 <main+0xaac>)
 80028b8:	701a      	strb	r2, [r3, #0]
							if ( savemonth > 12)
 80028ba:	4b3d      	ldr	r3, [pc, #244]	; (80029b0 <main+0xaac>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b0c      	cmp	r3, #12
 80028c0:	d902      	bls.n	80028c8 <main+0x9c4>
								{
								 savemonth = 1;
 80028c2:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <main+0xaac>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
								}
						trangthai = counter;
 80028c8:	4b3e      	ldr	r3, [pc, #248]	; (80029c4 <main+0xac0>)
 80028ca:	781a      	ldrb	r2, [r3, #0]
 80028cc:	4b3c      	ldr	r3, [pc, #240]	; (80029c0 <main+0xabc>)
 80028ce:	701a      	strb	r2, [r3, #0]
 80028d0:	e01a      	b.n	8002908 <main+0xa04>
					}
			  else if (trangthai > counter)
 80028d2:	4b3b      	ldr	r3, [pc, #236]	; (80029c0 <main+0xabc>)
 80028d4:	781a      	ldrb	r2, [r3, #0]
 80028d6:	4b3b      	ldr	r3, [pc, #236]	; (80029c4 <main+0xac0>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d914      	bls.n	8002908 <main+0xa04>
					{
						trangthai = counter;
 80028de:	4b39      	ldr	r3, [pc, #228]	; (80029c4 <main+0xac0>)
 80028e0:	781a      	ldrb	r2, [r3, #0]
 80028e2:	4b37      	ldr	r3, [pc, #220]	; (80029c0 <main+0xabc>)
 80028e4:	701a      	strb	r2, [r3, #0]
						 savemonth--;
 80028e6:	4b32      	ldr	r3, [pc, #200]	; (80029b0 <main+0xaac>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	4b30      	ldr	r3, [pc, #192]	; (80029b0 <main+0xaac>)
 80028f0:	701a      	strb	r2, [r3, #0]
						if ( savemonth < 1)
 80028f2:	4b2f      	ldr	r3, [pc, #188]	; (80029b0 <main+0xaac>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d102      	bne.n	8002900 <main+0x9fc>
							{
							 savemonth = 12;
 80028fa:	4b2d      	ldr	r3, [pc, #180]	; (80029b0 <main+0xaac>)
 80028fc:	220c      	movs	r2, #12
 80028fe:	701a      	strb	r2, [r3, #0]
							}
						trangthai = counter;
 8002900:	4b30      	ldr	r3, [pc, #192]	; (80029c4 <main+0xac0>)
 8002902:	781a      	ldrb	r2, [r3, #0]
 8002904:	4b2e      	ldr	r3, [pc, #184]	; (80029c0 <main+0xabc>)
 8002906:	701a      	strb	r2, [r3, #0]
					}
			  if (trangthai = counter)
 8002908:	4b2e      	ldr	r3, [pc, #184]	; (80029c4 <main+0xac0>)
 800290a:	781a      	ldrb	r2, [r3, #0]
 800290c:	4b2c      	ldr	r3, [pc, #176]	; (80029c0 <main+0xabc>)
 800290e:	701a      	strb	r2, [r3, #0]
 8002910:	4b2b      	ldr	r3, [pc, #172]	; (80029c0 <main+0xabc>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d006      	beq.n	8002926 <main+0xa22>
					{
					  if ( savemonth > 12)
 8002918:	4b25      	ldr	r3, [pc, #148]	; (80029b0 <main+0xaac>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b0c      	cmp	r3, #12
 800291e:	d902      	bls.n	8002926 <main+0xa22>
						{
						  savemonth = 12;
 8002920:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <main+0xaac>)
 8002922:	220c      	movs	r2, #12
 8002924:	701a      	strb	r2, [r3, #0]
						}
					}
		 	lcd_clear(&p_lcd);
 8002926:	481f      	ldr	r0, [pc, #124]	; (80029a4 <main+0xaa0>)
 8002928:	f7fe fd3b 	bl	80013a2 <lcd_clear>
			if (saveday == 1)
 800292c:	4b1e      	ldr	r3, [pc, #120]	; (80029a8 <main+0xaa4>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d117      	bne.n	8002964 <main+0xa60>
			{
			lcd_set_cursor(&p_lcd, 0, 0);
 8002934:	2200      	movs	r2, #0
 8002936:	2100      	movs	r1, #0
 8002938:	481a      	ldr	r0, [pc, #104]	; (80029a4 <main+0xaa0>)
 800293a:	f7fe fcf1 	bl	8001320 <lcd_set_cursor>
			sprintf(time, "CN%d-+%d-20%d" , savedate, savemonth, saveyear);
 800293e:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <main+0xaa8>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <main+0xaac>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	4619      	mov	r1, r3
 800294a:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <main+0xab0>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	460b      	mov	r3, r1
 8002952:	491f      	ldr	r1, [pc, #124]	; (80029d0 <main+0xacc>)
 8002954:	4819      	ldr	r0, [pc, #100]	; (80029bc <main+0xab8>)
 8002956:	f004 fb07 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 800295a:	4918      	ldr	r1, [pc, #96]	; (80029bc <main+0xab8>)
 800295c:	4811      	ldr	r0, [pc, #68]	; (80029a4 <main+0xaa0>)
 800295e:	f7fe fd09 	bl	8001374 <lcd_send_string>
 8002962:	e01b      	b.n	800299c <main+0xa98>
			}
			else
			{
			lcd_set_cursor(&p_lcd, 0, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	2100      	movs	r1, #0
 8002968:	480e      	ldr	r0, [pc, #56]	; (80029a4 <main+0xaa0>)
 800296a:	f7fe fcd9 	bl	8001320 <lcd_set_cursor>
			sprintf(time, "Thu%d %d-+%d-20%d", saveday, savedate, savemonth, saveyear);
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <main+0xaa4>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	4619      	mov	r1, r3
 8002974:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <main+0xaa8>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <main+0xaac>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <main+0xab0>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	9200      	str	r2, [sp, #0]
 8002988:	4603      	mov	r3, r0
 800298a:	460a      	mov	r2, r1
 800298c:	4911      	ldr	r1, [pc, #68]	; (80029d4 <main+0xad0>)
 800298e:	480b      	ldr	r0, [pc, #44]	; (80029bc <main+0xab8>)
 8002990:	f004 faea 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 8002994:	4909      	ldr	r1, [pc, #36]	; (80029bc <main+0xab8>)
 8002996:	4803      	ldr	r0, [pc, #12]	; (80029a4 <main+0xaa0>)
 8002998:	f7fe fcec 	bl	8001374 <lcd_send_string>
			}

			HAL_Delay(150);
 800299c:	2096      	movs	r0, #150	; 0x96
 800299e:	f001 fb51 	bl	8004044 <HAL_Delay>
			break;
 80029a2:	e224      	b.n	8002dee <main+0xeea>
 80029a4:	2000020c 	.word	0x2000020c
 80029a8:	20000243 	.word	0x20000243
 80029ac:	20000244 	.word	0x20000244
 80029b0:	20000245 	.word	0x20000245
 80029b4:	20000246 	.word	0x20000246
 80029b8:	08007988 	.word	0x08007988
 80029bc:	2000021c 	.word	0x2000021c
 80029c0:	2000024d 	.word	0x2000024d
 80029c4:	2000024c 	.word	0x2000024c
 80029c8:	0800799c 	.word	0x0800799c
 80029cc:	080079ac 	.word	0x080079ac
 80029d0:	080079c0 	.word	0x080079c0
 80029d4:	080079d0 	.word	0x080079d0

	  	 case SET_DATE:
	  		if (trangthai < counter)
 80029d8:	4b7b      	ldr	r3, [pc, #492]	; (8002bc8 <main+0xcc4>)
 80029da:	781a      	ldrb	r2, [r3, #0]
 80029dc:	4b7b      	ldr	r3, [pc, #492]	; (8002bcc <main+0xcc8>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	f080 808c 	bcs.w	8002afe <main+0xbfa>
			{
			  trangthai = counter;
 80029e6:	4b79      	ldr	r3, [pc, #484]	; (8002bcc <main+0xcc8>)
 80029e8:	781a      	ldrb	r2, [r3, #0]
 80029ea:	4b77      	ldr	r3, [pc, #476]	; (8002bc8 <main+0xcc4>)
 80029ec:	701a      	strb	r2, [r3, #0]
			  savedate++;
 80029ee:	4b78      	ldr	r3, [pc, #480]	; (8002bd0 <main+0xccc>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	3301      	adds	r3, #1
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	4b76      	ldr	r3, [pc, #472]	; (8002bd0 <main+0xccc>)
 80029f8:	701a      	strb	r2, [r3, #0]
				  if (savemonth == 1
 80029fa:	4b76      	ldr	r3, [pc, #472]	; (8002bd4 <main+0xcd0>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d017      	beq.n	8002a32 <main+0xb2e>
						|| savemonth == 3
 8002a02:	4b74      	ldr	r3, [pc, #464]	; (8002bd4 <main+0xcd0>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d013      	beq.n	8002a32 <main+0xb2e>
						|| savemonth == 5
 8002a0a:	4b72      	ldr	r3, [pc, #456]	; (8002bd4 <main+0xcd0>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	d00f      	beq.n	8002a32 <main+0xb2e>
						|| savemonth == 7
 8002a12:	4b70      	ldr	r3, [pc, #448]	; (8002bd4 <main+0xcd0>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b07      	cmp	r3, #7
 8002a18:	d00b      	beq.n	8002a32 <main+0xb2e>
						|| savemonth == 8
 8002a1a:	4b6e      	ldr	r3, [pc, #440]	; (8002bd4 <main+0xcd0>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d007      	beq.n	8002a32 <main+0xb2e>
						|| savemonth == 10
 8002a22:	4b6c      	ldr	r3, [pc, #432]	; (8002bd4 <main+0xcd0>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b0a      	cmp	r3, #10
 8002a28:	d003      	beq.n	8002a32 <main+0xb2e>
						|| savemonth == 12 )
 8002a2a:	4b6a      	ldr	r3, [pc, #424]	; (8002bd4 <main+0xcd0>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b0c      	cmp	r3, #12
 8002a30:	d106      	bne.n	8002a40 <main+0xb3c>
					{
					if (savedate > 31)
 8002a32:	4b67      	ldr	r3, [pc, #412]	; (8002bd0 <main+0xccc>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b1f      	cmp	r3, #31
 8002a38:	d902      	bls.n	8002a40 <main+0xb3c>
						{
						savedate = 1;
 8002a3a:	4b65      	ldr	r3, [pc, #404]	; (8002bd0 <main+0xccc>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	701a      	strb	r2, [r3, #0]
						}
					}
				if (savemonth == 2 && saveyear == 24)
 8002a40:	4b64      	ldr	r3, [pc, #400]	; (8002bd4 <main+0xcd0>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d10b      	bne.n	8002a60 <main+0xb5c>
 8002a48:	4b63      	ldr	r3, [pc, #396]	; (8002bd8 <main+0xcd4>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b18      	cmp	r3, #24
 8002a4e:	d107      	bne.n	8002a60 <main+0xb5c>
					{
					if (savedate > 29)
 8002a50:	4b5f      	ldr	r3, [pc, #380]	; (8002bd0 <main+0xccc>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b1d      	cmp	r3, #29
 8002a56:	d932      	bls.n	8002abe <main+0xbba>
						{
						savedate = 1;
 8002a58:	4b5d      	ldr	r3, [pc, #372]	; (8002bd0 <main+0xccc>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
					if (savedate > 29)
 8002a5e:	e02e      	b.n	8002abe <main+0xbba>
						}
					}
				else if (savemonth == 2 && saveyear == 28)
 8002a60:	4b5c      	ldr	r3, [pc, #368]	; (8002bd4 <main+0xcd0>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d10b      	bne.n	8002a80 <main+0xb7c>
 8002a68:	4b5b      	ldr	r3, [pc, #364]	; (8002bd8 <main+0xcd4>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b1c      	cmp	r3, #28
 8002a6e:	d107      	bne.n	8002a80 <main+0xb7c>
					{
					if (savedate > 29)
 8002a70:	4b57      	ldr	r3, [pc, #348]	; (8002bd0 <main+0xccc>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b1d      	cmp	r3, #29
 8002a76:	d922      	bls.n	8002abe <main+0xbba>
						{
						savedate = 1;
 8002a78:	4b55      	ldr	r3, [pc, #340]	; (8002bd0 <main+0xccc>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	701a      	strb	r2, [r3, #0]
					if (savedate > 29)
 8002a7e:	e01e      	b.n	8002abe <main+0xbba>
						}
					}
				else if (savemonth == 2 && saveyear != 24)
 8002a80:	4b54      	ldr	r3, [pc, #336]	; (8002bd4 <main+0xcd0>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d10b      	bne.n	8002aa0 <main+0xb9c>
 8002a88:	4b53      	ldr	r3, [pc, #332]	; (8002bd8 <main+0xcd4>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b18      	cmp	r3, #24
 8002a8e:	d007      	beq.n	8002aa0 <main+0xb9c>
					{
					if (savedate > 28)
 8002a90:	4b4f      	ldr	r3, [pc, #316]	; (8002bd0 <main+0xccc>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b1c      	cmp	r3, #28
 8002a96:	d912      	bls.n	8002abe <main+0xbba>
						{
						savedate = 1;
 8002a98:	4b4d      	ldr	r3, [pc, #308]	; (8002bd0 <main+0xccc>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	701a      	strb	r2, [r3, #0]
					if (savedate > 28)
 8002a9e:	e00e      	b.n	8002abe <main+0xbba>
						}
					}
				else if (savemonth == 2 && saveyear != 28)
 8002aa0:	4b4c      	ldr	r3, [pc, #304]	; (8002bd4 <main+0xcd0>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d10a      	bne.n	8002abe <main+0xbba>
 8002aa8:	4b4b      	ldr	r3, [pc, #300]	; (8002bd8 <main+0xcd4>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b1c      	cmp	r3, #28
 8002aae:	d006      	beq.n	8002abe <main+0xbba>
					{
					if (savedate > 28)
 8002ab0:	4b47      	ldr	r3, [pc, #284]	; (8002bd0 <main+0xccc>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b1c      	cmp	r3, #28
 8002ab6:	d902      	bls.n	8002abe <main+0xbba>
						{
						savedate = 1;
 8002ab8:	4b45      	ldr	r3, [pc, #276]	; (8002bd0 <main+0xccc>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
						}
					}
				if (savemonth == 4
 8002abe:	4b45      	ldr	r3, [pc, #276]	; (8002bd4 <main+0xcd0>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d00f      	beq.n	8002ae6 <main+0xbe2>
						|| savemonth == 6
 8002ac6:	4b43      	ldr	r3, [pc, #268]	; (8002bd4 <main+0xcd0>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b06      	cmp	r3, #6
 8002acc:	d00b      	beq.n	8002ae6 <main+0xbe2>
						|| savemonth == 3
 8002ace:	4b41      	ldr	r3, [pc, #260]	; (8002bd4 <main+0xcd0>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d007      	beq.n	8002ae6 <main+0xbe2>
						|| savemonth == 9
 8002ad6:	4b3f      	ldr	r3, [pc, #252]	; (8002bd4 <main+0xcd0>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b09      	cmp	r3, #9
 8002adc:	d003      	beq.n	8002ae6 <main+0xbe2>
						|| savemonth == 11)
 8002ade:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <main+0xcd0>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b0b      	cmp	r3, #11
 8002ae4:	d106      	bne.n	8002af4 <main+0xbf0>
					{
					if (savedate > 30)
 8002ae6:	4b3a      	ldr	r3, [pc, #232]	; (8002bd0 <main+0xccc>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b1e      	cmp	r3, #30
 8002aec:	d902      	bls.n	8002af4 <main+0xbf0>
						{
						savedate = 1;
 8002aee:	4b38      	ldr	r3, [pc, #224]	; (8002bd0 <main+0xccc>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]
						}
					}
				trangthai = counter;
 8002af4:	4b35      	ldr	r3, [pc, #212]	; (8002bcc <main+0xcc8>)
 8002af6:	781a      	ldrb	r2, [r3, #0]
 8002af8:	4b33      	ldr	r3, [pc, #204]	; (8002bc8 <main+0xcc4>)
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e09c      	b.n	8002c38 <main+0xd34>
			}
	  else if (trangthai > counter)
 8002afe:	4b32      	ldr	r3, [pc, #200]	; (8002bc8 <main+0xcc4>)
 8002b00:	781a      	ldrb	r2, [r3, #0]
 8002b02:	4b32      	ldr	r3, [pc, #200]	; (8002bcc <main+0xcc8>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	f240 8096 	bls.w	8002c38 <main+0xd34>
			{
				trangthai = counter;
 8002b0c:	4b2f      	ldr	r3, [pc, #188]	; (8002bcc <main+0xcc8>)
 8002b0e:	781a      	ldrb	r2, [r3, #0]
 8002b10:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <main+0xcc4>)
 8002b12:	701a      	strb	r2, [r3, #0]
				savedate--;
 8002b14:	4b2e      	ldr	r3, [pc, #184]	; (8002bd0 <main+0xccc>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <main+0xccc>)
 8002b1e:	701a      	strb	r2, [r3, #0]
					  if (savemonth == 1
 8002b20:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <main+0xcd0>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d017      	beq.n	8002b58 <main+0xc54>
							|| savemonth == 3
 8002b28:	4b2a      	ldr	r3, [pc, #168]	; (8002bd4 <main+0xcd0>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d013      	beq.n	8002b58 <main+0xc54>
							|| savemonth == 5
 8002b30:	4b28      	ldr	r3, [pc, #160]	; (8002bd4 <main+0xcd0>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b05      	cmp	r3, #5
 8002b36:	d00f      	beq.n	8002b58 <main+0xc54>
							|| savemonth == 7
 8002b38:	4b26      	ldr	r3, [pc, #152]	; (8002bd4 <main+0xcd0>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b07      	cmp	r3, #7
 8002b3e:	d00b      	beq.n	8002b58 <main+0xc54>
							|| savemonth == 8
 8002b40:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <main+0xcd0>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d007      	beq.n	8002b58 <main+0xc54>
							|| savemonth == 10
 8002b48:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <main+0xcd0>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b0a      	cmp	r3, #10
 8002b4e:	d003      	beq.n	8002b58 <main+0xc54>
							|| savemonth == 12 )
 8002b50:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <main+0xcd0>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b0c      	cmp	r3, #12
 8002b56:	d106      	bne.n	8002b66 <main+0xc62>
						{
						if (savedate < 1)
 8002b58:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <main+0xccc>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d102      	bne.n	8002b66 <main+0xc62>
							{
							savedate = 31;
 8002b60:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <main+0xccc>)
 8002b62:	221f      	movs	r2, #31
 8002b64:	701a      	strb	r2, [r3, #0]
							}
						}
					if (savemonth == 2 && saveyear == 24)
 8002b66:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <main+0xcd0>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d10b      	bne.n	8002b86 <main+0xc82>
 8002b6e:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <main+0xcd4>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b18      	cmp	r3, #24
 8002b74:	d107      	bne.n	8002b86 <main+0xc82>
						{
						if (savedate < 1)
 8002b76:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <main+0xccc>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d13d      	bne.n	8002bfa <main+0xcf6>
							{
							savedate = 29;
 8002b7e:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <main+0xccc>)
 8002b80:	221d      	movs	r2, #29
 8002b82:	701a      	strb	r2, [r3, #0]
						if (savedate < 1)
 8002b84:	e039      	b.n	8002bfa <main+0xcf6>
							}
						}
					else if (savemonth == 2 && saveyear == 28)
 8002b86:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <main+0xcd0>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d10b      	bne.n	8002ba6 <main+0xca2>
 8002b8e:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <main+0xcd4>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b1c      	cmp	r3, #28
 8002b94:	d107      	bne.n	8002ba6 <main+0xca2>
						{
						if (savedate < 1)
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <main+0xccc>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d12d      	bne.n	8002bfa <main+0xcf6>
							{
							savedate = 29;
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <main+0xccc>)
 8002ba0:	221d      	movs	r2, #29
 8002ba2:	701a      	strb	r2, [r3, #0]
						if (savedate < 1)
 8002ba4:	e029      	b.n	8002bfa <main+0xcf6>
							}
						}
					else if (savemonth == 2 && saveyear != 24)
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <main+0xcd0>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d116      	bne.n	8002bdc <main+0xcd8>
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <main+0xcd4>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b18      	cmp	r3, #24
 8002bb4:	d012      	beq.n	8002bdc <main+0xcd8>
						{
						if (savedate < 1)
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <main+0xccc>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d11d      	bne.n	8002bfa <main+0xcf6>
							{
							savedate = 28;
 8002bbe:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <main+0xccc>)
 8002bc0:	221c      	movs	r2, #28
 8002bc2:	701a      	strb	r2, [r3, #0]
						if (savedate < 1)
 8002bc4:	e019      	b.n	8002bfa <main+0xcf6>
 8002bc6:	bf00      	nop
 8002bc8:	2000024d 	.word	0x2000024d
 8002bcc:	2000024c 	.word	0x2000024c
 8002bd0:	20000244 	.word	0x20000244
 8002bd4:	20000245 	.word	0x20000245
 8002bd8:	20000246 	.word	0x20000246
							}
						}
					else if (savemonth == 2 && saveyear != 28)
 8002bdc:	4b78      	ldr	r3, [pc, #480]	; (8002dc0 <main+0xebc>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d10a      	bne.n	8002bfa <main+0xcf6>
 8002be4:	4b77      	ldr	r3, [pc, #476]	; (8002dc4 <main+0xec0>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b1c      	cmp	r3, #28
 8002bea:	d006      	beq.n	8002bfa <main+0xcf6>
						{
						if (savedate < 1)
 8002bec:	4b76      	ldr	r3, [pc, #472]	; (8002dc8 <main+0xec4>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d102      	bne.n	8002bfa <main+0xcf6>
							{
							savedate = 28;
 8002bf4:	4b74      	ldr	r3, [pc, #464]	; (8002dc8 <main+0xec4>)
 8002bf6:	221c      	movs	r2, #28
 8002bf8:	701a      	strb	r2, [r3, #0]
							}
						}
					if (savemonth == 4
 8002bfa:	4b71      	ldr	r3, [pc, #452]	; (8002dc0 <main+0xebc>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d00f      	beq.n	8002c22 <main+0xd1e>
							|| savemonth == 6
 8002c02:	4b6f      	ldr	r3, [pc, #444]	; (8002dc0 <main+0xebc>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b06      	cmp	r3, #6
 8002c08:	d00b      	beq.n	8002c22 <main+0xd1e>
							|| savemonth == 3
 8002c0a:	4b6d      	ldr	r3, [pc, #436]	; (8002dc0 <main+0xebc>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d007      	beq.n	8002c22 <main+0xd1e>
							|| savemonth == 9
 8002c12:	4b6b      	ldr	r3, [pc, #428]	; (8002dc0 <main+0xebc>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b09      	cmp	r3, #9
 8002c18:	d003      	beq.n	8002c22 <main+0xd1e>
							|| savemonth == 11)
 8002c1a:	4b69      	ldr	r3, [pc, #420]	; (8002dc0 <main+0xebc>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b0b      	cmp	r3, #11
 8002c20:	d106      	bne.n	8002c30 <main+0xd2c>
						{
						if (savedate < 1)
 8002c22:	4b69      	ldr	r3, [pc, #420]	; (8002dc8 <main+0xec4>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <main+0xd2c>
							{
							savedate = 30;
 8002c2a:	4b67      	ldr	r3, [pc, #412]	; (8002dc8 <main+0xec4>)
 8002c2c:	221e      	movs	r2, #30
 8002c2e:	701a      	strb	r2, [r3, #0]
							}
						}
				trangthai = counter;
 8002c30:	4b66      	ldr	r3, [pc, #408]	; (8002dcc <main+0xec8>)
 8002c32:	781a      	ldrb	r2, [r3, #0]
 8002c34:	4b66      	ldr	r3, [pc, #408]	; (8002dd0 <main+0xecc>)
 8002c36:	701a      	strb	r2, [r3, #0]
			}
	  if (trangthai = counter)
 8002c38:	4b64      	ldr	r3, [pc, #400]	; (8002dcc <main+0xec8>)
 8002c3a:	781a      	ldrb	r2, [r3, #0]
 8002c3c:	4b64      	ldr	r3, [pc, #400]	; (8002dd0 <main+0xecc>)
 8002c3e:	701a      	strb	r2, [r3, #0]
 8002c40:	4b63      	ldr	r3, [pc, #396]	; (8002dd0 <main+0xecc>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d07c      	beq.n	8002d42 <main+0xe3e>
			{
		  if (savemonth == 1
 8002c48:	4b5d      	ldr	r3, [pc, #372]	; (8002dc0 <main+0xebc>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d017      	beq.n	8002c80 <main+0xd7c>
					|| savemonth == 3
 8002c50:	4b5b      	ldr	r3, [pc, #364]	; (8002dc0 <main+0xebc>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d013      	beq.n	8002c80 <main+0xd7c>
					|| savemonth == 5
 8002c58:	4b59      	ldr	r3, [pc, #356]	; (8002dc0 <main+0xebc>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b05      	cmp	r3, #5
 8002c5e:	d00f      	beq.n	8002c80 <main+0xd7c>
					|| savemonth == 7
 8002c60:	4b57      	ldr	r3, [pc, #348]	; (8002dc0 <main+0xebc>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b07      	cmp	r3, #7
 8002c66:	d00b      	beq.n	8002c80 <main+0xd7c>
					|| savemonth == 8
 8002c68:	4b55      	ldr	r3, [pc, #340]	; (8002dc0 <main+0xebc>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d007      	beq.n	8002c80 <main+0xd7c>
					|| savemonth == 10
 8002c70:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <main+0xebc>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b0a      	cmp	r3, #10
 8002c76:	d003      	beq.n	8002c80 <main+0xd7c>
					|| savemonth == 12 )
 8002c78:	4b51      	ldr	r3, [pc, #324]	; (8002dc0 <main+0xebc>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b0c      	cmp	r3, #12
 8002c7e:	d106      	bne.n	8002c8e <main+0xd8a>
				{
				if (savedate > 31)
 8002c80:	4b51      	ldr	r3, [pc, #324]	; (8002dc8 <main+0xec4>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b1f      	cmp	r3, #31
 8002c86:	d902      	bls.n	8002c8e <main+0xd8a>
					{
					savedate = 31;
 8002c88:	4b4f      	ldr	r3, [pc, #316]	; (8002dc8 <main+0xec4>)
 8002c8a:	221f      	movs	r2, #31
 8002c8c:	701a      	strb	r2, [r3, #0]
					}
				}
			if (savemonth == 2 && alarmyear == 24)
 8002c8e:	4b4c      	ldr	r3, [pc, #304]	; (8002dc0 <main+0xebc>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d10b      	bne.n	8002cae <main+0xdaa>
 8002c96:	4b4f      	ldr	r3, [pc, #316]	; (8002dd4 <main+0xed0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b18      	cmp	r3, #24
 8002c9c:	d107      	bne.n	8002cae <main+0xdaa>
				{
				if (savedate > 29)
 8002c9e:	4b4a      	ldr	r3, [pc, #296]	; (8002dc8 <main+0xec4>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b1d      	cmp	r3, #29
 8002ca4:	d932      	bls.n	8002d0c <main+0xe08>
					{
					savedate = 29;
 8002ca6:	4b48      	ldr	r3, [pc, #288]	; (8002dc8 <main+0xec4>)
 8002ca8:	221d      	movs	r2, #29
 8002caa:	701a      	strb	r2, [r3, #0]
				if (savedate > 29)
 8002cac:	e02e      	b.n	8002d0c <main+0xe08>
					}
				}
			else if (savemonth == 2 && alarmyear == 28)
 8002cae:	4b44      	ldr	r3, [pc, #272]	; (8002dc0 <main+0xebc>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d10b      	bne.n	8002cce <main+0xdca>
 8002cb6:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <main+0xed0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b1c      	cmp	r3, #28
 8002cbc:	d107      	bne.n	8002cce <main+0xdca>
				{
				if (savedate > 29)
 8002cbe:	4b42      	ldr	r3, [pc, #264]	; (8002dc8 <main+0xec4>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b1d      	cmp	r3, #29
 8002cc4:	d922      	bls.n	8002d0c <main+0xe08>
					{
					savedate = 29;
 8002cc6:	4b40      	ldr	r3, [pc, #256]	; (8002dc8 <main+0xec4>)
 8002cc8:	221d      	movs	r2, #29
 8002cca:	701a      	strb	r2, [r3, #0]
				if (savedate > 29)
 8002ccc:	e01e      	b.n	8002d0c <main+0xe08>
					}
				}
			else if (savemonth == 2 && alarmyear != 24)
 8002cce:	4b3c      	ldr	r3, [pc, #240]	; (8002dc0 <main+0xebc>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d10b      	bne.n	8002cee <main+0xdea>
 8002cd6:	4b3f      	ldr	r3, [pc, #252]	; (8002dd4 <main+0xed0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b18      	cmp	r3, #24
 8002cdc:	d007      	beq.n	8002cee <main+0xdea>
				{
				if (savedate > 28)
 8002cde:	4b3a      	ldr	r3, [pc, #232]	; (8002dc8 <main+0xec4>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b1c      	cmp	r3, #28
 8002ce4:	d912      	bls.n	8002d0c <main+0xe08>
					{
					savedate = 28;
 8002ce6:	4b38      	ldr	r3, [pc, #224]	; (8002dc8 <main+0xec4>)
 8002ce8:	221c      	movs	r2, #28
 8002cea:	701a      	strb	r2, [r3, #0]
				if (savedate > 28)
 8002cec:	e00e      	b.n	8002d0c <main+0xe08>
					}
				}
			else if (savemonth == 2 && alarmyear != 28)
 8002cee:	4b34      	ldr	r3, [pc, #208]	; (8002dc0 <main+0xebc>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d10a      	bne.n	8002d0c <main+0xe08>
 8002cf6:	4b37      	ldr	r3, [pc, #220]	; (8002dd4 <main+0xed0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b1c      	cmp	r3, #28
 8002cfc:	d006      	beq.n	8002d0c <main+0xe08>
				{
				if (savedate > 28)
 8002cfe:	4b32      	ldr	r3, [pc, #200]	; (8002dc8 <main+0xec4>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b1c      	cmp	r3, #28
 8002d04:	d902      	bls.n	8002d0c <main+0xe08>
					{
					savedate = 28;
 8002d06:	4b30      	ldr	r3, [pc, #192]	; (8002dc8 <main+0xec4>)
 8002d08:	221c      	movs	r2, #28
 8002d0a:	701a      	strb	r2, [r3, #0]
					}
				}
			if (savemonth == 4
 8002d0c:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <main+0xebc>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d00f      	beq.n	8002d34 <main+0xe30>
					|| savemonth == 6
 8002d14:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <main+0xebc>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b06      	cmp	r3, #6
 8002d1a:	d00b      	beq.n	8002d34 <main+0xe30>
					|| savemonth == 3
 8002d1c:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <main+0xebc>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d007      	beq.n	8002d34 <main+0xe30>
					|| savemonth == 9
 8002d24:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <main+0xebc>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b09      	cmp	r3, #9
 8002d2a:	d003      	beq.n	8002d34 <main+0xe30>
					|| savemonth == 11)
 8002d2c:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <main+0xebc>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b0b      	cmp	r3, #11
 8002d32:	d106      	bne.n	8002d42 <main+0xe3e>
				{
				if (savedate > 30)
 8002d34:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <main+0xec4>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b1e      	cmp	r3, #30
 8002d3a:	d902      	bls.n	8002d42 <main+0xe3e>
					{
					savedate = 30;
 8002d3c:	4b22      	ldr	r3, [pc, #136]	; (8002dc8 <main+0xec4>)
 8002d3e:	221e      	movs	r2, #30
 8002d40:	701a      	strb	r2, [r3, #0]
					}
				}
			}
	  		lcd_clear(&p_lcd);
 8002d42:	4825      	ldr	r0, [pc, #148]	; (8002dd8 <main+0xed4>)
 8002d44:	f7fe fb2d 	bl	80013a2 <lcd_clear>
	  		if (saveday == 1)
 8002d48:	4b24      	ldr	r3, [pc, #144]	; (8002ddc <main+0xed8>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d117      	bne.n	8002d80 <main+0xe7c>
			{
			lcd_set_cursor(&p_lcd, 0, 0);
 8002d50:	2200      	movs	r2, #0
 8002d52:	2100      	movs	r1, #0
 8002d54:	4820      	ldr	r0, [pc, #128]	; (8002dd8 <main+0xed4>)
 8002d56:	f7fe fae3 	bl	8001320 <lcd_set_cursor>
			sprintf(time, "CN+%d-%d-20%d" , savedate, savemonth, saveyear);
 8002d5a:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <main+0xec4>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <main+0xebc>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	4619      	mov	r1, r3
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <main+0xec0>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	491c      	ldr	r1, [pc, #112]	; (8002de0 <main+0xedc>)
 8002d70:	481c      	ldr	r0, [pc, #112]	; (8002de4 <main+0xee0>)
 8002d72:	f004 f8f9 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 8002d76:	491b      	ldr	r1, [pc, #108]	; (8002de4 <main+0xee0>)
 8002d78:	4817      	ldr	r0, [pc, #92]	; (8002dd8 <main+0xed4>)
 8002d7a:	f7fe fafb 	bl	8001374 <lcd_send_string>
 8002d7e:	e01b      	b.n	8002db8 <main+0xeb4>
			}
			else
			{
			lcd_set_cursor(&p_lcd, 0, 0);
 8002d80:	2200      	movs	r2, #0
 8002d82:	2100      	movs	r1, #0
 8002d84:	4814      	ldr	r0, [pc, #80]	; (8002dd8 <main+0xed4>)
 8002d86:	f7fe facb 	bl	8001320 <lcd_set_cursor>
			sprintf(time, "Thu%d +%d-%d-20%d", saveday, savedate, savemonth, saveyear);
 8002d8a:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <main+0xed8>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <main+0xec4>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <main+0xebc>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <main+0xec0>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	9200      	str	r2, [sp, #0]
 8002da4:	4603      	mov	r3, r0
 8002da6:	460a      	mov	r2, r1
 8002da8:	490f      	ldr	r1, [pc, #60]	; (8002de8 <main+0xee4>)
 8002daa:	480e      	ldr	r0, [pc, #56]	; (8002de4 <main+0xee0>)
 8002dac:	f004 f8dc 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 8002db0:	490c      	ldr	r1, [pc, #48]	; (8002de4 <main+0xee0>)
 8002db2:	4809      	ldr	r0, [pc, #36]	; (8002dd8 <main+0xed4>)
 8002db4:	f7fe fade 	bl	8001374 <lcd_send_string>
			}

			HAL_Delay(150);
 8002db8:	2096      	movs	r0, #150	; 0x96
 8002dba:	f001 f943 	bl	8004044 <HAL_Delay>
			break;
 8002dbe:	e016      	b.n	8002dee <main+0xeea>
 8002dc0:	20000245 	.word	0x20000245
 8002dc4:	20000246 	.word	0x20000246
 8002dc8:	20000244 	.word	0x20000244
 8002dcc:	2000024c 	.word	0x2000024c
 8002dd0:	2000024d 	.word	0x2000024d
 8002dd4:	2000023c 	.word	0x2000023c
 8002dd8:	2000020c 	.word	0x2000020c
 8002ddc:	20000243 	.word	0x20000243
 8002de0:	080079e4 	.word	0x080079e4
 8002de4:	2000021c 	.word	0x2000021c
 8002de8:	080079f4 	.word	0x080079f4
	  	default:
	  				 break;
 8002dec:	bf00      	nop
	  }


	  switch(dht)
 8002dee:	4b88      	ldr	r3, [pc, #544]	; (8003010 <main+0x110c>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d127      	bne.n	8002e46 <main+0xf42>
	  	  {
	       case DHT:
				lcd_clear(&p_lcd);
 8002df6:	4887      	ldr	r0, [pc, #540]	; (8003014 <main+0x1110>)
 8002df8:	f7fe fad3 	bl	80013a2 <lcd_clear>
				lcd_set_cursor(&p_lcd, 0, 0);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4884      	ldr	r0, [pc, #528]	; (8003014 <main+0x1110>)
 8002e02:	f7fe fa8d 	bl	8001320 <lcd_set_cursor>
				sprintf(strCopy, "Nhiet do %d.%d C", TCI, TCD);
 8002e06:	4b84      	ldr	r3, [pc, #528]	; (8003018 <main+0x1114>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4b83      	ldr	r3, [pc, #524]	; (800301c <main+0x1118>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	4983      	ldr	r1, [pc, #524]	; (8003020 <main+0x111c>)
 8002e12:	4884      	ldr	r0, [pc, #528]	; (8003024 <main+0x1120>)
 8002e14:	f004 f8a8 	bl	8006f68 <siprintf>
				lcd_send_string(&p_lcd, strCopy);
 8002e18:	4982      	ldr	r1, [pc, #520]	; (8003024 <main+0x1120>)
 8002e1a:	487e      	ldr	r0, [pc, #504]	; (8003014 <main+0x1110>)
 8002e1c:	f7fe faaa 	bl	8001374 <lcd_send_string>
				lcd_set_cursor(&p_lcd, 0, 1);
 8002e20:	2201      	movs	r2, #1
 8002e22:	2100      	movs	r1, #0
 8002e24:	487b      	ldr	r0, [pc, #492]	; (8003014 <main+0x1110>)
 8002e26:	f7fe fa7b 	bl	8001320 <lcd_set_cursor>
				sprintf(strCopy, "Do am %d.%d %%", RHI, RHD);
 8002e2a:	4b7f      	ldr	r3, [pc, #508]	; (8003028 <main+0x1124>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4b7e      	ldr	r3, [pc, #504]	; (800302c <main+0x1128>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	497e      	ldr	r1, [pc, #504]	; (8003030 <main+0x112c>)
 8002e36:	487b      	ldr	r0, [pc, #492]	; (8003024 <main+0x1120>)
 8002e38:	f004 f896 	bl	8006f68 <siprintf>
				lcd_send_string(&p_lcd, strCopy);
 8002e3c:	4979      	ldr	r1, [pc, #484]	; (8003024 <main+0x1120>)
 8002e3e:	4875      	ldr	r0, [pc, #468]	; (8003014 <main+0x1110>)
 8002e40:	f7fe fa98 	bl	8001374 <lcd_send_string>
			break;
 8002e44:	bf00      	nop
	  	  }


 switch(alarm)
 8002e46:	4b7b      	ldr	r3, [pc, #492]	; (8003034 <main+0x1130>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	2b06      	cmp	r3, #6
 8002e4e:	f200 8480 	bhi.w	8003752 <main+0x184e>
 8002e52:	a201      	add	r2, pc, #4	; (adr r2, 8002e58 <main+0xf54>)
 8002e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e58:	08002e75 	.word	0x08002e75
 8002e5c:	08002f29 	.word	0x08002f29
 8002e60:	08003753 	.word	0x08003753
 8002e64:	08002fdb 	.word	0x08002fdb
 8002e68:	08003121 	.word	0x08003121
 8002e6c:	0800321f 	.word	0x0800321f
 8002e70:	0800334d 	.word	0x0800334d
	{
		 case ALARM_HOUR:
			 if (trangthai < counter)
 8002e74:	4b70      	ldr	r3, [pc, #448]	; (8003038 <main+0x1134>)
 8002e76:	781a      	ldrb	r2, [r3, #0]
 8002e78:	4b70      	ldr	r3, [pc, #448]	; (800303c <main+0x1138>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d215      	bcs.n	8002eac <main+0xfa8>
					{
					  trangthai = counter;
 8002e80:	4b6e      	ldr	r3, [pc, #440]	; (800303c <main+0x1138>)
 8002e82:	781a      	ldrb	r2, [r3, #0]
 8002e84:	4b6c      	ldr	r3, [pc, #432]	; (8003038 <main+0x1134>)
 8002e86:	701a      	strb	r2, [r3, #0]
					  savealarmhour++;
 8002e88:	4b6d      	ldr	r3, [pc, #436]	; (8003040 <main+0x113c>)
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	4b6b      	ldr	r3, [pc, #428]	; (8003040 <main+0x113c>)
 8002e92:	801a      	strh	r2, [r3, #0]
							if (savealarmhour > 23)
 8002e94:	4b6a      	ldr	r3, [pc, #424]	; (8003040 <main+0x113c>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	2b17      	cmp	r3, #23
 8002e9a:	d902      	bls.n	8002ea2 <main+0xf9e>
								{
								savealarmhour = 0;
 8002e9c:	4b68      	ldr	r3, [pc, #416]	; (8003040 <main+0x113c>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	801a      	strh	r2, [r3, #0]
								}
						trangthai = counter;
 8002ea2:	4b66      	ldr	r3, [pc, #408]	; (800303c <main+0x1138>)
 8002ea4:	781a      	ldrb	r2, [r3, #0]
 8002ea6:	4b64      	ldr	r3, [pc, #400]	; (8003038 <main+0x1134>)
 8002ea8:	701a      	strb	r2, [r3, #0]
 8002eaa:	e013      	b.n	8002ed4 <main+0xfd0>
					}
			  else if (trangthai > counter)
 8002eac:	4b62      	ldr	r3, [pc, #392]	; (8003038 <main+0x1134>)
 8002eae:	781a      	ldrb	r2, [r3, #0]
 8002eb0:	4b62      	ldr	r3, [pc, #392]	; (800303c <main+0x1138>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d90d      	bls.n	8002ed4 <main+0xfd0>
					{
						trangthai = counter;
 8002eb8:	4b60      	ldr	r3, [pc, #384]	; (800303c <main+0x1138>)
 8002eba:	781a      	ldrb	r2, [r3, #0]
 8002ebc:	4b5e      	ldr	r3, [pc, #376]	; (8003038 <main+0x1134>)
 8002ebe:	701a      	strb	r2, [r3, #0]
						savealarmhour--;
 8002ec0:	4b5f      	ldr	r3, [pc, #380]	; (8003040 <main+0x113c>)
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	4b5d      	ldr	r3, [pc, #372]	; (8003040 <main+0x113c>)
 8002eca:	801a      	strh	r2, [r3, #0]
						if (savealarmhour < 0)
							{
							savealarmhour = 23;
							}
						trangthai = counter;
 8002ecc:	4b5b      	ldr	r3, [pc, #364]	; (800303c <main+0x1138>)
 8002ece:	781a      	ldrb	r2, [r3, #0]
 8002ed0:	4b59      	ldr	r3, [pc, #356]	; (8003038 <main+0x1134>)
 8002ed2:	701a      	strb	r2, [r3, #0]
					}
			  if (trangthai = counter)
 8002ed4:	4b59      	ldr	r3, [pc, #356]	; (800303c <main+0x1138>)
 8002ed6:	781a      	ldrb	r2, [r3, #0]
 8002ed8:	4b57      	ldr	r3, [pc, #348]	; (8003038 <main+0x1134>)
 8002eda:	701a      	strb	r2, [r3, #0]
 8002edc:	4b56      	ldr	r3, [pc, #344]	; (8003038 <main+0x1134>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d006      	beq.n	8002ef2 <main+0xfee>
					{
					  if (savealarmhour > 23)
 8002ee4:	4b56      	ldr	r3, [pc, #344]	; (8003040 <main+0x113c>)
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	2b17      	cmp	r3, #23
 8002eea:	d902      	bls.n	8002ef2 <main+0xfee>
						{
						  savealarmhour = 23;
 8002eec:	4b54      	ldr	r3, [pc, #336]	; (8003040 <main+0x113c>)
 8002eee:	2217      	movs	r2, #23
 8002ef0:	801a      	strh	r2, [r3, #0]
						}
					}
			lcd_clear(&p_lcd);
 8002ef2:	4848      	ldr	r0, [pc, #288]	; (8003014 <main+0x1110>)
 8002ef4:	f7fe fa55 	bl	80013a2 <lcd_clear>
			lcd_set_cursor(&p_lcd, 2, 0);
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2102      	movs	r1, #2
 8002efc:	4845      	ldr	r0, [pc, #276]	; (8003014 <main+0x1110>)
 8002efe:	f7fe fa0f 	bl	8001320 <lcd_set_cursor>
			sprintf(time, " +%02d:%02d",  savealarmhour, savealarmmin);
 8002f02:	4b4f      	ldr	r3, [pc, #316]	; (8003040 <main+0x113c>)
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	4b4e      	ldr	r3, [pc, #312]	; (8003044 <main+0x1140>)
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	494e      	ldr	r1, [pc, #312]	; (8003048 <main+0x1144>)
 8002f0e:	484f      	ldr	r0, [pc, #316]	; (800304c <main+0x1148>)
 8002f10:	f004 f82a 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 8002f14:	494d      	ldr	r1, [pc, #308]	; (800304c <main+0x1148>)
 8002f16:	483f      	ldr	r0, [pc, #252]	; (8003014 <main+0x1110>)
 8002f18:	f7fe fa2c 	bl	8001374 <lcd_send_string>
			HAL_Delay(300);
 8002f1c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002f20:	f001 f890 	bl	8004044 <HAL_Delay>
			break;
 8002f24:	f000 bc16 	b.w	8003754 <main+0x1850>


		 case ALARM_MIN:
			 if (trangthai < counter)
 8002f28:	4b43      	ldr	r3, [pc, #268]	; (8003038 <main+0x1134>)
 8002f2a:	781a      	ldrb	r2, [r3, #0]
 8002f2c:	4b43      	ldr	r3, [pc, #268]	; (800303c <main+0x1138>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d215      	bcs.n	8002f60 <main+0x105c>
					{
					  trangthai = counter;
 8002f34:	4b41      	ldr	r3, [pc, #260]	; (800303c <main+0x1138>)
 8002f36:	781a      	ldrb	r2, [r3, #0]
 8002f38:	4b3f      	ldr	r3, [pc, #252]	; (8003038 <main+0x1134>)
 8002f3a:	701a      	strb	r2, [r3, #0]
					  savealarmmin++;
 8002f3c:	4b41      	ldr	r3, [pc, #260]	; (8003044 <main+0x1140>)
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	3301      	adds	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	4b3f      	ldr	r3, [pc, #252]	; (8003044 <main+0x1140>)
 8002f46:	801a      	strh	r2, [r3, #0]
							if (savealarmmin > 59)
 8002f48:	4b3e      	ldr	r3, [pc, #248]	; (8003044 <main+0x1140>)
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	2b3b      	cmp	r3, #59	; 0x3b
 8002f4e:	d902      	bls.n	8002f56 <main+0x1052>
								{
								savealarmmin = 0;
 8002f50:	4b3c      	ldr	r3, [pc, #240]	; (8003044 <main+0x1140>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	801a      	strh	r2, [r3, #0]
								}
						trangthai = counter;
 8002f56:	4b39      	ldr	r3, [pc, #228]	; (800303c <main+0x1138>)
 8002f58:	781a      	ldrb	r2, [r3, #0]
 8002f5a:	4b37      	ldr	r3, [pc, #220]	; (8003038 <main+0x1134>)
 8002f5c:	701a      	strb	r2, [r3, #0]
 8002f5e:	e013      	b.n	8002f88 <main+0x1084>
					}
			  else if (trangthai > counter)
 8002f60:	4b35      	ldr	r3, [pc, #212]	; (8003038 <main+0x1134>)
 8002f62:	781a      	ldrb	r2, [r3, #0]
 8002f64:	4b35      	ldr	r3, [pc, #212]	; (800303c <main+0x1138>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d90d      	bls.n	8002f88 <main+0x1084>
					{
						trangthai = counter;
 8002f6c:	4b33      	ldr	r3, [pc, #204]	; (800303c <main+0x1138>)
 8002f6e:	781a      	ldrb	r2, [r3, #0]
 8002f70:	4b31      	ldr	r3, [pc, #196]	; (8003038 <main+0x1134>)
 8002f72:	701a      	strb	r2, [r3, #0]
						savealarmmin--;
 8002f74:	4b33      	ldr	r3, [pc, #204]	; (8003044 <main+0x1140>)
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	4b31      	ldr	r3, [pc, #196]	; (8003044 <main+0x1140>)
 8002f7e:	801a      	strh	r2, [r3, #0]
						if (savealarmmin < 0)
							{
							savealarmmin = 59;
							}
						trangthai = counter;
 8002f80:	4b2e      	ldr	r3, [pc, #184]	; (800303c <main+0x1138>)
 8002f82:	781a      	ldrb	r2, [r3, #0]
 8002f84:	4b2c      	ldr	r3, [pc, #176]	; (8003038 <main+0x1134>)
 8002f86:	701a      	strb	r2, [r3, #0]
					}
			  if (trangthai = counter)
 8002f88:	4b2c      	ldr	r3, [pc, #176]	; (800303c <main+0x1138>)
 8002f8a:	781a      	ldrb	r2, [r3, #0]
 8002f8c:	4b2a      	ldr	r3, [pc, #168]	; (8003038 <main+0x1134>)
 8002f8e:	701a      	strb	r2, [r3, #0]
 8002f90:	4b29      	ldr	r3, [pc, #164]	; (8003038 <main+0x1134>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d006      	beq.n	8002fa6 <main+0x10a2>
					{
					  if (savealarmmin > 59)
 8002f98:	4b2a      	ldr	r3, [pc, #168]	; (8003044 <main+0x1140>)
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	2b3b      	cmp	r3, #59	; 0x3b
 8002f9e:	d902      	bls.n	8002fa6 <main+0x10a2>
						{
						  savealarmmin = 59;
 8002fa0:	4b28      	ldr	r3, [pc, #160]	; (8003044 <main+0x1140>)
 8002fa2:	223b      	movs	r2, #59	; 0x3b
 8002fa4:	801a      	strh	r2, [r3, #0]
						}
					}
			lcd_clear(&p_lcd);
 8002fa6:	481b      	ldr	r0, [pc, #108]	; (8003014 <main+0x1110>)
 8002fa8:	f7fe f9fb 	bl	80013a2 <lcd_clear>
			lcd_set_cursor(&p_lcd, 2, 0);
 8002fac:	2200      	movs	r2, #0
 8002fae:	2102      	movs	r1, #2
 8002fb0:	4818      	ldr	r0, [pc, #96]	; (8003014 <main+0x1110>)
 8002fb2:	f7fe f9b5 	bl	8001320 <lcd_set_cursor>
			sprintf(time, "  %02d:+%02d", savealarmhour, savealarmmin);
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <main+0x113c>)
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4b21      	ldr	r3, [pc, #132]	; (8003044 <main+0x1140>)
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	4923      	ldr	r1, [pc, #140]	; (8003050 <main+0x114c>)
 8002fc2:	4822      	ldr	r0, [pc, #136]	; (800304c <main+0x1148>)
 8002fc4:	f003 ffd0 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 8002fc8:	4920      	ldr	r1, [pc, #128]	; (800304c <main+0x1148>)
 8002fca:	4812      	ldr	r0, [pc, #72]	; (8003014 <main+0x1110>)
 8002fcc:	f7fe f9d2 	bl	8001374 <lcd_send_string>
		    HAL_Delay(300);
 8002fd0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002fd4:	f001 f836 	bl	8004044 <HAL_Delay>
			break;
 8002fd8:	e3bc      	b.n	8003754 <main+0x1850>



		 case ALARM_DAY:
			 if (trangthai < counter)
 8002fda:	4b17      	ldr	r3, [pc, #92]	; (8003038 <main+0x1134>)
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	4b17      	ldr	r3, [pc, #92]	; (800303c <main+0x1138>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d238      	bcs.n	8003058 <main+0x1154>
					{
					  trangthai = counter;
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <main+0x1138>)
 8002fe8:	781a      	ldrb	r2, [r3, #0]
 8002fea:	4b13      	ldr	r3, [pc, #76]	; (8003038 <main+0x1134>)
 8002fec:	701a      	strb	r2, [r3, #0]
					  alarmday++;
 8002fee:	4b19      	ldr	r3, [pc, #100]	; (8003054 <main+0x1150>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	4a17      	ldr	r2, [pc, #92]	; (8003054 <main+0x1150>)
 8002ff6:	6013      	str	r3, [r2, #0]
							if (alarmday > 7)
 8002ff8:	4b16      	ldr	r3, [pc, #88]	; (8003054 <main+0x1150>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b07      	cmp	r3, #7
 8002ffe:	d902      	bls.n	8003006 <main+0x1102>
								{
								alarmday = 1;
 8003000:	4b14      	ldr	r3, [pc, #80]	; (8003054 <main+0x1150>)
 8003002:	2201      	movs	r2, #1
 8003004:	601a      	str	r2, [r3, #0]
								}
						trangthai = counter;
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <main+0x1138>)
 8003008:	781a      	ldrb	r2, [r3, #0]
 800300a:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <main+0x1134>)
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	e03d      	b.n	800308c <main+0x1188>
 8003010:	2000021a 	.word	0x2000021a
 8003014:	2000020c 	.word	0x2000020c
 8003018:	20000262 	.word	0x20000262
 800301c:	20000263 	.word	0x20000263
 8003020:	08007a08 	.word	0x08007a08
 8003024:	20000280 	.word	0x20000280
 8003028:	20000260 	.word	0x20000260
 800302c:	20000261 	.word	0x20000261
 8003030:	08007a1c 	.word	0x08007a1c
 8003034:	20000218 	.word	0x20000218
 8003038:	2000024d 	.word	0x2000024d
 800303c:	2000024c 	.word	0x2000024c
 8003040:	2000022e 	.word	0x2000022e
 8003044:	2000022c 	.word	0x2000022c
 8003048:	08007a2c 	.word	0x08007a2c
 800304c:	2000021c 	.word	0x2000021c
 8003050:	08007a38 	.word	0x08007a38
 8003054:	20000230 	.word	0x20000230
					}
			  else if (trangthai > counter)
 8003058:	4b7e      	ldr	r3, [pc, #504]	; (8003254 <main+0x1350>)
 800305a:	781a      	ldrb	r2, [r3, #0]
 800305c:	4b7e      	ldr	r3, [pc, #504]	; (8003258 <main+0x1354>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d913      	bls.n	800308c <main+0x1188>
					{
						trangthai = counter;
 8003064:	4b7c      	ldr	r3, [pc, #496]	; (8003258 <main+0x1354>)
 8003066:	781a      	ldrb	r2, [r3, #0]
 8003068:	4b7a      	ldr	r3, [pc, #488]	; (8003254 <main+0x1350>)
 800306a:	701a      	strb	r2, [r3, #0]
						alarmday--;
 800306c:	4b7b      	ldr	r3, [pc, #492]	; (800325c <main+0x1358>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3b01      	subs	r3, #1
 8003072:	4a7a      	ldr	r2, [pc, #488]	; (800325c <main+0x1358>)
 8003074:	6013      	str	r3, [r2, #0]
						if (alarmday < 1)
 8003076:	4b79      	ldr	r3, [pc, #484]	; (800325c <main+0x1358>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d102      	bne.n	8003084 <main+0x1180>
							{
							alarmday = 7;
 800307e:	4b77      	ldr	r3, [pc, #476]	; (800325c <main+0x1358>)
 8003080:	2207      	movs	r2, #7
 8003082:	601a      	str	r2, [r3, #0]
							}
						trangthai = counter;
 8003084:	4b74      	ldr	r3, [pc, #464]	; (8003258 <main+0x1354>)
 8003086:	781a      	ldrb	r2, [r3, #0]
 8003088:	4b72      	ldr	r3, [pc, #456]	; (8003254 <main+0x1350>)
 800308a:	701a      	strb	r2, [r3, #0]
					}
			  if (trangthai = counter)
 800308c:	4b72      	ldr	r3, [pc, #456]	; (8003258 <main+0x1354>)
 800308e:	781a      	ldrb	r2, [r3, #0]
 8003090:	4b70      	ldr	r3, [pc, #448]	; (8003254 <main+0x1350>)
 8003092:	701a      	strb	r2, [r3, #0]
 8003094:	4b6f      	ldr	r3, [pc, #444]	; (8003254 <main+0x1350>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <main+0x11a6>
					{
					  if (alarmday > 7)
 800309c:	4b6f      	ldr	r3, [pc, #444]	; (800325c <main+0x1358>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b07      	cmp	r3, #7
 80030a2:	d902      	bls.n	80030aa <main+0x11a6>
						{
						  alarmday = 7;
 80030a4:	4b6d      	ldr	r3, [pc, #436]	; (800325c <main+0x1358>)
 80030a6:	2207      	movs	r2, #7
 80030a8:	601a      	str	r2, [r3, #0]
						}
					}
			lcd_clear(&p_lcd);
 80030aa:	486d      	ldr	r0, [pc, #436]	; (8003260 <main+0x135c>)
 80030ac:	f7fe f979 	bl	80013a2 <lcd_clear>
			if (alarmday == 1)
 80030b0:	4b6a      	ldr	r3, [pc, #424]	; (800325c <main+0x1358>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d115      	bne.n	80030e4 <main+0x11e0>
			{
			lcd_set_cursor(&p_lcd, 0, 0);
 80030b8:	2200      	movs	r2, #0
 80030ba:	2100      	movs	r1, #0
 80030bc:	4868      	ldr	r0, [pc, #416]	; (8003260 <main+0x135c>)
 80030be:	f7fe f92f 	bl	8001320 <lcd_set_cursor>
			sprintf(time, "CN %d-%d-20%d", alarmdate, alarmmonth, alarmyear);
 80030c2:	4b68      	ldr	r3, [pc, #416]	; (8003264 <main+0x1360>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4b68      	ldr	r3, [pc, #416]	; (8003268 <main+0x1364>)
 80030c8:	6819      	ldr	r1, [r3, #0]
 80030ca:	4b68      	ldr	r3, [pc, #416]	; (800326c <main+0x1368>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	460b      	mov	r3, r1
 80030d2:	4967      	ldr	r1, [pc, #412]	; (8003270 <main+0x136c>)
 80030d4:	4867      	ldr	r0, [pc, #412]	; (8003274 <main+0x1370>)
 80030d6:	f003 ff47 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 80030da:	4966      	ldr	r1, [pc, #408]	; (8003274 <main+0x1370>)
 80030dc:	4860      	ldr	r0, [pc, #384]	; (8003260 <main+0x135c>)
 80030de:	f7fe f949 	bl	8001374 <lcd_send_string>
 80030e2:	e018      	b.n	8003116 <main+0x1212>
			}
			else
			{
			lcd_set_cursor(&p_lcd, 0, 0);
 80030e4:	2200      	movs	r2, #0
 80030e6:	2100      	movs	r1, #0
 80030e8:	485d      	ldr	r0, [pc, #372]	; (8003260 <main+0x135c>)
 80030ea:	f7fe f919 	bl	8001320 <lcd_set_cursor>
			sprintf(time, "Thu +%d %d-%d-20%d", alarmday, alarmdate, alarmmonth, alarmyear);
 80030ee:	4b5b      	ldr	r3, [pc, #364]	; (800325c <main+0x1358>)
 80030f0:	6819      	ldr	r1, [r3, #0]
 80030f2:	4b5c      	ldr	r3, [pc, #368]	; (8003264 <main+0x1360>)
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	4b5c      	ldr	r3, [pc, #368]	; (8003268 <main+0x1364>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a5c      	ldr	r2, [pc, #368]	; (800326c <main+0x1368>)
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	9201      	str	r2, [sp, #4]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	4603      	mov	r3, r0
 8003104:	460a      	mov	r2, r1
 8003106:	495c      	ldr	r1, [pc, #368]	; (8003278 <main+0x1374>)
 8003108:	485a      	ldr	r0, [pc, #360]	; (8003274 <main+0x1370>)
 800310a:	f003 ff2d 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 800310e:	4959      	ldr	r1, [pc, #356]	; (8003274 <main+0x1370>)
 8003110:	4853      	ldr	r0, [pc, #332]	; (8003260 <main+0x135c>)
 8003112:	f7fe f92f 	bl	8001374 <lcd_send_string>
			}
			HAL_Delay(300);
 8003116:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800311a:	f000 ff93 	bl	8004044 <HAL_Delay>
			break;
 800311e:	e319      	b.n	8003754 <main+0x1850>


		 case ALARM_YEAR:
			 if (trangthai < counter)
 8003120:	4b4c      	ldr	r3, [pc, #304]	; (8003254 <main+0x1350>)
 8003122:	781a      	ldrb	r2, [r3, #0]
 8003124:	4b4c      	ldr	r3, [pc, #304]	; (8003258 <main+0x1354>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d214      	bcs.n	8003156 <main+0x1252>
					{
					  trangthai = counter;
 800312c:	4b4a      	ldr	r3, [pc, #296]	; (8003258 <main+0x1354>)
 800312e:	781a      	ldrb	r2, [r3, #0]
 8003130:	4b48      	ldr	r3, [pc, #288]	; (8003254 <main+0x1350>)
 8003132:	701a      	strb	r2, [r3, #0]
					  alarmyear++;
 8003134:	4b4d      	ldr	r3, [pc, #308]	; (800326c <main+0x1368>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	4a4c      	ldr	r2, [pc, #304]	; (800326c <main+0x1368>)
 800313c:	6013      	str	r3, [r2, #0]
							if (alarmyear > 30)
 800313e:	4b4b      	ldr	r3, [pc, #300]	; (800326c <main+0x1368>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b1e      	cmp	r3, #30
 8003144:	d902      	bls.n	800314c <main+0x1248>
								{
								alarmyear = 24;
 8003146:	4b49      	ldr	r3, [pc, #292]	; (800326c <main+0x1368>)
 8003148:	2218      	movs	r2, #24
 800314a:	601a      	str	r2, [r3, #0]
								}
						trangthai = counter;
 800314c:	4b42      	ldr	r3, [pc, #264]	; (8003258 <main+0x1354>)
 800314e:	781a      	ldrb	r2, [r3, #0]
 8003150:	4b40      	ldr	r3, [pc, #256]	; (8003254 <main+0x1350>)
 8003152:	701a      	strb	r2, [r3, #0]
 8003154:	e019      	b.n	800318a <main+0x1286>
					}
			  else if (trangthai > counter)
 8003156:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <main+0x1350>)
 8003158:	781a      	ldrb	r2, [r3, #0]
 800315a:	4b3f      	ldr	r3, [pc, #252]	; (8003258 <main+0x1354>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d913      	bls.n	800318a <main+0x1286>
					{
						trangthai = counter;
 8003162:	4b3d      	ldr	r3, [pc, #244]	; (8003258 <main+0x1354>)
 8003164:	781a      	ldrb	r2, [r3, #0]
 8003166:	4b3b      	ldr	r3, [pc, #236]	; (8003254 <main+0x1350>)
 8003168:	701a      	strb	r2, [r3, #0]
						alarmyear--;
 800316a:	4b40      	ldr	r3, [pc, #256]	; (800326c <main+0x1368>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	3b01      	subs	r3, #1
 8003170:	4a3e      	ldr	r2, [pc, #248]	; (800326c <main+0x1368>)
 8003172:	6013      	str	r3, [r2, #0]
						if (alarmyear < 24)
 8003174:	4b3d      	ldr	r3, [pc, #244]	; (800326c <main+0x1368>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b17      	cmp	r3, #23
 800317a:	d802      	bhi.n	8003182 <main+0x127e>
							{
							alarmyear = 30;
 800317c:	4b3b      	ldr	r3, [pc, #236]	; (800326c <main+0x1368>)
 800317e:	221e      	movs	r2, #30
 8003180:	601a      	str	r2, [r3, #0]
							}
						trangthai = counter;
 8003182:	4b35      	ldr	r3, [pc, #212]	; (8003258 <main+0x1354>)
 8003184:	781a      	ldrb	r2, [r3, #0]
 8003186:	4b33      	ldr	r3, [pc, #204]	; (8003254 <main+0x1350>)
 8003188:	701a      	strb	r2, [r3, #0]
					}
			  if (trangthai = counter)
 800318a:	4b33      	ldr	r3, [pc, #204]	; (8003258 <main+0x1354>)
 800318c:	781a      	ldrb	r2, [r3, #0]
 800318e:	4b31      	ldr	r3, [pc, #196]	; (8003254 <main+0x1350>)
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	4b30      	ldr	r3, [pc, #192]	; (8003254 <main+0x1350>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d006      	beq.n	80031a8 <main+0x12a4>
					{
					  if (alarmyear > 30)
 800319a:	4b34      	ldr	r3, [pc, #208]	; (800326c <main+0x1368>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b1e      	cmp	r3, #30
 80031a0:	d902      	bls.n	80031a8 <main+0x12a4>
						{
						  alarmyear = 30;
 80031a2:	4b32      	ldr	r3, [pc, #200]	; (800326c <main+0x1368>)
 80031a4:	221e      	movs	r2, #30
 80031a6:	601a      	str	r2, [r3, #0]
						}
					}
			lcd_clear(&p_lcd);
 80031a8:	482d      	ldr	r0, [pc, #180]	; (8003260 <main+0x135c>)
 80031aa:	f7fe f8fa 	bl	80013a2 <lcd_clear>
			if (alarmday == 1)
 80031ae:	4b2b      	ldr	r3, [pc, #172]	; (800325c <main+0x1358>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d115      	bne.n	80031e2 <main+0x12de>
			{
			lcd_set_cursor(&p_lcd, 0, 0);
 80031b6:	2200      	movs	r2, #0
 80031b8:	2100      	movs	r1, #0
 80031ba:	4829      	ldr	r0, [pc, #164]	; (8003260 <main+0x135c>)
 80031bc:	f7fe f8b0 	bl	8001320 <lcd_set_cursor>
			sprintf(time, "CN %d-%d-20+%d" , alarmdate, alarmmonth, alarmyear);
 80031c0:	4b28      	ldr	r3, [pc, #160]	; (8003264 <main+0x1360>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4b28      	ldr	r3, [pc, #160]	; (8003268 <main+0x1364>)
 80031c6:	6819      	ldr	r1, [r3, #0]
 80031c8:	4b28      	ldr	r3, [pc, #160]	; (800326c <main+0x1368>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	460b      	mov	r3, r1
 80031d0:	492a      	ldr	r1, [pc, #168]	; (800327c <main+0x1378>)
 80031d2:	4828      	ldr	r0, [pc, #160]	; (8003274 <main+0x1370>)
 80031d4:	f003 fec8 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 80031d8:	4926      	ldr	r1, [pc, #152]	; (8003274 <main+0x1370>)
 80031da:	4821      	ldr	r0, [pc, #132]	; (8003260 <main+0x135c>)
 80031dc:	f7fe f8ca 	bl	8001374 <lcd_send_string>
 80031e0:	e018      	b.n	8003214 <main+0x1310>
			}
			else
			{
			lcd_set_cursor(&p_lcd, 0, 0);
 80031e2:	2200      	movs	r2, #0
 80031e4:	2100      	movs	r1, #0
 80031e6:	481e      	ldr	r0, [pc, #120]	; (8003260 <main+0x135c>)
 80031e8:	f7fe f89a 	bl	8001320 <lcd_set_cursor>
			sprintf(time, "Thu %d %d-%d-20+%d", alarmday, alarmdate, alarmmonth, alarmyear);
 80031ec:	4b1b      	ldr	r3, [pc, #108]	; (800325c <main+0x1358>)
 80031ee:	6819      	ldr	r1, [r3, #0]
 80031f0:	4b1c      	ldr	r3, [pc, #112]	; (8003264 <main+0x1360>)
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <main+0x1364>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1c      	ldr	r2, [pc, #112]	; (800326c <main+0x1368>)
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	9201      	str	r2, [sp, #4]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	4603      	mov	r3, r0
 8003202:	460a      	mov	r2, r1
 8003204:	491e      	ldr	r1, [pc, #120]	; (8003280 <main+0x137c>)
 8003206:	481b      	ldr	r0, [pc, #108]	; (8003274 <main+0x1370>)
 8003208:	f003 feae 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 800320c:	4919      	ldr	r1, [pc, #100]	; (8003274 <main+0x1370>)
 800320e:	4814      	ldr	r0, [pc, #80]	; (8003260 <main+0x135c>)
 8003210:	f7fe f8b0 	bl	8001374 <lcd_send_string>
			}
			HAL_Delay(300);
 8003214:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003218:	f000 ff14 	bl	8004044 <HAL_Delay>
			break;
 800321c:	e29a      	b.n	8003754 <main+0x1850>


		 case ALARM_MONTH:
	  if (trangthai < counter)
 800321e:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <main+0x1350>)
 8003220:	781a      	ldrb	r2, [r3, #0]
 8003222:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <main+0x1354>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d22c      	bcs.n	8003284 <main+0x1380>
			{
			  trangthai = counter;
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <main+0x1354>)
 800322c:	781a      	ldrb	r2, [r3, #0]
 800322e:	4b09      	ldr	r3, [pc, #36]	; (8003254 <main+0x1350>)
 8003230:	701a      	strb	r2, [r3, #0]
			  alarmmonth++;
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <main+0x1364>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3301      	adds	r3, #1
 8003238:	4a0b      	ldr	r2, [pc, #44]	; (8003268 <main+0x1364>)
 800323a:	6013      	str	r3, [r2, #0]
					if (alarmmonth > 12)
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <main+0x1364>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b0c      	cmp	r3, #12
 8003242:	d902      	bls.n	800324a <main+0x1346>
						{
						alarmmonth = 1;
 8003244:	4b08      	ldr	r3, [pc, #32]	; (8003268 <main+0x1364>)
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]
						}
				trangthai = counter;
 800324a:	4b03      	ldr	r3, [pc, #12]	; (8003258 <main+0x1354>)
 800324c:	781a      	ldrb	r2, [r3, #0]
 800324e:	4b01      	ldr	r3, [pc, #4]	; (8003254 <main+0x1350>)
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	e031      	b.n	80032b8 <main+0x13b4>
 8003254:	2000024d 	.word	0x2000024d
 8003258:	2000024c 	.word	0x2000024c
 800325c:	20000230 	.word	0x20000230
 8003260:	2000020c 	.word	0x2000020c
 8003264:	20000234 	.word	0x20000234
 8003268:	20000238 	.word	0x20000238
 800326c:	2000023c 	.word	0x2000023c
 8003270:	080078e4 	.word	0x080078e4
 8003274:	2000021c 	.word	0x2000021c
 8003278:	08007a48 	.word	0x08007a48
 800327c:	08007a5c 	.word	0x08007a5c
 8003280:	08007a6c 	.word	0x08007a6c
			}
	  else if (trangthai > counter)
 8003284:	4b7a      	ldr	r3, [pc, #488]	; (8003470 <main+0x156c>)
 8003286:	781a      	ldrb	r2, [r3, #0]
 8003288:	4b7a      	ldr	r3, [pc, #488]	; (8003474 <main+0x1570>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d913      	bls.n	80032b8 <main+0x13b4>
			{
				trangthai = counter;
 8003290:	4b78      	ldr	r3, [pc, #480]	; (8003474 <main+0x1570>)
 8003292:	781a      	ldrb	r2, [r3, #0]
 8003294:	4b76      	ldr	r3, [pc, #472]	; (8003470 <main+0x156c>)
 8003296:	701a      	strb	r2, [r3, #0]
				alarmmonth--;
 8003298:	4b77      	ldr	r3, [pc, #476]	; (8003478 <main+0x1574>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3b01      	subs	r3, #1
 800329e:	4a76      	ldr	r2, [pc, #472]	; (8003478 <main+0x1574>)
 80032a0:	6013      	str	r3, [r2, #0]
				if (alarmmonth < 1)
 80032a2:	4b75      	ldr	r3, [pc, #468]	; (8003478 <main+0x1574>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d102      	bne.n	80032b0 <main+0x13ac>
					{
					alarmmonth = 12;
 80032aa:	4b73      	ldr	r3, [pc, #460]	; (8003478 <main+0x1574>)
 80032ac:	220c      	movs	r2, #12
 80032ae:	601a      	str	r2, [r3, #0]
					}
				trangthai = counter;
 80032b0:	4b70      	ldr	r3, [pc, #448]	; (8003474 <main+0x1570>)
 80032b2:	781a      	ldrb	r2, [r3, #0]
 80032b4:	4b6e      	ldr	r3, [pc, #440]	; (8003470 <main+0x156c>)
 80032b6:	701a      	strb	r2, [r3, #0]
			}
	  if (trangthai = counter)
 80032b8:	4b6e      	ldr	r3, [pc, #440]	; (8003474 <main+0x1570>)
 80032ba:	781a      	ldrb	r2, [r3, #0]
 80032bc:	4b6c      	ldr	r3, [pc, #432]	; (8003470 <main+0x156c>)
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	4b6b      	ldr	r3, [pc, #428]	; (8003470 <main+0x156c>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d006      	beq.n	80032d6 <main+0x13d2>
			{
			  if (alarmmonth > 12)
 80032c8:	4b6b      	ldr	r3, [pc, #428]	; (8003478 <main+0x1574>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b0c      	cmp	r3, #12
 80032ce:	d902      	bls.n	80032d6 <main+0x13d2>
				{
				  alarmmonth = 12;
 80032d0:	4b69      	ldr	r3, [pc, #420]	; (8003478 <main+0x1574>)
 80032d2:	220c      	movs	r2, #12
 80032d4:	601a      	str	r2, [r3, #0]
				}
			}
			lcd_clear(&p_lcd);
 80032d6:	4869      	ldr	r0, [pc, #420]	; (800347c <main+0x1578>)
 80032d8:	f7fe f863 	bl	80013a2 <lcd_clear>
			if (alarmday ==1)
 80032dc:	4b68      	ldr	r3, [pc, #416]	; (8003480 <main+0x157c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d115      	bne.n	8003310 <main+0x140c>
			{
			lcd_set_cursor(&p_lcd, 0, 0);
 80032e4:	2200      	movs	r2, #0
 80032e6:	2100      	movs	r1, #0
 80032e8:	4864      	ldr	r0, [pc, #400]	; (800347c <main+0x1578>)
 80032ea:	f7fe f819 	bl	8001320 <lcd_set_cursor>
			sprintf(time, "CN %d-+%d-20%d" , alarmdate, alarmmonth, alarmyear);
 80032ee:	4b65      	ldr	r3, [pc, #404]	; (8003484 <main+0x1580>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	4b61      	ldr	r3, [pc, #388]	; (8003478 <main+0x1574>)
 80032f4:	6819      	ldr	r1, [r3, #0]
 80032f6:	4b64      	ldr	r3, [pc, #400]	; (8003488 <main+0x1584>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	460b      	mov	r3, r1
 80032fe:	4963      	ldr	r1, [pc, #396]	; (800348c <main+0x1588>)
 8003300:	4863      	ldr	r0, [pc, #396]	; (8003490 <main+0x158c>)
 8003302:	f003 fe31 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 8003306:	4962      	ldr	r1, [pc, #392]	; (8003490 <main+0x158c>)
 8003308:	485c      	ldr	r0, [pc, #368]	; (800347c <main+0x1578>)
 800330a:	f7fe f833 	bl	8001374 <lcd_send_string>
 800330e:	e018      	b.n	8003342 <main+0x143e>
			}
			else
			{
			lcd_set_cursor(&p_lcd, 0, 0);
 8003310:	2200      	movs	r2, #0
 8003312:	2100      	movs	r1, #0
 8003314:	4859      	ldr	r0, [pc, #356]	; (800347c <main+0x1578>)
 8003316:	f7fe f803 	bl	8001320 <lcd_set_cursor>
			sprintf(time, "Thu %d %d-+%d-20%d", alarmday, alarmdate, alarmmonth, alarmyear);
 800331a:	4b59      	ldr	r3, [pc, #356]	; (8003480 <main+0x157c>)
 800331c:	6819      	ldr	r1, [r3, #0]
 800331e:	4b59      	ldr	r3, [pc, #356]	; (8003484 <main+0x1580>)
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	4b55      	ldr	r3, [pc, #340]	; (8003478 <main+0x1574>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a58      	ldr	r2, [pc, #352]	; (8003488 <main+0x1584>)
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	9201      	str	r2, [sp, #4]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	4603      	mov	r3, r0
 8003330:	460a      	mov	r2, r1
 8003332:	4958      	ldr	r1, [pc, #352]	; (8003494 <main+0x1590>)
 8003334:	4856      	ldr	r0, [pc, #344]	; (8003490 <main+0x158c>)
 8003336:	f003 fe17 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 800333a:	4955      	ldr	r1, [pc, #340]	; (8003490 <main+0x158c>)
 800333c:	484f      	ldr	r0, [pc, #316]	; (800347c <main+0x1578>)
 800333e:	f7fe f819 	bl	8001374 <lcd_send_string>
			}
			HAL_Delay(300);
 8003342:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003346:	f000 fe7d 	bl	8004044 <HAL_Delay>
			break;
 800334a:	e203      	b.n	8003754 <main+0x1850>


		 case ALARM_DATE:
			 if (trangthai < counter)
 800334c:	4b48      	ldr	r3, [pc, #288]	; (8003470 <main+0x156c>)
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	4b48      	ldr	r3, [pc, #288]	; (8003474 <main+0x1570>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	f080 809f 	bcs.w	8003498 <main+0x1594>
					{
					  trangthai = counter;
 800335a:	4b46      	ldr	r3, [pc, #280]	; (8003474 <main+0x1570>)
 800335c:	781a      	ldrb	r2, [r3, #0]
 800335e:	4b44      	ldr	r3, [pc, #272]	; (8003470 <main+0x156c>)
 8003360:	701a      	strb	r2, [r3, #0]
					  alarmdate++;
 8003362:	4b48      	ldr	r3, [pc, #288]	; (8003484 <main+0x1580>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3301      	adds	r3, #1
 8003368:	4a46      	ldr	r2, [pc, #280]	; (8003484 <main+0x1580>)
 800336a:	6013      	str	r3, [r2, #0]
						  if (alarmmonth == 1
 800336c:	4b42      	ldr	r3, [pc, #264]	; (8003478 <main+0x1574>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d017      	beq.n	80033a4 <main+0x14a0>
								|| alarmmonth == 3
 8003374:	4b40      	ldr	r3, [pc, #256]	; (8003478 <main+0x1574>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b03      	cmp	r3, #3
 800337a:	d013      	beq.n	80033a4 <main+0x14a0>
								|| alarmmonth == 5
 800337c:	4b3e      	ldr	r3, [pc, #248]	; (8003478 <main+0x1574>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b05      	cmp	r3, #5
 8003382:	d00f      	beq.n	80033a4 <main+0x14a0>
								|| alarmmonth == 7
 8003384:	4b3c      	ldr	r3, [pc, #240]	; (8003478 <main+0x1574>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b07      	cmp	r3, #7
 800338a:	d00b      	beq.n	80033a4 <main+0x14a0>
								|| alarmmonth == 8
 800338c:	4b3a      	ldr	r3, [pc, #232]	; (8003478 <main+0x1574>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b08      	cmp	r3, #8
 8003392:	d007      	beq.n	80033a4 <main+0x14a0>
								|| alarmmonth == 10
 8003394:	4b38      	ldr	r3, [pc, #224]	; (8003478 <main+0x1574>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b0a      	cmp	r3, #10
 800339a:	d003      	beq.n	80033a4 <main+0x14a0>
								|| alarmmonth == 12 )
 800339c:	4b36      	ldr	r3, [pc, #216]	; (8003478 <main+0x1574>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b0c      	cmp	r3, #12
 80033a2:	d106      	bne.n	80033b2 <main+0x14ae>
							{
							if (alarmdate > 31)
 80033a4:	4b37      	ldr	r3, [pc, #220]	; (8003484 <main+0x1580>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b1f      	cmp	r3, #31
 80033aa:	d902      	bls.n	80033b2 <main+0x14ae>
								{
								alarmdate = 1;
 80033ac:	4b35      	ldr	r3, [pc, #212]	; (8003484 <main+0x1580>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
								}
							}
						if (alarmmonth == 2 && alarmyear == 24)
 80033b2:	4b31      	ldr	r3, [pc, #196]	; (8003478 <main+0x1574>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d10b      	bne.n	80033d2 <main+0x14ce>
 80033ba:	4b33      	ldr	r3, [pc, #204]	; (8003488 <main+0x1584>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b18      	cmp	r3, #24
 80033c0:	d107      	bne.n	80033d2 <main+0x14ce>
							{
							if (alarmdate > 29)
 80033c2:	4b30      	ldr	r3, [pc, #192]	; (8003484 <main+0x1580>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b1d      	cmp	r3, #29
 80033c8:	d932      	bls.n	8003430 <main+0x152c>
								{
								alarmdate = 1;
 80033ca:	4b2e      	ldr	r3, [pc, #184]	; (8003484 <main+0x1580>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
							if (alarmdate > 29)
 80033d0:	e02e      	b.n	8003430 <main+0x152c>
								}
							}
						else if (alarmmonth == 2 && alarmyear == 28)
 80033d2:	4b29      	ldr	r3, [pc, #164]	; (8003478 <main+0x1574>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d10b      	bne.n	80033f2 <main+0x14ee>
 80033da:	4b2b      	ldr	r3, [pc, #172]	; (8003488 <main+0x1584>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b1c      	cmp	r3, #28
 80033e0:	d107      	bne.n	80033f2 <main+0x14ee>
							{
							if (alarmdate > 29)
 80033e2:	4b28      	ldr	r3, [pc, #160]	; (8003484 <main+0x1580>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b1d      	cmp	r3, #29
 80033e8:	d922      	bls.n	8003430 <main+0x152c>
								{
								alarmdate = 1;
 80033ea:	4b26      	ldr	r3, [pc, #152]	; (8003484 <main+0x1580>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
							if (alarmdate > 29)
 80033f0:	e01e      	b.n	8003430 <main+0x152c>
								}
							}
						else if (alarmmonth == 2 && alarmyear != 24)
 80033f2:	4b21      	ldr	r3, [pc, #132]	; (8003478 <main+0x1574>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d10b      	bne.n	8003412 <main+0x150e>
 80033fa:	4b23      	ldr	r3, [pc, #140]	; (8003488 <main+0x1584>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b18      	cmp	r3, #24
 8003400:	d007      	beq.n	8003412 <main+0x150e>
							{
							if (alarmdate > 28)
 8003402:	4b20      	ldr	r3, [pc, #128]	; (8003484 <main+0x1580>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b1c      	cmp	r3, #28
 8003408:	d912      	bls.n	8003430 <main+0x152c>
								{
								alarmdate = 1;
 800340a:	4b1e      	ldr	r3, [pc, #120]	; (8003484 <main+0x1580>)
 800340c:	2201      	movs	r2, #1
 800340e:	601a      	str	r2, [r3, #0]
							if (alarmdate > 28)
 8003410:	e00e      	b.n	8003430 <main+0x152c>
								}
							}
						else if (alarmmonth == 2 && alarmyear != 28)
 8003412:	4b19      	ldr	r3, [pc, #100]	; (8003478 <main+0x1574>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d10a      	bne.n	8003430 <main+0x152c>
 800341a:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <main+0x1584>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b1c      	cmp	r3, #28
 8003420:	d006      	beq.n	8003430 <main+0x152c>
							{
							if (alarmdate > 28)
 8003422:	4b18      	ldr	r3, [pc, #96]	; (8003484 <main+0x1580>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b1c      	cmp	r3, #28
 8003428:	d902      	bls.n	8003430 <main+0x152c>
								{
								alarmdate = 1;
 800342a:	4b16      	ldr	r3, [pc, #88]	; (8003484 <main+0x1580>)
 800342c:	2201      	movs	r2, #1
 800342e:	601a      	str	r2, [r3, #0]
								}
							}
						if (alarmmonth == 4
 8003430:	4b11      	ldr	r3, [pc, #68]	; (8003478 <main+0x1574>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b04      	cmp	r3, #4
 8003436:	d00f      	beq.n	8003458 <main+0x1554>
								|| alarmmonth == 6
 8003438:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <main+0x1574>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b06      	cmp	r3, #6
 800343e:	d00b      	beq.n	8003458 <main+0x1554>
								|| alarmmonth == 3
 8003440:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <main+0x1574>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b03      	cmp	r3, #3
 8003446:	d007      	beq.n	8003458 <main+0x1554>
								|| alarmmonth == 9
 8003448:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <main+0x1574>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b09      	cmp	r3, #9
 800344e:	d003      	beq.n	8003458 <main+0x1554>
								|| alarmmonth == 11)
 8003450:	4b09      	ldr	r3, [pc, #36]	; (8003478 <main+0x1574>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b0b      	cmp	r3, #11
 8003456:	d106      	bne.n	8003466 <main+0x1562>
							{
							if (alarmdate > 30)
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <main+0x1580>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b1e      	cmp	r3, #30
 800345e:	d902      	bls.n	8003466 <main+0x1562>
								{
								alarmdate = 1;
 8003460:	4b08      	ldr	r3, [pc, #32]	; (8003484 <main+0x1580>)
 8003462:	2201      	movs	r2, #1
 8003464:	601a      	str	r2, [r3, #0]
								}
							}
						trangthai = counter;
 8003466:	4b03      	ldr	r3, [pc, #12]	; (8003474 <main+0x1570>)
 8003468:	781a      	ldrb	r2, [r3, #0]
 800346a:	4b01      	ldr	r3, [pc, #4]	; (8003470 <main+0x156c>)
 800346c:	701a      	strb	r2, [r3, #0]
 800346e:	e0a4      	b.n	80035ba <main+0x16b6>
 8003470:	2000024d 	.word	0x2000024d
 8003474:	2000024c 	.word	0x2000024c
 8003478:	20000238 	.word	0x20000238
 800347c:	2000020c 	.word	0x2000020c
 8003480:	20000230 	.word	0x20000230
 8003484:	20000234 	.word	0x20000234
 8003488:	2000023c 	.word	0x2000023c
 800348c:	08007a80 	.word	0x08007a80
 8003490:	2000021c 	.word	0x2000021c
 8003494:	08007a90 	.word	0x08007a90
					}
			  else if (trangthai > counter)
 8003498:	4b76      	ldr	r3, [pc, #472]	; (8003674 <main+0x1770>)
 800349a:	781a      	ldrb	r2, [r3, #0]
 800349c:	4b76      	ldr	r3, [pc, #472]	; (8003678 <main+0x1774>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	f240 808a 	bls.w	80035ba <main+0x16b6>
					{
						trangthai = counter;
 80034a6:	4b74      	ldr	r3, [pc, #464]	; (8003678 <main+0x1774>)
 80034a8:	781a      	ldrb	r2, [r3, #0]
 80034aa:	4b72      	ldr	r3, [pc, #456]	; (8003674 <main+0x1770>)
 80034ac:	701a      	strb	r2, [r3, #0]
						alarmdate--;
 80034ae:	4b73      	ldr	r3, [pc, #460]	; (800367c <main+0x1778>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	4a71      	ldr	r2, [pc, #452]	; (800367c <main+0x1778>)
 80034b6:	6013      	str	r3, [r2, #0]
							  if (alarmmonth == 1
 80034b8:	4b71      	ldr	r3, [pc, #452]	; (8003680 <main+0x177c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d017      	beq.n	80034f0 <main+0x15ec>
									|| alarmmonth == 3
 80034c0:	4b6f      	ldr	r3, [pc, #444]	; (8003680 <main+0x177c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d013      	beq.n	80034f0 <main+0x15ec>
									|| alarmmonth == 5
 80034c8:	4b6d      	ldr	r3, [pc, #436]	; (8003680 <main+0x177c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b05      	cmp	r3, #5
 80034ce:	d00f      	beq.n	80034f0 <main+0x15ec>
									|| alarmmonth == 7
 80034d0:	4b6b      	ldr	r3, [pc, #428]	; (8003680 <main+0x177c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b07      	cmp	r3, #7
 80034d6:	d00b      	beq.n	80034f0 <main+0x15ec>
									|| alarmmonth == 8
 80034d8:	4b69      	ldr	r3, [pc, #420]	; (8003680 <main+0x177c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d007      	beq.n	80034f0 <main+0x15ec>
									|| alarmmonth == 10
 80034e0:	4b67      	ldr	r3, [pc, #412]	; (8003680 <main+0x177c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b0a      	cmp	r3, #10
 80034e6:	d003      	beq.n	80034f0 <main+0x15ec>
									|| alarmmonth == 12 )
 80034e8:	4b65      	ldr	r3, [pc, #404]	; (8003680 <main+0x177c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b0c      	cmp	r3, #12
 80034ee:	d106      	bne.n	80034fe <main+0x15fa>
								{
								if (alarmdate < 1)
 80034f0:	4b62      	ldr	r3, [pc, #392]	; (800367c <main+0x1778>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <main+0x15fa>
									{
									alarmdate = 31;
 80034f8:	4b60      	ldr	r3, [pc, #384]	; (800367c <main+0x1778>)
 80034fa:	221f      	movs	r2, #31
 80034fc:	601a      	str	r2, [r3, #0]
									}
								}
							if (alarmmonth == 2 && alarmyear == 24)
 80034fe:	4b60      	ldr	r3, [pc, #384]	; (8003680 <main+0x177c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d10b      	bne.n	800351e <main+0x161a>
 8003506:	4b5f      	ldr	r3, [pc, #380]	; (8003684 <main+0x1780>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b18      	cmp	r3, #24
 800350c:	d107      	bne.n	800351e <main+0x161a>
								{
								if (alarmdate < 1)
 800350e:	4b5b      	ldr	r3, [pc, #364]	; (800367c <main+0x1778>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d132      	bne.n	800357c <main+0x1678>
									{
									alarmdate = 29;
 8003516:	4b59      	ldr	r3, [pc, #356]	; (800367c <main+0x1778>)
 8003518:	221d      	movs	r2, #29
 800351a:	601a      	str	r2, [r3, #0]
								if (alarmdate < 1)
 800351c:	e02e      	b.n	800357c <main+0x1678>
									}
								}
							else if (alarmmonth == 2 && alarmyear == 28)
 800351e:	4b58      	ldr	r3, [pc, #352]	; (8003680 <main+0x177c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d10b      	bne.n	800353e <main+0x163a>
 8003526:	4b57      	ldr	r3, [pc, #348]	; (8003684 <main+0x1780>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b1c      	cmp	r3, #28
 800352c:	d107      	bne.n	800353e <main+0x163a>
								{
								if (alarmdate < 1)
 800352e:	4b53      	ldr	r3, [pc, #332]	; (800367c <main+0x1778>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d122      	bne.n	800357c <main+0x1678>
									{
									alarmdate = 29;
 8003536:	4b51      	ldr	r3, [pc, #324]	; (800367c <main+0x1778>)
 8003538:	221d      	movs	r2, #29
 800353a:	601a      	str	r2, [r3, #0]
								if (alarmdate < 1)
 800353c:	e01e      	b.n	800357c <main+0x1678>
									}
								}
							else if (alarmmonth == 2 && alarmyear != 24)
 800353e:	4b50      	ldr	r3, [pc, #320]	; (8003680 <main+0x177c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d10b      	bne.n	800355e <main+0x165a>
 8003546:	4b4f      	ldr	r3, [pc, #316]	; (8003684 <main+0x1780>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b18      	cmp	r3, #24
 800354c:	d007      	beq.n	800355e <main+0x165a>
								{
								if (alarmdate < 1)
 800354e:	4b4b      	ldr	r3, [pc, #300]	; (800367c <main+0x1778>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d112      	bne.n	800357c <main+0x1678>
									{
									alarmdate = 28;
 8003556:	4b49      	ldr	r3, [pc, #292]	; (800367c <main+0x1778>)
 8003558:	221c      	movs	r2, #28
 800355a:	601a      	str	r2, [r3, #0]
								if (alarmdate < 1)
 800355c:	e00e      	b.n	800357c <main+0x1678>
									}
								}
							else if (alarmmonth == 2 && alarmyear != 28)
 800355e:	4b48      	ldr	r3, [pc, #288]	; (8003680 <main+0x177c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d10a      	bne.n	800357c <main+0x1678>
 8003566:	4b47      	ldr	r3, [pc, #284]	; (8003684 <main+0x1780>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b1c      	cmp	r3, #28
 800356c:	d006      	beq.n	800357c <main+0x1678>
								{
								if (alarmdate < 1)
 800356e:	4b43      	ldr	r3, [pc, #268]	; (800367c <main+0x1778>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d102      	bne.n	800357c <main+0x1678>
									{
									alarmdate = 28;
 8003576:	4b41      	ldr	r3, [pc, #260]	; (800367c <main+0x1778>)
 8003578:	221c      	movs	r2, #28
 800357a:	601a      	str	r2, [r3, #0]
									}
								}
							if (alarmmonth == 4
 800357c:	4b40      	ldr	r3, [pc, #256]	; (8003680 <main+0x177c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b04      	cmp	r3, #4
 8003582:	d00f      	beq.n	80035a4 <main+0x16a0>
									|| alarmmonth == 6
 8003584:	4b3e      	ldr	r3, [pc, #248]	; (8003680 <main+0x177c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b06      	cmp	r3, #6
 800358a:	d00b      	beq.n	80035a4 <main+0x16a0>
									|| alarmmonth == 3
 800358c:	4b3c      	ldr	r3, [pc, #240]	; (8003680 <main+0x177c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b03      	cmp	r3, #3
 8003592:	d007      	beq.n	80035a4 <main+0x16a0>
									|| alarmmonth == 9
 8003594:	4b3a      	ldr	r3, [pc, #232]	; (8003680 <main+0x177c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b09      	cmp	r3, #9
 800359a:	d003      	beq.n	80035a4 <main+0x16a0>
									|| alarmmonth == 11)
 800359c:	4b38      	ldr	r3, [pc, #224]	; (8003680 <main+0x177c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b0b      	cmp	r3, #11
 80035a2:	d106      	bne.n	80035b2 <main+0x16ae>
								{
								if (alarmdate < 1)
 80035a4:	4b35      	ldr	r3, [pc, #212]	; (800367c <main+0x1778>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d102      	bne.n	80035b2 <main+0x16ae>
									{
									alarmdate = 30;
 80035ac:	4b33      	ldr	r3, [pc, #204]	; (800367c <main+0x1778>)
 80035ae:	221e      	movs	r2, #30
 80035b0:	601a      	str	r2, [r3, #0]
									}
								}
						trangthai = counter;
 80035b2:	4b31      	ldr	r3, [pc, #196]	; (8003678 <main+0x1774>)
 80035b4:	781a      	ldrb	r2, [r3, #0]
 80035b6:	4b2f      	ldr	r3, [pc, #188]	; (8003674 <main+0x1770>)
 80035b8:	701a      	strb	r2, [r3, #0]
					}
			  if (trangthai = counter)
 80035ba:	4b2f      	ldr	r3, [pc, #188]	; (8003678 <main+0x1774>)
 80035bc:	781a      	ldrb	r2, [r3, #0]
 80035be:	4b2d      	ldr	r3, [pc, #180]	; (8003674 <main+0x1770>)
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	4b2c      	ldr	r3, [pc, #176]	; (8003674 <main+0x1770>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 8088 	beq.w	80036dc <main+0x17d8>
					{
				  if (alarmmonth == 1
 80035cc:	4b2c      	ldr	r3, [pc, #176]	; (8003680 <main+0x177c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d017      	beq.n	8003604 <main+0x1700>
							|| alarmmonth == 3
 80035d4:	4b2a      	ldr	r3, [pc, #168]	; (8003680 <main+0x177c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d013      	beq.n	8003604 <main+0x1700>
							|| alarmmonth == 5
 80035dc:	4b28      	ldr	r3, [pc, #160]	; (8003680 <main+0x177c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b05      	cmp	r3, #5
 80035e2:	d00f      	beq.n	8003604 <main+0x1700>
							|| alarmmonth == 7
 80035e4:	4b26      	ldr	r3, [pc, #152]	; (8003680 <main+0x177c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b07      	cmp	r3, #7
 80035ea:	d00b      	beq.n	8003604 <main+0x1700>
							|| alarmmonth == 8
 80035ec:	4b24      	ldr	r3, [pc, #144]	; (8003680 <main+0x177c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d007      	beq.n	8003604 <main+0x1700>
							|| alarmmonth == 10
 80035f4:	4b22      	ldr	r3, [pc, #136]	; (8003680 <main+0x177c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b0a      	cmp	r3, #10
 80035fa:	d003      	beq.n	8003604 <main+0x1700>
							|| alarmmonth == 12 )
 80035fc:	4b20      	ldr	r3, [pc, #128]	; (8003680 <main+0x177c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b0c      	cmp	r3, #12
 8003602:	d106      	bne.n	8003612 <main+0x170e>
						{
						if (alarmdate > 31)
 8003604:	4b1d      	ldr	r3, [pc, #116]	; (800367c <main+0x1778>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b1f      	cmp	r3, #31
 800360a:	d902      	bls.n	8003612 <main+0x170e>
							{
							alarmdate = 31;
 800360c:	4b1b      	ldr	r3, [pc, #108]	; (800367c <main+0x1778>)
 800360e:	221f      	movs	r2, #31
 8003610:	601a      	str	r2, [r3, #0]
							}
						}
					if (alarmmonth == 2 && alarmyear == 24)
 8003612:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <main+0x177c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d10b      	bne.n	8003632 <main+0x172e>
 800361a:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <main+0x1780>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b18      	cmp	r3, #24
 8003620:	d107      	bne.n	8003632 <main+0x172e>
						{
						if (alarmdate > 29)
 8003622:	4b16      	ldr	r3, [pc, #88]	; (800367c <main+0x1778>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b1d      	cmp	r3, #29
 8003628:	d93d      	bls.n	80036a6 <main+0x17a2>
							{
							alarmdate = 29;
 800362a:	4b14      	ldr	r3, [pc, #80]	; (800367c <main+0x1778>)
 800362c:	221d      	movs	r2, #29
 800362e:	601a      	str	r2, [r3, #0]
						if (alarmdate > 29)
 8003630:	e039      	b.n	80036a6 <main+0x17a2>
							}
						}
					else if (alarmmonth == 2 && alarmyear == 28)
 8003632:	4b13      	ldr	r3, [pc, #76]	; (8003680 <main+0x177c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d10b      	bne.n	8003652 <main+0x174e>
 800363a:	4b12      	ldr	r3, [pc, #72]	; (8003684 <main+0x1780>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b1c      	cmp	r3, #28
 8003640:	d107      	bne.n	8003652 <main+0x174e>
						{
						if (alarmdate > 29)
 8003642:	4b0e      	ldr	r3, [pc, #56]	; (800367c <main+0x1778>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b1d      	cmp	r3, #29
 8003648:	d92d      	bls.n	80036a6 <main+0x17a2>
							{
							alarmdate = 29;
 800364a:	4b0c      	ldr	r3, [pc, #48]	; (800367c <main+0x1778>)
 800364c:	221d      	movs	r2, #29
 800364e:	601a      	str	r2, [r3, #0]
						if (alarmdate > 29)
 8003650:	e029      	b.n	80036a6 <main+0x17a2>
							}
						}
					else if (alarmmonth == 2 && alarmyear != 24)
 8003652:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <main+0x177c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d116      	bne.n	8003688 <main+0x1784>
 800365a:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <main+0x1780>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b18      	cmp	r3, #24
 8003660:	d012      	beq.n	8003688 <main+0x1784>
						{
						if (alarmdate > 28)
 8003662:	4b06      	ldr	r3, [pc, #24]	; (800367c <main+0x1778>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b1c      	cmp	r3, #28
 8003668:	d91d      	bls.n	80036a6 <main+0x17a2>
							{
							alarmdate = 28;
 800366a:	4b04      	ldr	r3, [pc, #16]	; (800367c <main+0x1778>)
 800366c:	221c      	movs	r2, #28
 800366e:	601a      	str	r2, [r3, #0]
						if (alarmdate > 28)
 8003670:	e019      	b.n	80036a6 <main+0x17a2>
 8003672:	bf00      	nop
 8003674:	2000024d 	.word	0x2000024d
 8003678:	2000024c 	.word	0x2000024c
 800367c:	20000234 	.word	0x20000234
 8003680:	20000238 	.word	0x20000238
 8003684:	2000023c 	.word	0x2000023c
							}
						}
					else if (alarmmonth == 2 && alarmyear != 28)
 8003688:	4b33      	ldr	r3, [pc, #204]	; (8003758 <main+0x1854>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d10a      	bne.n	80036a6 <main+0x17a2>
 8003690:	4b32      	ldr	r3, [pc, #200]	; (800375c <main+0x1858>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b1c      	cmp	r3, #28
 8003696:	d006      	beq.n	80036a6 <main+0x17a2>
						{
						if (alarmdate > 28)
 8003698:	4b31      	ldr	r3, [pc, #196]	; (8003760 <main+0x185c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b1c      	cmp	r3, #28
 800369e:	d902      	bls.n	80036a6 <main+0x17a2>
							{
							alarmdate = 28;
 80036a0:	4b2f      	ldr	r3, [pc, #188]	; (8003760 <main+0x185c>)
 80036a2:	221c      	movs	r2, #28
 80036a4:	601a      	str	r2, [r3, #0]
							}
						}
					if (alarmmonth == 4
 80036a6:	4b2c      	ldr	r3, [pc, #176]	; (8003758 <main+0x1854>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d00f      	beq.n	80036ce <main+0x17ca>
							|| alarmmonth == 6
 80036ae:	4b2a      	ldr	r3, [pc, #168]	; (8003758 <main+0x1854>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b06      	cmp	r3, #6
 80036b4:	d00b      	beq.n	80036ce <main+0x17ca>
							|| alarmmonth == 3
 80036b6:	4b28      	ldr	r3, [pc, #160]	; (8003758 <main+0x1854>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	d007      	beq.n	80036ce <main+0x17ca>
							|| alarmmonth == 9
 80036be:	4b26      	ldr	r3, [pc, #152]	; (8003758 <main+0x1854>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b09      	cmp	r3, #9
 80036c4:	d003      	beq.n	80036ce <main+0x17ca>
							|| alarmmonth == 11)
 80036c6:	4b24      	ldr	r3, [pc, #144]	; (8003758 <main+0x1854>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b0b      	cmp	r3, #11
 80036cc:	d106      	bne.n	80036dc <main+0x17d8>
						{
						if (alarmdate > 30)
 80036ce:	4b24      	ldr	r3, [pc, #144]	; (8003760 <main+0x185c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b1e      	cmp	r3, #30
 80036d4:	d902      	bls.n	80036dc <main+0x17d8>
							{
							alarmdate = 30;
 80036d6:	4b22      	ldr	r3, [pc, #136]	; (8003760 <main+0x185c>)
 80036d8:	221e      	movs	r2, #30
 80036da:	601a      	str	r2, [r3, #0]
							}
						}
					}
			lcd_clear(&p_lcd);
 80036dc:	4821      	ldr	r0, [pc, #132]	; (8003764 <main+0x1860>)
 80036de:	f7fd fe60 	bl	80013a2 <lcd_clear>
			if (alarmday == 1)
 80036e2:	4b21      	ldr	r3, [pc, #132]	; (8003768 <main+0x1864>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d115      	bne.n	8003716 <main+0x1812>
			{
			lcd_set_cursor(&p_lcd, 0, 0);
 80036ea:	2200      	movs	r2, #0
 80036ec:	2100      	movs	r1, #0
 80036ee:	481d      	ldr	r0, [pc, #116]	; (8003764 <main+0x1860>)
 80036f0:	f7fd fe16 	bl	8001320 <lcd_set_cursor>
			sprintf(time, "CN +%d-%d-20%d" , alarmdate, alarmmonth, alarmyear);
 80036f4:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <main+0x185c>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b17      	ldr	r3, [pc, #92]	; (8003758 <main+0x1854>)
 80036fa:	6819      	ldr	r1, [r3, #0]
 80036fc:	4b17      	ldr	r3, [pc, #92]	; (800375c <main+0x1858>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	460b      	mov	r3, r1
 8003704:	4919      	ldr	r1, [pc, #100]	; (800376c <main+0x1868>)
 8003706:	481a      	ldr	r0, [pc, #104]	; (8003770 <main+0x186c>)
 8003708:	f003 fc2e 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 800370c:	4918      	ldr	r1, [pc, #96]	; (8003770 <main+0x186c>)
 800370e:	4815      	ldr	r0, [pc, #84]	; (8003764 <main+0x1860>)
 8003710:	f7fd fe30 	bl	8001374 <lcd_send_string>
 8003714:	e018      	b.n	8003748 <main+0x1844>
			}
			else
			{
			lcd_set_cursor(&p_lcd, 0, 0);
 8003716:	2200      	movs	r2, #0
 8003718:	2100      	movs	r1, #0
 800371a:	4812      	ldr	r0, [pc, #72]	; (8003764 <main+0x1860>)
 800371c:	f7fd fe00 	bl	8001320 <lcd_set_cursor>
			sprintf(time, "Thu %d +%d-%d-20%d", alarmday, alarmdate, alarmmonth, alarmyear);
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <main+0x1864>)
 8003722:	6819      	ldr	r1, [r3, #0]
 8003724:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <main+0x185c>)
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <main+0x1854>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a0b      	ldr	r2, [pc, #44]	; (800375c <main+0x1858>)
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	9201      	str	r2, [sp, #4]
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	4603      	mov	r3, r0
 8003736:	460a      	mov	r2, r1
 8003738:	490e      	ldr	r1, [pc, #56]	; (8003774 <main+0x1870>)
 800373a:	480d      	ldr	r0, [pc, #52]	; (8003770 <main+0x186c>)
 800373c:	f003 fc14 	bl	8006f68 <siprintf>
			lcd_send_string(&p_lcd, time);
 8003740:	490b      	ldr	r1, [pc, #44]	; (8003770 <main+0x186c>)
 8003742:	4808      	ldr	r0, [pc, #32]	; (8003764 <main+0x1860>)
 8003744:	f7fd fe16 	bl	8001374 <lcd_send_string>
			}
			HAL_Delay(300);
 8003748:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800374c:	f000 fc7a 	bl	8004044 <HAL_Delay>
			break;
 8003750:	e000      	b.n	8003754 <main+0x1850>

		 default:
			 break;
 8003752:	bf00      	nop
	  DS3231_GetTime(&DS3231);
 8003754:	f7fe bc20 	b.w	8001f98 <main+0x94>
 8003758:	20000238 	.word	0x20000238
 800375c:	2000023c 	.word	0x2000023c
 8003760:	20000234 	.word	0x20000234
 8003764:	2000020c 	.word	0x2000020c
 8003768:	20000230 	.word	0x20000230
 800376c:	08007aa4 	.word	0x08007aa4
 8003770:	2000021c 	.word	0x2000021c
 8003774:	08007ab4 	.word	0x08007ab4

08003778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b090      	sub	sp, #64	; 0x40
 800377c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800377e:	f107 0318 	add.w	r3, r7, #24
 8003782:	2228      	movs	r2, #40	; 0x28
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f003 fc0e 	bl	8006fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800378c:	1d3b      	adds	r3, r7, #4
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	605a      	str	r2, [r3, #4]
 8003794:	609a      	str	r2, [r3, #8]
 8003796:	60da      	str	r2, [r3, #12]
 8003798:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800379a:	2301      	movs	r3, #1
 800379c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800379e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80037a4:	2300      	movs	r3, #0
 80037a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037a8:	2301      	movs	r3, #1
 80037aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037ac:	2302      	movs	r3, #2
 80037ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80037b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80037ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037bc:	f107 0318 	add.w	r3, r7, #24
 80037c0:	4618      	mov	r0, r3
 80037c2:	f002 fa45 	bl	8005c50 <HAL_RCC_OscConfig>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80037cc:	f000 fa24 	bl	8003c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037d0:	230f      	movs	r3, #15
 80037d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037d4:	2302      	movs	r3, #2
 80037d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80037e6:	1d3b      	adds	r3, r7, #4
 80037e8:	2102      	movs	r1, #2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f002 fcb2 	bl	8006154 <HAL_RCC_ClockConfig>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80037f6:	f000 fa0f 	bl	8003c18 <Error_Handler>
  }
}
 80037fa:	bf00      	nop
 80037fc:	3740      	adds	r7, #64	; 0x40
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003808:	4b12      	ldr	r3, [pc, #72]	; (8003854 <MX_I2C1_Init+0x50>)
 800380a:	4a13      	ldr	r2, [pc, #76]	; (8003858 <MX_I2C1_Init+0x54>)
 800380c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800380e:	4b11      	ldr	r3, [pc, #68]	; (8003854 <MX_I2C1_Init+0x50>)
 8003810:	4a12      	ldr	r2, [pc, #72]	; (800385c <MX_I2C1_Init+0x58>)
 8003812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003814:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <MX_I2C1_Init+0x50>)
 8003816:	2200      	movs	r2, #0
 8003818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800381a:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <MX_I2C1_Init+0x50>)
 800381c:	2200      	movs	r2, #0
 800381e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003820:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <MX_I2C1_Init+0x50>)
 8003822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003826:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003828:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <MX_I2C1_Init+0x50>)
 800382a:	2200      	movs	r2, #0
 800382c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <MX_I2C1_Init+0x50>)
 8003830:	2200      	movs	r2, #0
 8003832:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003834:	4b07      	ldr	r3, [pc, #28]	; (8003854 <MX_I2C1_Init+0x50>)
 8003836:	2200      	movs	r2, #0
 8003838:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <MX_I2C1_Init+0x50>)
 800383c:	2200      	movs	r2, #0
 800383e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003840:	4804      	ldr	r0, [pc, #16]	; (8003854 <MX_I2C1_Init+0x50>)
 8003842:	f000 fefd 	bl	8004640 <HAL_I2C_Init>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800384c:	f000 f9e4 	bl	8003c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003850:	bf00      	nop
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20000098 	.word	0x20000098
 8003858:	40005400 	.word	0x40005400
 800385c:	00061a80 	.word	0x00061a80

08003860 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003866:	f107 0308 	add.w	r3, r7, #8
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	609a      	str	r2, [r3, #8]
 8003872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003874:	463b      	mov	r3, r7
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800387c:	4b1e      	ldr	r3, [pc, #120]	; (80038f8 <MX_TIM1_Init+0x98>)
 800387e:	4a1f      	ldr	r2, [pc, #124]	; (80038fc <MX_TIM1_Init+0x9c>)
 8003880:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8003882:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <MX_TIM1_Init+0x98>)
 8003884:	2247      	movs	r2, #71	; 0x47
 8003886:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003888:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <MX_TIM1_Init+0x98>)
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800388e:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <MX_TIM1_Init+0x98>)
 8003890:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003894:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003896:	4b18      	ldr	r3, [pc, #96]	; (80038f8 <MX_TIM1_Init+0x98>)
 8003898:	2200      	movs	r2, #0
 800389a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800389c:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <MX_TIM1_Init+0x98>)
 800389e:	2200      	movs	r2, #0
 80038a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038a2:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <MX_TIM1_Init+0x98>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80038a8:	4813      	ldr	r0, [pc, #76]	; (80038f8 <MX_TIM1_Init+0x98>)
 80038aa:	f002 fdcd 	bl	8006448 <HAL_TIM_Base_Init>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80038b4:	f000 f9b0 	bl	8003c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80038be:	f107 0308 	add.w	r3, r7, #8
 80038c2:	4619      	mov	r1, r3
 80038c4:	480c      	ldr	r0, [pc, #48]	; (80038f8 <MX_TIM1_Init+0x98>)
 80038c6:	f003 f8d7 	bl	8006a78 <HAL_TIM_ConfigClockSource>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80038d0:	f000 f9a2 	bl	8003c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038d4:	2300      	movs	r3, #0
 80038d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038d8:	2300      	movs	r3, #0
 80038da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80038dc:	463b      	mov	r3, r7
 80038de:	4619      	mov	r1, r3
 80038e0:	4805      	ldr	r0, [pc, #20]	; (80038f8 <MX_TIM1_Init+0x98>)
 80038e2:	f003 fad1 	bl	8006e88 <HAL_TIMEx_MasterConfigSynchronization>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80038ec:	f000 f994 	bl	8003c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80038f0:	bf00      	nop
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	200000ec 	.word	0x200000ec
 80038fc:	40012c00 	.word	0x40012c00

08003900 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003906:	f107 0308 	add.w	r3, r7, #8
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	609a      	str	r2, [r3, #8]
 8003912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003914:	463b      	mov	r3, r7
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <MX_TIM2_Init+0x94>)
 800391e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003922:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8003924:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <MX_TIM2_Init+0x94>)
 8003926:	2247      	movs	r2, #71	; 0x47
 8003928:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800392a:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <MX_TIM2_Init+0x94>)
 800392c:	2200      	movs	r2, #0
 800392e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003930:	4b18      	ldr	r3, [pc, #96]	; (8003994 <MX_TIM2_Init+0x94>)
 8003932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003936:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003938:	4b16      	ldr	r3, [pc, #88]	; (8003994 <MX_TIM2_Init+0x94>)
 800393a:	2200      	movs	r2, #0
 800393c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800393e:	4b15      	ldr	r3, [pc, #84]	; (8003994 <MX_TIM2_Init+0x94>)
 8003940:	2200      	movs	r2, #0
 8003942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003944:	4813      	ldr	r0, [pc, #76]	; (8003994 <MX_TIM2_Init+0x94>)
 8003946:	f002 fd7f 	bl	8006448 <HAL_TIM_Base_Init>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003950:	f000 f962 	bl	8003c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003958:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800395a:	f107 0308 	add.w	r3, r7, #8
 800395e:	4619      	mov	r1, r3
 8003960:	480c      	ldr	r0, [pc, #48]	; (8003994 <MX_TIM2_Init+0x94>)
 8003962:	f003 f889 	bl	8006a78 <HAL_TIM_ConfigClockSource>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800396c:	f000 f954 	bl	8003c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003970:	2300      	movs	r3, #0
 8003972:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003974:	2300      	movs	r3, #0
 8003976:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003978:	463b      	mov	r3, r7
 800397a:	4619      	mov	r1, r3
 800397c:	4805      	ldr	r0, [pc, #20]	; (8003994 <MX_TIM2_Init+0x94>)
 800397e:	f003 fa83 	bl	8006e88 <HAL_TIMEx_MasterConfigSynchronization>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003988:	f000 f946 	bl	8003c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800398c:	bf00      	nop
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20000134 	.word	0x20000134

08003998 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08c      	sub	sp, #48	; 0x30
 800399c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800399e:	f107 030c 	add.w	r3, r7, #12
 80039a2:	2224      	movs	r2, #36	; 0x24
 80039a4:	2100      	movs	r1, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	f003 fafe 	bl	8006fa8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039ac:	1d3b      	adds	r3, r7, #4
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80039b4:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <MX_TIM3_Init+0xa0>)
 80039b6:	4a21      	ldr	r2, [pc, #132]	; (8003a3c <MX_TIM3_Init+0xa4>)
 80039b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80039ba:	4b1f      	ldr	r3, [pc, #124]	; (8003a38 <MX_TIM3_Init+0xa0>)
 80039bc:	2200      	movs	r2, #0
 80039be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039c0:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <MX_TIM3_Init+0xa0>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80039c6:	4b1c      	ldr	r3, [pc, #112]	; (8003a38 <MX_TIM3_Init+0xa0>)
 80039c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039ce:	4b1a      	ldr	r3, [pc, #104]	; (8003a38 <MX_TIM3_Init+0xa0>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039d4:	4b18      	ldr	r3, [pc, #96]	; (8003a38 <MX_TIM3_Init+0xa0>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80039da:	2303      	movs	r3, #3
 80039dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80039de:	2302      	movs	r3, #2
 80039e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80039e2:	2301      	movs	r3, #1
 80039e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80039ee:	2302      	movs	r3, #2
 80039f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80039f2:	2301      	movs	r3, #1
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80039f6:	2300      	movs	r3, #0
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80039fe:	f107 030c 	add.w	r3, r7, #12
 8003a02:	4619      	mov	r1, r3
 8003a04:	480c      	ldr	r0, [pc, #48]	; (8003a38 <MX_TIM3_Init+0xa0>)
 8003a06:	f002 fddf 	bl	80065c8 <HAL_TIM_Encoder_Init>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003a10:	f000 f902 	bl	8003c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a14:	2300      	movs	r3, #0
 8003a16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a1c:	1d3b      	adds	r3, r7, #4
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4805      	ldr	r0, [pc, #20]	; (8003a38 <MX_TIM3_Init+0xa0>)
 8003a22:	f003 fa31 	bl	8006e88 <HAL_TIMEx_MasterConfigSynchronization>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003a2c:	f000 f8f4 	bl	8003c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003a30:	bf00      	nop
 8003a32:	3730      	adds	r7, #48	; 0x30
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	2000017c 	.word	0x2000017c
 8003a3c:	40000400 	.word	0x40000400

08003a40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a46:	f107 0308 	add.w	r3, r7, #8
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	605a      	str	r2, [r3, #4]
 8003a50:	609a      	str	r2, [r3, #8]
 8003a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a54:	463b      	mov	r3, r7
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a5c:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <MX_TIM4_Init+0x94>)
 8003a5e:	4a1e      	ldr	r2, [pc, #120]	; (8003ad8 <MX_TIM4_Init+0x98>)
 8003a60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8003a62:	4b1c      	ldr	r3, [pc, #112]	; (8003ad4 <MX_TIM4_Init+0x94>)
 8003a64:	2247      	movs	r2, #71	; 0x47
 8003a66:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a68:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <MX_TIM4_Init+0x94>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003a6e:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <MX_TIM4_Init+0x94>)
 8003a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a74:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a76:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <MX_TIM4_Init+0x94>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a7c:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <MX_TIM4_Init+0x94>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003a82:	4814      	ldr	r0, [pc, #80]	; (8003ad4 <MX_TIM4_Init+0x94>)
 8003a84:	f002 fce0 	bl	8006448 <HAL_TIM_Base_Init>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003a8e:	f000 f8c3 	bl	8003c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003a98:	f107 0308 	add.w	r3, r7, #8
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	480d      	ldr	r0, [pc, #52]	; (8003ad4 <MX_TIM4_Init+0x94>)
 8003aa0:	f002 ffea 	bl	8006a78 <HAL_TIM_ConfigClockSource>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003aaa:	f000 f8b5 	bl	8003c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ab6:	463b      	mov	r3, r7
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4806      	ldr	r0, [pc, #24]	; (8003ad4 <MX_TIM4_Init+0x94>)
 8003abc:	f003 f9e4 	bl	8006e88 <HAL_TIMEx_MasterConfigSynchronization>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003ac6:	f000 f8a7 	bl	8003c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003aca:	bf00      	nop
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	200001c4 	.word	0x200001c4
 8003ad8:	40000800 	.word	0x40000800

08003adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae2:	f107 0310 	add.w	r3, r7, #16
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	609a      	str	r2, [r3, #8]
 8003aee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003af0:	4b43      	ldr	r3, [pc, #268]	; (8003c00 <MX_GPIO_Init+0x124>)
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	4a42      	ldr	r2, [pc, #264]	; (8003c00 <MX_GPIO_Init+0x124>)
 8003af6:	f043 0310 	orr.w	r3, r3, #16
 8003afa:	6193      	str	r3, [r2, #24]
 8003afc:	4b40      	ldr	r3, [pc, #256]	; (8003c00 <MX_GPIO_Init+0x124>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b08:	4b3d      	ldr	r3, [pc, #244]	; (8003c00 <MX_GPIO_Init+0x124>)
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	4a3c      	ldr	r2, [pc, #240]	; (8003c00 <MX_GPIO_Init+0x124>)
 8003b0e:	f043 0320 	orr.w	r3, r3, #32
 8003b12:	6193      	str	r3, [r2, #24]
 8003b14:	4b3a      	ldr	r3, [pc, #232]	; (8003c00 <MX_GPIO_Init+0x124>)
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b20:	4b37      	ldr	r3, [pc, #220]	; (8003c00 <MX_GPIO_Init+0x124>)
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	4a36      	ldr	r2, [pc, #216]	; (8003c00 <MX_GPIO_Init+0x124>)
 8003b26:	f043 0304 	orr.w	r3, r3, #4
 8003b2a:	6193      	str	r3, [r2, #24]
 8003b2c:	4b34      	ldr	r3, [pc, #208]	; (8003c00 <MX_GPIO_Init+0x124>)
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	607b      	str	r3, [r7, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b38:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <MX_GPIO_Init+0x124>)
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	4a30      	ldr	r2, [pc, #192]	; (8003c00 <MX_GPIO_Init+0x124>)
 8003b3e:	f043 0308 	orr.w	r3, r3, #8
 8003b42:	6193      	str	r3, [r2, #24]
 8003b44:	4b2e      	ldr	r3, [pc, #184]	; (8003c00 <MX_GPIO_Init+0x124>)
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	603b      	str	r3, [r7, #0]
 8003b4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003b50:	2200      	movs	r2, #0
 8003b52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b56:	482b      	ldr	r0, [pc, #172]	; (8003c04 <MX_GPIO_Init+0x128>)
 8003b58:	f000 fd41 	bl	80045de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b62:	4829      	ldr	r0, [pc, #164]	; (8003c08 <MX_GPIO_Init+0x12c>)
 8003b64:	f000 fd3b 	bl	80045de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b76:	2302      	movs	r3, #2
 8003b78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b7a:	f107 0310 	add.w	r3, r7, #16
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4820      	ldr	r0, [pc, #128]	; (8003c04 <MX_GPIO_Init+0x128>)
 8003b82:	f000 fb91 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003b86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b94:	2302      	movs	r3, #2
 8003b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b98:	f107 0310 	add.w	r3, r7, #16
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	481a      	ldr	r0, [pc, #104]	; (8003c08 <MX_GPIO_Init+0x12c>)
 8003ba0:	f000 fb82 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12
 8003ba4:	f44f 431b 	mov.w	r3, #39680	; 0x9b00
 8003ba8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003baa:	4b18      	ldr	r3, [pc, #96]	; (8003c0c <MX_GPIO_Init+0x130>)
 8003bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb2:	f107 0310 	add.w	r3, r7, #16
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4815      	ldr	r0, [pc, #84]	; (8003c10 <MX_GPIO_Init+0x134>)
 8003bba:	f000 fb75 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003bc4:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <MX_GPIO_Init+0x138>)
 8003bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bcc:	f107 0310 	add.w	r3, r7, #16
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	480f      	ldr	r0, [pc, #60]	; (8003c10 <MX_GPIO_Init+0x134>)
 8003bd4:	f000 fb68 	bl	80042a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2100      	movs	r1, #0
 8003bdc:	2017      	movs	r0, #23
 8003bde:	f000 fb2c 	bl	800423a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003be2:	2017      	movs	r0, #23
 8003be4:	f000 fb45 	bl	8004272 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003be8:	2200      	movs	r2, #0
 8003bea:	2100      	movs	r1, #0
 8003bec:	2028      	movs	r0, #40	; 0x28
 8003bee:	f000 fb24 	bl	800423a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003bf2:	2028      	movs	r0, #40	; 0x28
 8003bf4:	f000 fb3d 	bl	8004272 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003bf8:	bf00      	nop
 8003bfa:	3720      	adds	r7, #32
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40011000 	.word	0x40011000
 8003c08:	40010c00 	.word	0x40010c00
 8003c0c:	10110000 	.word	0x10110000
 8003c10:	40010800 	.word	0x40010800
 8003c14:	10210000 	.word	0x10210000

08003c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c1c:	b672      	cpsid	i
}
 8003c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c20:	e7fe      	b.n	8003c20 <Error_Handler+0x8>
	...

08003c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003c2a:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <HAL_MspInit+0x5c>)
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	4a14      	ldr	r2, [pc, #80]	; (8003c80 <HAL_MspInit+0x5c>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	6193      	str	r3, [r2, #24]
 8003c36:	4b12      	ldr	r3, [pc, #72]	; (8003c80 <HAL_MspInit+0x5c>)
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	60bb      	str	r3, [r7, #8]
 8003c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c42:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <HAL_MspInit+0x5c>)
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	4a0e      	ldr	r2, [pc, #56]	; (8003c80 <HAL_MspInit+0x5c>)
 8003c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c4c:	61d3      	str	r3, [r2, #28]
 8003c4e:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <HAL_MspInit+0x5c>)
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c56:	607b      	str	r3, [r7, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003c5a:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <HAL_MspInit+0x60>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	4a04      	ldr	r2, [pc, #16]	; (8003c84 <HAL_MspInit+0x60>)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c76:	bf00      	nop
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr
 8003c80:	40021000 	.word	0x40021000
 8003c84:	40010000 	.word	0x40010000

08003c88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c90:	f107 0310 	add.w	r3, r7, #16
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	605a      	str	r2, [r3, #4]
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <HAL_I2C_MspInit+0x70>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d123      	bne.n	8003cf0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ca8:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <HAL_I2C_MspInit+0x74>)
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	4a13      	ldr	r2, [pc, #76]	; (8003cfc <HAL_I2C_MspInit+0x74>)
 8003cae:	f043 0308 	orr.w	r3, r3, #8
 8003cb2:	6193      	str	r3, [r2, #24]
 8003cb4:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <HAL_I2C_MspInit+0x74>)
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cc0:	23c0      	movs	r3, #192	; 0xc0
 8003cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cc4:	2312      	movs	r3, #18
 8003cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ccc:	f107 0310 	add.w	r3, r7, #16
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	480b      	ldr	r0, [pc, #44]	; (8003d00 <HAL_I2C_MspInit+0x78>)
 8003cd4:	f000 fae8 	bl	80042a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cd8:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <HAL_I2C_MspInit+0x74>)
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	4a07      	ldr	r2, [pc, #28]	; (8003cfc <HAL_I2C_MspInit+0x74>)
 8003cde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ce2:	61d3      	str	r3, [r2, #28]
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <HAL_I2C_MspInit+0x74>)
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003cf0:	bf00      	nop
 8003cf2:	3720      	adds	r7, #32
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40005400 	.word	0x40005400
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40010c00 	.word	0x40010c00

08003d04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <HAL_TIM_Base_MspInit+0x7c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d10c      	bne.n	8003d30 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d16:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <HAL_TIM_Base_MspInit+0x80>)
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	4a1a      	ldr	r2, [pc, #104]	; (8003d84 <HAL_TIM_Base_MspInit+0x80>)
 8003d1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d20:	6193      	str	r3, [r2, #24]
 8003d22:	4b18      	ldr	r3, [pc, #96]	; (8003d84 <HAL_TIM_Base_MspInit+0x80>)
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003d2e:	e022      	b.n	8003d76 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d38:	d10c      	bne.n	8003d54 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d3a:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <HAL_TIM_Base_MspInit+0x80>)
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	4a11      	ldr	r2, [pc, #68]	; (8003d84 <HAL_TIM_Base_MspInit+0x80>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	61d3      	str	r3, [r2, #28]
 8003d46:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <HAL_TIM_Base_MspInit+0x80>)
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	693b      	ldr	r3, [r7, #16]
}
 8003d52:	e010      	b.n	8003d76 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a0b      	ldr	r2, [pc, #44]	; (8003d88 <HAL_TIM_Base_MspInit+0x84>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d10b      	bne.n	8003d76 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d5e:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <HAL_TIM_Base_MspInit+0x80>)
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	4a08      	ldr	r2, [pc, #32]	; (8003d84 <HAL_TIM_Base_MspInit+0x80>)
 8003d64:	f043 0304 	orr.w	r3, r3, #4
 8003d68:	61d3      	str	r3, [r2, #28]
 8003d6a:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <HAL_TIM_Base_MspInit+0x80>)
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
}
 8003d76:	bf00      	nop
 8003d78:	371c      	adds	r7, #28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc80      	pop	{r7}
 8003d7e:	4770      	bx	lr
 8003d80:	40012c00 	.word	0x40012c00
 8003d84:	40021000 	.word	0x40021000
 8003d88:	40000800 	.word	0x40000800

08003d8c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d94:	f107 0310 	add.w	r3, r7, #16
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	605a      	str	r2, [r3, #4]
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a19      	ldr	r2, [pc, #100]	; (8003e0c <HAL_TIM_Encoder_MspInit+0x80>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d12b      	bne.n	8003e04 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003dac:	4b18      	ldr	r3, [pc, #96]	; (8003e10 <HAL_TIM_Encoder_MspInit+0x84>)
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	4a17      	ldr	r2, [pc, #92]	; (8003e10 <HAL_TIM_Encoder_MspInit+0x84>)
 8003db2:	f043 0302 	orr.w	r3, r3, #2
 8003db6:	61d3      	str	r3, [r2, #28]
 8003db8:	4b15      	ldr	r3, [pc, #84]	; (8003e10 <HAL_TIM_Encoder_MspInit+0x84>)
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc4:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <HAL_TIM_Encoder_MspInit+0x84>)
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	4a11      	ldr	r2, [pc, #68]	; (8003e10 <HAL_TIM_Encoder_MspInit+0x84>)
 8003dca:	f043 0304 	orr.w	r3, r3, #4
 8003dce:	6193      	str	r3, [r2, #24]
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <HAL_TIM_Encoder_MspInit+0x84>)
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ddc:	23c0      	movs	r3, #192	; 0xc0
 8003dde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003de8:	f107 0310 	add.w	r3, r7, #16
 8003dec:	4619      	mov	r1, r3
 8003dee:	4809      	ldr	r0, [pc, #36]	; (8003e14 <HAL_TIM_Encoder_MspInit+0x88>)
 8003df0:	f000 fa5a 	bl	80042a8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003df4:	2200      	movs	r2, #0
 8003df6:	2100      	movs	r1, #0
 8003df8:	201d      	movs	r0, #29
 8003dfa:	f000 fa1e 	bl	800423a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003dfe:	201d      	movs	r0, #29
 8003e00:	f000 fa37 	bl	8004272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003e04:	bf00      	nop
 8003e06:	3720      	adds	r7, #32
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40000400 	.word	0x40000400
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40010800 	.word	0x40010800

08003e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e1c:	e7fe      	b.n	8003e1c <NMI_Handler+0x4>

08003e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e22:	e7fe      	b.n	8003e22 <HardFault_Handler+0x4>

08003e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e28:	e7fe      	b.n	8003e28 <MemManage_Handler+0x4>

08003e2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e2e:	e7fe      	b.n	8003e2e <BusFault_Handler+0x4>

08003e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e34:	e7fe      	b.n	8003e34 <UsageFault_Handler+0x4>

08003e36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e36:	b480      	push	{r7}
 8003e38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e3a:	bf00      	nop
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bc80      	pop	{r7}
 8003e40:	4770      	bx	lr

08003e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e42:	b480      	push	{r7}
 8003e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e46:	bf00      	nop
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr

08003e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e52:	bf00      	nop
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr

08003e5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e5e:	f000 f8d5 	bl	800400c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e62:	bf00      	nop
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003e6a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003e6e:	f000 fbcf 	bl	8004610 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003e72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003e76:	f000 fbcb 	bl	8004610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003e7a:	bf00      	nop
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003e84:	4802      	ldr	r0, [pc, #8]	; (8003e90 <TIM3_IRQHandler+0x10>)
 8003e86:	f002 fcef 	bl	8006868 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	2000017c 	.word	0x2000017c

08003e94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003e98:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003e9c:	f000 fbb8 	bl	8004610 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003ea0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003ea4:	f000 fbb4 	bl	8004610 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003ea8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003eac:	f000 fbb0 	bl	8004610 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003eb0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003eb4:	f000 fbac 	bl	8004610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003eb8:	bf00      	nop
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ec4:	4a14      	ldr	r2, [pc, #80]	; (8003f18 <_sbrk+0x5c>)
 8003ec6:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <_sbrk+0x60>)
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ed0:	4b13      	ldr	r3, [pc, #76]	; (8003f20 <_sbrk+0x64>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d102      	bne.n	8003ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ed8:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <_sbrk+0x64>)
 8003eda:	4a12      	ldr	r2, [pc, #72]	; (8003f24 <_sbrk+0x68>)
 8003edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ede:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <_sbrk+0x64>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d207      	bcs.n	8003efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003eec:	f003 f864 	bl	8006fb8 <__errno>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	220c      	movs	r2, #12
 8003ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8003efa:	e009      	b.n	8003f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003efc:	4b08      	ldr	r3, [pc, #32]	; (8003f20 <_sbrk+0x64>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f02:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <_sbrk+0x64>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4413      	add	r3, r2
 8003f0a:	4a05      	ldr	r2, [pc, #20]	; (8003f20 <_sbrk+0x64>)
 8003f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20005000 	.word	0x20005000
 8003f1c:	00000400 	.word	0x00000400
 8003f20:	20000290 	.word	0x20000290
 8003f24:	200003e0 	.word	0x200003e0

08003f28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f2c:	bf00      	nop
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr

08003f34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f34:	480c      	ldr	r0, [pc, #48]	; (8003f68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f36:	490d      	ldr	r1, [pc, #52]	; (8003f6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f38:	4a0d      	ldr	r2, [pc, #52]	; (8003f70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f3c:	e002      	b.n	8003f44 <LoopCopyDataInit>

08003f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f42:	3304      	adds	r3, #4

08003f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f48:	d3f9      	bcc.n	8003f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f4a:	4a0a      	ldr	r2, [pc, #40]	; (8003f74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f4c:	4c0a      	ldr	r4, [pc, #40]	; (8003f78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f50:	e001      	b.n	8003f56 <LoopFillZerobss>

08003f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f54:	3204      	adds	r2, #4

08003f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f58:	d3fb      	bcc.n	8003f52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f5a:	f7ff ffe5 	bl	8003f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f5e:	f003 f831 	bl	8006fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f62:	f7fd ffcf 	bl	8001f04 <main>
  bx lr
 8003f66:	4770      	bx	lr
  ldr r0, =_sdata
 8003f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f6c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8003f70:	08007b30 	.word	0x08007b30
  ldr r2, =_sbss
 8003f74:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8003f78:	200003e0 	.word	0x200003e0

08003f7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f7c:	e7fe      	b.n	8003f7c <ADC1_2_IRQHandler>
	...

08003f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f84:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <HAL_Init+0x28>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a07      	ldr	r2, [pc, #28]	; (8003fa8 <HAL_Init+0x28>)
 8003f8a:	f043 0310 	orr.w	r3, r3, #16
 8003f8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f90:	2003      	movs	r0, #3
 8003f92:	f000 f947 	bl	8004224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f96:	200f      	movs	r0, #15
 8003f98:	f000 f808 	bl	8003fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f9c:	f7ff fe42 	bl	8003c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40022000 	.word	0x40022000

08003fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fb4:	4b12      	ldr	r3, [pc, #72]	; (8004000 <HAL_InitTick+0x54>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	4b12      	ldr	r3, [pc, #72]	; (8004004 <HAL_InitTick+0x58>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 f95f 	bl	800428e <HAL_SYSTICK_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e00e      	b.n	8003ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b0f      	cmp	r3, #15
 8003fde:	d80a      	bhi.n	8003ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe8:	f000 f927 	bl	800423a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fec:	4a06      	ldr	r2, [pc, #24]	; (8004008 <HAL_InitTick+0x5c>)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e000      	b.n	8003ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	20000000 	.word	0x20000000
 8004004:	20000008 	.word	0x20000008
 8004008:	20000004 	.word	0x20000004

0800400c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <HAL_IncTick+0x1c>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	4b05      	ldr	r3, [pc, #20]	; (800402c <HAL_IncTick+0x20>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4413      	add	r3, r2
 800401c:	4a03      	ldr	r2, [pc, #12]	; (800402c <HAL_IncTick+0x20>)
 800401e:	6013      	str	r3, [r2, #0]
}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr
 8004028:	20000008 	.word	0x20000008
 800402c:	20000294 	.word	0x20000294

08004030 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return uwTick;
 8004034:	4b02      	ldr	r3, [pc, #8]	; (8004040 <HAL_GetTick+0x10>)
 8004036:	681b      	ldr	r3, [r3, #0]
}
 8004038:	4618      	mov	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr
 8004040:	20000294 	.word	0x20000294

08004044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800404c:	f7ff fff0 	bl	8004030 <HAL_GetTick>
 8004050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405c:	d005      	beq.n	800406a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800405e:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <HAL_Delay+0x44>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800406a:	bf00      	nop
 800406c:	f7ff ffe0 	bl	8004030 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	429a      	cmp	r2, r3
 800407a:	d8f7      	bhi.n	800406c <HAL_Delay+0x28>
  {
  }
}
 800407c:	bf00      	nop
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20000008 	.word	0x20000008

0800408c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800409c:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <__NVIC_SetPriorityGrouping+0x44>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040a8:	4013      	ands	r3, r2
 80040aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040be:	4a04      	ldr	r2, [pc, #16]	; (80040d0 <__NVIC_SetPriorityGrouping+0x44>)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	60d3      	str	r3, [r2, #12]
}
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	e000ed00 	.word	0xe000ed00

080040d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040d8:	4b04      	ldr	r3, [pc, #16]	; (80040ec <__NVIC_GetPriorityGrouping+0x18>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	0a1b      	lsrs	r3, r3, #8
 80040de:	f003 0307 	and.w	r3, r3, #7
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	e000ed00 	.word	0xe000ed00

080040f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	4603      	mov	r3, r0
 80040f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	db0b      	blt.n	800411a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	f003 021f 	and.w	r2, r3, #31
 8004108:	4906      	ldr	r1, [pc, #24]	; (8004124 <__NVIC_EnableIRQ+0x34>)
 800410a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	2001      	movs	r0, #1
 8004112:	fa00 f202 	lsl.w	r2, r0, r2
 8004116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr
 8004124:	e000e100 	.word	0xe000e100

08004128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	6039      	str	r1, [r7, #0]
 8004132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004138:	2b00      	cmp	r3, #0
 800413a:	db0a      	blt.n	8004152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	b2da      	uxtb	r2, r3
 8004140:	490c      	ldr	r1, [pc, #48]	; (8004174 <__NVIC_SetPriority+0x4c>)
 8004142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004146:	0112      	lsls	r2, r2, #4
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	440b      	add	r3, r1
 800414c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004150:	e00a      	b.n	8004168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	b2da      	uxtb	r2, r3
 8004156:	4908      	ldr	r1, [pc, #32]	; (8004178 <__NVIC_SetPriority+0x50>)
 8004158:	79fb      	ldrb	r3, [r7, #7]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	3b04      	subs	r3, #4
 8004160:	0112      	lsls	r2, r2, #4
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	440b      	add	r3, r1
 8004166:	761a      	strb	r2, [r3, #24]
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	e000e100 	.word	0xe000e100
 8004178:	e000ed00 	.word	0xe000ed00

0800417c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800417c:	b480      	push	{r7}
 800417e:	b089      	sub	sp, #36	; 0x24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f1c3 0307 	rsb	r3, r3, #7
 8004196:	2b04      	cmp	r3, #4
 8004198:	bf28      	it	cs
 800419a:	2304      	movcs	r3, #4
 800419c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	3304      	adds	r3, #4
 80041a2:	2b06      	cmp	r3, #6
 80041a4:	d902      	bls.n	80041ac <NVIC_EncodePriority+0x30>
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	3b03      	subs	r3, #3
 80041aa:	e000      	b.n	80041ae <NVIC_EncodePriority+0x32>
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b0:	f04f 32ff 	mov.w	r2, #4294967295
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43da      	mvns	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	401a      	ands	r2, r3
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041c4:	f04f 31ff 	mov.w	r1, #4294967295
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	fa01 f303 	lsl.w	r3, r1, r3
 80041ce:	43d9      	mvns	r1, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d4:	4313      	orrs	r3, r2
         );
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3724      	adds	r7, #36	; 0x24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041f0:	d301      	bcc.n	80041f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041f2:	2301      	movs	r3, #1
 80041f4:	e00f      	b.n	8004216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041f6:	4a0a      	ldr	r2, [pc, #40]	; (8004220 <SysTick_Config+0x40>)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041fe:	210f      	movs	r1, #15
 8004200:	f04f 30ff 	mov.w	r0, #4294967295
 8004204:	f7ff ff90 	bl	8004128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <SysTick_Config+0x40>)
 800420a:	2200      	movs	r2, #0
 800420c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800420e:	4b04      	ldr	r3, [pc, #16]	; (8004220 <SysTick_Config+0x40>)
 8004210:	2207      	movs	r2, #7
 8004212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	e000e010 	.word	0xe000e010

08004224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff ff2d 	bl	800408c <__NVIC_SetPriorityGrouping>
}
 8004232:	bf00      	nop
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800423a:	b580      	push	{r7, lr}
 800423c:	b086      	sub	sp, #24
 800423e:	af00      	add	r7, sp, #0
 8004240:	4603      	mov	r3, r0
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800424c:	f7ff ff42 	bl	80040d4 <__NVIC_GetPriorityGrouping>
 8004250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	6978      	ldr	r0, [r7, #20]
 8004258:	f7ff ff90 	bl	800417c <NVIC_EncodePriority>
 800425c:	4602      	mov	r2, r0
 800425e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004262:	4611      	mov	r1, r2
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff ff5f 	bl	8004128 <__NVIC_SetPriority>
}
 800426a:	bf00      	nop
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b082      	sub	sp, #8
 8004276:	af00      	add	r7, sp, #0
 8004278:	4603      	mov	r3, r0
 800427a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800427c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff ff35 	bl	80040f0 <__NVIC_EnableIRQ>
}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff ffa2 	bl	80041e0 <SysTick_Config>
 800429c:	4603      	mov	r3, r0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b08b      	sub	sp, #44	; 0x2c
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042b2:	2300      	movs	r3, #0
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80042b6:	2300      	movs	r3, #0
 80042b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042ba:	e169      	b.n	8004590 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80042bc:	2201      	movs	r2, #1
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	f040 8158 	bne.w	800458a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4a9a      	ldr	r2, [pc, #616]	; (8004548 <HAL_GPIO_Init+0x2a0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d05e      	beq.n	80043a2 <HAL_GPIO_Init+0xfa>
 80042e4:	4a98      	ldr	r2, [pc, #608]	; (8004548 <HAL_GPIO_Init+0x2a0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d875      	bhi.n	80043d6 <HAL_GPIO_Init+0x12e>
 80042ea:	4a98      	ldr	r2, [pc, #608]	; (800454c <HAL_GPIO_Init+0x2a4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d058      	beq.n	80043a2 <HAL_GPIO_Init+0xfa>
 80042f0:	4a96      	ldr	r2, [pc, #600]	; (800454c <HAL_GPIO_Init+0x2a4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d86f      	bhi.n	80043d6 <HAL_GPIO_Init+0x12e>
 80042f6:	4a96      	ldr	r2, [pc, #600]	; (8004550 <HAL_GPIO_Init+0x2a8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d052      	beq.n	80043a2 <HAL_GPIO_Init+0xfa>
 80042fc:	4a94      	ldr	r2, [pc, #592]	; (8004550 <HAL_GPIO_Init+0x2a8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d869      	bhi.n	80043d6 <HAL_GPIO_Init+0x12e>
 8004302:	4a94      	ldr	r2, [pc, #592]	; (8004554 <HAL_GPIO_Init+0x2ac>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d04c      	beq.n	80043a2 <HAL_GPIO_Init+0xfa>
 8004308:	4a92      	ldr	r2, [pc, #584]	; (8004554 <HAL_GPIO_Init+0x2ac>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d863      	bhi.n	80043d6 <HAL_GPIO_Init+0x12e>
 800430e:	4a92      	ldr	r2, [pc, #584]	; (8004558 <HAL_GPIO_Init+0x2b0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d046      	beq.n	80043a2 <HAL_GPIO_Init+0xfa>
 8004314:	4a90      	ldr	r2, [pc, #576]	; (8004558 <HAL_GPIO_Init+0x2b0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d85d      	bhi.n	80043d6 <HAL_GPIO_Init+0x12e>
 800431a:	2b12      	cmp	r3, #18
 800431c:	d82a      	bhi.n	8004374 <HAL_GPIO_Init+0xcc>
 800431e:	2b12      	cmp	r3, #18
 8004320:	d859      	bhi.n	80043d6 <HAL_GPIO_Init+0x12e>
 8004322:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <HAL_GPIO_Init+0x80>)
 8004324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004328:	080043a3 	.word	0x080043a3
 800432c:	0800437d 	.word	0x0800437d
 8004330:	0800438f 	.word	0x0800438f
 8004334:	080043d1 	.word	0x080043d1
 8004338:	080043d7 	.word	0x080043d7
 800433c:	080043d7 	.word	0x080043d7
 8004340:	080043d7 	.word	0x080043d7
 8004344:	080043d7 	.word	0x080043d7
 8004348:	080043d7 	.word	0x080043d7
 800434c:	080043d7 	.word	0x080043d7
 8004350:	080043d7 	.word	0x080043d7
 8004354:	080043d7 	.word	0x080043d7
 8004358:	080043d7 	.word	0x080043d7
 800435c:	080043d7 	.word	0x080043d7
 8004360:	080043d7 	.word	0x080043d7
 8004364:	080043d7 	.word	0x080043d7
 8004368:	080043d7 	.word	0x080043d7
 800436c:	08004385 	.word	0x08004385
 8004370:	08004399 	.word	0x08004399
 8004374:	4a79      	ldr	r2, [pc, #484]	; (800455c <HAL_GPIO_Init+0x2b4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800437a:	e02c      	b.n	80043d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	623b      	str	r3, [r7, #32]
          break;
 8004382:	e029      	b.n	80043d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	3304      	adds	r3, #4
 800438a:	623b      	str	r3, [r7, #32]
          break;
 800438c:	e024      	b.n	80043d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	3308      	adds	r3, #8
 8004394:	623b      	str	r3, [r7, #32]
          break;
 8004396:	e01f      	b.n	80043d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	330c      	adds	r3, #12
 800439e:	623b      	str	r3, [r7, #32]
          break;
 80043a0:	e01a      	b.n	80043d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d102      	bne.n	80043b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80043aa:	2304      	movs	r3, #4
 80043ac:	623b      	str	r3, [r7, #32]
          break;
 80043ae:	e013      	b.n	80043d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d105      	bne.n	80043c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043b8:	2308      	movs	r3, #8
 80043ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	611a      	str	r2, [r3, #16]
          break;
 80043c2:	e009      	b.n	80043d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043c4:	2308      	movs	r3, #8
 80043c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	69fa      	ldr	r2, [r7, #28]
 80043cc:	615a      	str	r2, [r3, #20]
          break;
 80043ce:	e003      	b.n	80043d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80043d0:	2300      	movs	r3, #0
 80043d2:	623b      	str	r3, [r7, #32]
          break;
 80043d4:	e000      	b.n	80043d8 <HAL_GPIO_Init+0x130>
          break;
 80043d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	2bff      	cmp	r3, #255	; 0xff
 80043dc:	d801      	bhi.n	80043e2 <HAL_GPIO_Init+0x13a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	e001      	b.n	80043e6 <HAL_GPIO_Init+0x13e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3304      	adds	r3, #4
 80043e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2bff      	cmp	r3, #255	; 0xff
 80043ec:	d802      	bhi.n	80043f4 <HAL_GPIO_Init+0x14c>
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	e002      	b.n	80043fa <HAL_GPIO_Init+0x152>
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	3b08      	subs	r3, #8
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	210f      	movs	r1, #15
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	fa01 f303 	lsl.w	r3, r1, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	401a      	ands	r2, r3
 800440c:	6a39      	ldr	r1, [r7, #32]
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	fa01 f303 	lsl.w	r3, r1, r3
 8004414:	431a      	orrs	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 80b1 	beq.w	800458a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004428:	4b4d      	ldr	r3, [pc, #308]	; (8004560 <HAL_GPIO_Init+0x2b8>)
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	4a4c      	ldr	r2, [pc, #304]	; (8004560 <HAL_GPIO_Init+0x2b8>)
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	6193      	str	r3, [r2, #24]
 8004434:	4b4a      	ldr	r3, [pc, #296]	; (8004560 <HAL_GPIO_Init+0x2b8>)
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004440:	4a48      	ldr	r2, [pc, #288]	; (8004564 <HAL_GPIO_Init+0x2bc>)
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	089b      	lsrs	r3, r3, #2
 8004446:	3302      	adds	r3, #2
 8004448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800444c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	f003 0303 	and.w	r3, r3, #3
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	220f      	movs	r2, #15
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	43db      	mvns	r3, r3
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4013      	ands	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a40      	ldr	r2, [pc, #256]	; (8004568 <HAL_GPIO_Init+0x2c0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d013      	beq.n	8004494 <HAL_GPIO_Init+0x1ec>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a3f      	ldr	r2, [pc, #252]	; (800456c <HAL_GPIO_Init+0x2c4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00d      	beq.n	8004490 <HAL_GPIO_Init+0x1e8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a3e      	ldr	r2, [pc, #248]	; (8004570 <HAL_GPIO_Init+0x2c8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d007      	beq.n	800448c <HAL_GPIO_Init+0x1e4>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a3d      	ldr	r2, [pc, #244]	; (8004574 <HAL_GPIO_Init+0x2cc>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d101      	bne.n	8004488 <HAL_GPIO_Init+0x1e0>
 8004484:	2303      	movs	r3, #3
 8004486:	e006      	b.n	8004496 <HAL_GPIO_Init+0x1ee>
 8004488:	2304      	movs	r3, #4
 800448a:	e004      	b.n	8004496 <HAL_GPIO_Init+0x1ee>
 800448c:	2302      	movs	r3, #2
 800448e:	e002      	b.n	8004496 <HAL_GPIO_Init+0x1ee>
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <HAL_GPIO_Init+0x1ee>
 8004494:	2300      	movs	r3, #0
 8004496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004498:	f002 0203 	and.w	r2, r2, #3
 800449c:	0092      	lsls	r2, r2, #2
 800449e:	4093      	lsls	r3, r2
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80044a6:	492f      	ldr	r1, [pc, #188]	; (8004564 <HAL_GPIO_Init+0x2bc>)
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	089b      	lsrs	r3, r3, #2
 80044ac:	3302      	adds	r3, #2
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d006      	beq.n	80044ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80044c0:	4b2d      	ldr	r3, [pc, #180]	; (8004578 <HAL_GPIO_Init+0x2d0>)
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	492c      	ldr	r1, [pc, #176]	; (8004578 <HAL_GPIO_Init+0x2d0>)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	608b      	str	r3, [r1, #8]
 80044cc:	e006      	b.n	80044dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80044ce:	4b2a      	ldr	r3, [pc, #168]	; (8004578 <HAL_GPIO_Init+0x2d0>)
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	43db      	mvns	r3, r3
 80044d6:	4928      	ldr	r1, [pc, #160]	; (8004578 <HAL_GPIO_Init+0x2d0>)
 80044d8:	4013      	ands	r3, r2
 80044da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d006      	beq.n	80044f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80044e8:	4b23      	ldr	r3, [pc, #140]	; (8004578 <HAL_GPIO_Init+0x2d0>)
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	4922      	ldr	r1, [pc, #136]	; (8004578 <HAL_GPIO_Init+0x2d0>)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60cb      	str	r3, [r1, #12]
 80044f4:	e006      	b.n	8004504 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80044f6:	4b20      	ldr	r3, [pc, #128]	; (8004578 <HAL_GPIO_Init+0x2d0>)
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	43db      	mvns	r3, r3
 80044fe:	491e      	ldr	r1, [pc, #120]	; (8004578 <HAL_GPIO_Init+0x2d0>)
 8004500:	4013      	ands	r3, r2
 8004502:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d006      	beq.n	800451e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004510:	4b19      	ldr	r3, [pc, #100]	; (8004578 <HAL_GPIO_Init+0x2d0>)
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	4918      	ldr	r1, [pc, #96]	; (8004578 <HAL_GPIO_Init+0x2d0>)
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	4313      	orrs	r3, r2
 800451a:	604b      	str	r3, [r1, #4]
 800451c:	e006      	b.n	800452c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800451e:	4b16      	ldr	r3, [pc, #88]	; (8004578 <HAL_GPIO_Init+0x2d0>)
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	43db      	mvns	r3, r3
 8004526:	4914      	ldr	r1, [pc, #80]	; (8004578 <HAL_GPIO_Init+0x2d0>)
 8004528:	4013      	ands	r3, r2
 800452a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d021      	beq.n	800457c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004538:	4b0f      	ldr	r3, [pc, #60]	; (8004578 <HAL_GPIO_Init+0x2d0>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	490e      	ldr	r1, [pc, #56]	; (8004578 <HAL_GPIO_Init+0x2d0>)
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	4313      	orrs	r3, r2
 8004542:	600b      	str	r3, [r1, #0]
 8004544:	e021      	b.n	800458a <HAL_GPIO_Init+0x2e2>
 8004546:	bf00      	nop
 8004548:	10320000 	.word	0x10320000
 800454c:	10310000 	.word	0x10310000
 8004550:	10220000 	.word	0x10220000
 8004554:	10210000 	.word	0x10210000
 8004558:	10120000 	.word	0x10120000
 800455c:	10110000 	.word	0x10110000
 8004560:	40021000 	.word	0x40021000
 8004564:	40010000 	.word	0x40010000
 8004568:	40010800 	.word	0x40010800
 800456c:	40010c00 	.word	0x40010c00
 8004570:	40011000 	.word	0x40011000
 8004574:	40011400 	.word	0x40011400
 8004578:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800457c:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <HAL_GPIO_Init+0x304>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	43db      	mvns	r3, r3
 8004584:	4909      	ldr	r1, [pc, #36]	; (80045ac <HAL_GPIO_Init+0x304>)
 8004586:	4013      	ands	r3, r2
 8004588:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	3301      	adds	r3, #1
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	fa22 f303 	lsr.w	r3, r2, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	f47f ae8e 	bne.w	80042bc <HAL_GPIO_Init+0x14>
  }
}
 80045a0:	bf00      	nop
 80045a2:	bf00      	nop
 80045a4:	372c      	adds	r7, #44	; 0x2c
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr
 80045ac:	40010400 	.word	0x40010400

080045b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	887b      	ldrh	r3, [r7, #2]
 80045c2:	4013      	ands	r3, r2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045c8:	2301      	movs	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
 80045cc:	e001      	b.n	80045d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045ce:	2300      	movs	r3, #0
 80045d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	bc80      	pop	{r7}
 80045dc:	4770      	bx	lr

080045de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	460b      	mov	r3, r1
 80045e8:	807b      	strh	r3, [r7, #2]
 80045ea:	4613      	mov	r3, r2
 80045ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045ee:	787b      	ldrb	r3, [r7, #1]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045f4:	887a      	ldrh	r2, [r7, #2]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80045fa:	e003      	b.n	8004604 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045fc:	887b      	ldrh	r3, [r7, #2]
 80045fe:	041a      	lsls	r2, r3, #16
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	611a      	str	r2, [r3, #16]
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr
	...

08004610 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800461a:	4b08      	ldr	r3, [pc, #32]	; (800463c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800461c:	695a      	ldr	r2, [r3, #20]
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	4013      	ands	r3, r2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d006      	beq.n	8004634 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004626:	4a05      	ldr	r2, [pc, #20]	; (800463c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800462c:	88fb      	ldrh	r3, [r7, #6]
 800462e:	4618      	mov	r0, r3
 8004630:	f7fc fede 	bl	80013f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40010400 	.word	0x40010400

08004640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e12b      	b.n	80048aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff fb0e 	bl	8003c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2224      	movs	r2, #36	; 0x24
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0201 	bic.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004692:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046a4:	f001 fe9e 	bl	80063e4 <HAL_RCC_GetPCLK1Freq>
 80046a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	4a81      	ldr	r2, [pc, #516]	; (80048b4 <HAL_I2C_Init+0x274>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d807      	bhi.n	80046c4 <HAL_I2C_Init+0x84>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4a80      	ldr	r2, [pc, #512]	; (80048b8 <HAL_I2C_Init+0x278>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	bf94      	ite	ls
 80046bc:	2301      	movls	r3, #1
 80046be:	2300      	movhi	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e006      	b.n	80046d2 <HAL_I2C_Init+0x92>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a7d      	ldr	r2, [pc, #500]	; (80048bc <HAL_I2C_Init+0x27c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	bf94      	ite	ls
 80046cc:	2301      	movls	r3, #1
 80046ce:	2300      	movhi	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0e7      	b.n	80048aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4a78      	ldr	r2, [pc, #480]	; (80048c0 <HAL_I2C_Init+0x280>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	0c9b      	lsrs	r3, r3, #18
 80046e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4a6a      	ldr	r2, [pc, #424]	; (80048b4 <HAL_I2C_Init+0x274>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d802      	bhi.n	8004714 <HAL_I2C_Init+0xd4>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	3301      	adds	r3, #1
 8004712:	e009      	b.n	8004728 <HAL_I2C_Init+0xe8>
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	4a69      	ldr	r2, [pc, #420]	; (80048c4 <HAL_I2C_Init+0x284>)
 8004720:	fba2 2303 	umull	r2, r3, r2, r3
 8004724:	099b      	lsrs	r3, r3, #6
 8004726:	3301      	adds	r3, #1
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	430b      	orrs	r3, r1
 800472e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800473a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	495c      	ldr	r1, [pc, #368]	; (80048b4 <HAL_I2C_Init+0x274>)
 8004744:	428b      	cmp	r3, r1
 8004746:	d819      	bhi.n	800477c <HAL_I2C_Init+0x13c>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	1e59      	subs	r1, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	fbb1 f3f3 	udiv	r3, r1, r3
 8004756:	1c59      	adds	r1, r3, #1
 8004758:	f640 73fc 	movw	r3, #4092	; 0xffc
 800475c:	400b      	ands	r3, r1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_I2C_Init+0x138>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1e59      	subs	r1, r3, #1
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004770:	3301      	adds	r3, #1
 8004772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004776:	e051      	b.n	800481c <HAL_I2C_Init+0x1dc>
 8004778:	2304      	movs	r3, #4
 800477a:	e04f      	b.n	800481c <HAL_I2C_Init+0x1dc>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d111      	bne.n	80047a8 <HAL_I2C_Init+0x168>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	1e58      	subs	r0, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6859      	ldr	r1, [r3, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	440b      	add	r3, r1
 8004792:	fbb0 f3f3 	udiv	r3, r0, r3
 8004796:	3301      	adds	r3, #1
 8004798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf0c      	ite	eq
 80047a0:	2301      	moveq	r3, #1
 80047a2:	2300      	movne	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	e012      	b.n	80047ce <HAL_I2C_Init+0x18e>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1e58      	subs	r0, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6859      	ldr	r1, [r3, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	0099      	lsls	r1, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80047be:	3301      	adds	r3, #1
 80047c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	bf0c      	ite	eq
 80047c8:	2301      	moveq	r3, #1
 80047ca:	2300      	movne	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_I2C_Init+0x196>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e022      	b.n	800481c <HAL_I2C_Init+0x1dc>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10e      	bne.n	80047fc <HAL_I2C_Init+0x1bc>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1e58      	subs	r0, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6859      	ldr	r1, [r3, #4]
 80047e6:	460b      	mov	r3, r1
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	440b      	add	r3, r1
 80047ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80047f0:	3301      	adds	r3, #1
 80047f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047fa:	e00f      	b.n	800481c <HAL_I2C_Init+0x1dc>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1e58      	subs	r0, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6859      	ldr	r1, [r3, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	0099      	lsls	r1, r3, #2
 800480c:	440b      	add	r3, r1
 800480e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004812:	3301      	adds	r3, #1
 8004814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004818:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	6809      	ldr	r1, [r1, #0]
 8004820:	4313      	orrs	r3, r2
 8004822:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69da      	ldr	r2, [r3, #28]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800484a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6911      	ldr	r1, [r2, #16]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	68d2      	ldr	r2, [r2, #12]
 8004856:	4311      	orrs	r1, r2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	430b      	orrs	r3, r1
 800485e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	000186a0 	.word	0x000186a0
 80048b8:	001e847f 	.word	0x001e847f
 80048bc:	003d08ff 	.word	0x003d08ff
 80048c0:	431bde83 	.word	0x431bde83
 80048c4:	10624dd3 	.word	0x10624dd3

080048c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	607a      	str	r2, [r7, #4]
 80048d2:	461a      	mov	r2, r3
 80048d4:	460b      	mov	r3, r1
 80048d6:	817b      	strh	r3, [r7, #10]
 80048d8:	4613      	mov	r3, r2
 80048da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048dc:	f7ff fba8 	bl	8004030 <HAL_GetTick>
 80048e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	f040 80e0 	bne.w	8004ab0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2319      	movs	r3, #25
 80048f6:	2201      	movs	r2, #1
 80048f8:	4970      	ldr	r1, [pc, #448]	; (8004abc <HAL_I2C_Master_Transmit+0x1f4>)
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 ff72 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004906:	2302      	movs	r3, #2
 8004908:	e0d3      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_I2C_Master_Transmit+0x50>
 8004914:	2302      	movs	r3, #2
 8004916:	e0cc      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b01      	cmp	r3, #1
 800492c:	d007      	beq.n	800493e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0201 	orr.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800494c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2221      	movs	r2, #33	; 0x21
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2210      	movs	r2, #16
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	893a      	ldrh	r2, [r7, #8]
 800496e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4a50      	ldr	r2, [pc, #320]	; (8004ac0 <HAL_I2C_Master_Transmit+0x1f8>)
 800497e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004980:	8979      	ldrh	r1, [r7, #10]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	6a3a      	ldr	r2, [r7, #32]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 fd2c 	bl	80053e4 <I2C_MasterRequestWrite>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e08d      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004996:	2300      	movs	r3, #0
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80049ac:	e066      	b.n	8004a7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	6a39      	ldr	r1, [r7, #32]
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f001 f830 	bl	8005a18 <I2C_WaitOnTXEFlagUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00d      	beq.n	80049da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d107      	bne.n	80049d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e06b      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	781a      	ldrb	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d11b      	bne.n	8004a50 <HAL_I2C_Master_Transmit+0x188>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d017      	beq.n	8004a50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	781a      	ldrb	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	6a39      	ldr	r1, [r7, #32]
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f001 f827 	bl	8005aa8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00d      	beq.n	8004a7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d107      	bne.n	8004a78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e01a      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d194      	bne.n	80049ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	e000      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ab0:	2302      	movs	r3, #2
  }
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	00100002 	.word	0x00100002
 8004ac0:	ffff0000 	.word	0xffff0000

08004ac4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	4608      	mov	r0, r1
 8004ace:	4611      	mov	r1, r2
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	817b      	strh	r3, [r7, #10]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	813b      	strh	r3, [r7, #8]
 8004ada:	4613      	mov	r3, r2
 8004adc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ade:	f7ff faa7 	bl	8004030 <HAL_GetTick>
 8004ae2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	f040 80d9 	bne.w	8004ca4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	2319      	movs	r3, #25
 8004af8:	2201      	movs	r2, #1
 8004afa:	496d      	ldr	r1, [pc, #436]	; (8004cb0 <HAL_I2C_Mem_Write+0x1ec>)
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 fe71 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b08:	2302      	movs	r3, #2
 8004b0a:	e0cc      	b.n	8004ca6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d101      	bne.n	8004b1a <HAL_I2C_Mem_Write+0x56>
 8004b16:	2302      	movs	r3, #2
 8004b18:	e0c5      	b.n	8004ca6 <HAL_I2C_Mem_Write+0x1e2>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d007      	beq.n	8004b40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2221      	movs	r2, #33	; 0x21
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2240      	movs	r2, #64	; 0x40
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a3a      	ldr	r2, [r7, #32]
 8004b6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4a4d      	ldr	r2, [pc, #308]	; (8004cb4 <HAL_I2C_Mem_Write+0x1f0>)
 8004b80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b82:	88f8      	ldrh	r0, [r7, #6]
 8004b84:	893a      	ldrh	r2, [r7, #8]
 8004b86:	8979      	ldrh	r1, [r7, #10]
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	9301      	str	r3, [sp, #4]
 8004b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	4603      	mov	r3, r0
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 fca8 	bl	80054e8 <I2C_RequestMemoryWrite>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d052      	beq.n	8004c44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e081      	b.n	8004ca6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 ff36 	bl	8005a18 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00d      	beq.n	8004bce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d107      	bne.n	8004bca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e06b      	b.n	8004ca6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	781a      	ldrb	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d11b      	bne.n	8004c44 <HAL_I2C_Mem_Write+0x180>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d017      	beq.n	8004c44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	781a      	ldrb	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1aa      	bne.n	8004ba2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 ff29 	bl	8005aa8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00d      	beq.n	8004c78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d107      	bne.n	8004c74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e016      	b.n	8004ca6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e000      	b.n	8004ca6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ca4:	2302      	movs	r3, #2
  }
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	00100002 	.word	0x00100002
 8004cb4:	ffff0000 	.word	0xffff0000

08004cb8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08c      	sub	sp, #48	; 0x30
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	4608      	mov	r0, r1
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	817b      	strh	r3, [r7, #10]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	813b      	strh	r3, [r7, #8]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cd6:	f7ff f9ab 	bl	8004030 <HAL_GetTick>
 8004cda:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	f040 8244 	bne.w	8005172 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	2319      	movs	r3, #25
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	4982      	ldr	r1, [pc, #520]	; (8004efc <HAL_I2C_Mem_Read+0x244>)
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 fd75 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004d00:	2302      	movs	r3, #2
 8004d02:	e237      	b.n	8005174 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_I2C_Mem_Read+0x5a>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e230      	b.n	8005174 <HAL_I2C_Mem_Read+0x4bc>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d007      	beq.n	8004d38 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2222      	movs	r2, #34	; 0x22
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2240      	movs	r2, #64	; 0x40
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4a62      	ldr	r2, [pc, #392]	; (8004f00 <HAL_I2C_Mem_Read+0x248>)
 8004d78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d7a:	88f8      	ldrh	r0, [r7, #6]
 8004d7c:	893a      	ldrh	r2, [r7, #8]
 8004d7e:	8979      	ldrh	r1, [r7, #10]
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	9301      	str	r3, [sp, #4]
 8004d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	4603      	mov	r3, r0
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fc42 	bl	8005614 <I2C_RequestMemoryRead>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e1ec      	b.n	8005174 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d113      	bne.n	8004dca <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	61fb      	str	r3, [r7, #28]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	61fb      	str	r3, [r7, #28]
 8004db6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	e1c0      	b.n	800514c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d11e      	bne.n	8004e10 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004de2:	b672      	cpsid	i
}
 8004de4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de6:	2300      	movs	r3, #0
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e0c:	b662      	cpsie	i
}
 8004e0e:	e035      	b.n	8004e7c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d11e      	bne.n	8004e56 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e28:	b672      	cpsid	i
}
 8004e2a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e52:	b662      	cpsie	i
}
 8004e54:	e012      	b.n	8004e7c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e64:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e66:	2300      	movs	r3, #0
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	613b      	str	r3, [r7, #16]
 8004e7a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004e7c:	e166      	b.n	800514c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	f200 811f 	bhi.w	80050c6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d123      	bne.n	8004ed8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 fe4f 	bl	8005b38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e167      	b.n	8005174 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ed6:	e139      	b.n	800514c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d152      	bne.n	8004f86 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	4906      	ldr	r1, [pc, #24]	; (8004f04 <HAL_I2C_Mem_Read+0x24c>)
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 fc7a 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d008      	beq.n	8004f08 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e13c      	b.n	8005174 <HAL_I2C_Mem_Read+0x4bc>
 8004efa:	bf00      	nop
 8004efc:	00100002 	.word	0x00100002
 8004f00:	ffff0000 	.word	0xffff0000
 8004f04:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004f08:	b672      	cpsid	i
}
 8004f0a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691a      	ldr	r2, [r3, #16]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004f4e:	b662      	cpsie	i
}
 8004f50:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f84:	e0e2      	b.n	800514c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	497b      	ldr	r1, [pc, #492]	; (800517c <HAL_I2C_Mem_Read+0x4c4>)
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 fc27 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0e9      	b.n	8005174 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004fb0:	b672      	cpsid	i
}
 8004fb2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691a      	ldr	r2, [r3, #16]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fe6:	4b66      	ldr	r3, [pc, #408]	; (8005180 <HAL_I2C_Mem_Read+0x4c8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	08db      	lsrs	r3, r3, #3
 8004fec:	4a65      	ldr	r2, [pc, #404]	; (8005184 <HAL_I2C_Mem_Read+0x4cc>)
 8004fee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff2:	0a1a      	lsrs	r2, r3, #8
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	00da      	lsls	r2, r3, #3
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	3b01      	subs	r3, #1
 8005004:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d118      	bne.n	800503e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2220      	movs	r2, #32
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	f043 0220 	orr.w	r2, r3, #32
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800502e:	b662      	cpsie	i
}
 8005030:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e09a      	b.n	8005174 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b04      	cmp	r3, #4
 800504a:	d1d9      	bne.n	8005000 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800505a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005084:	b29b      	uxth	r3, r3
 8005086:	3b01      	subs	r3, #1
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800508e:	b662      	cpsie	i
}
 8005090:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	691a      	ldr	r2, [r3, #16]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050c4:	e042      	b.n	800514c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 fd34 	bl	8005b38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e04c      	b.n	8005174 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b04      	cmp	r3, #4
 8005118:	d118      	bne.n	800514c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005150:	2b00      	cmp	r3, #0
 8005152:	f47f ae94 	bne.w	8004e7e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2220      	movs	r2, #32
 800515a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800516e:	2300      	movs	r3, #0
 8005170:	e000      	b.n	8005174 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005172:	2302      	movs	r3, #2
  }
}
 8005174:	4618      	mov	r0, r3
 8005176:	3728      	adds	r7, #40	; 0x28
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	00010004 	.word	0x00010004
 8005180:	20000000 	.word	0x20000000
 8005184:	14f8b589 	.word	0x14f8b589

08005188 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	; 0x28
 800518c:	af02      	add	r7, sp, #8
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	607a      	str	r2, [r7, #4]
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	460b      	mov	r3, r1
 8005196:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005198:	f7fe ff4a 	bl	8004030 <HAL_GetTick>
 800519c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b20      	cmp	r3, #32
 80051ac:	f040 8111 	bne.w	80053d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	2319      	movs	r3, #25
 80051b6:	2201      	movs	r2, #1
 80051b8:	4988      	ldr	r1, [pc, #544]	; (80053dc <HAL_I2C_IsDeviceReady+0x254>)
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 fb12 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80051c6:	2302      	movs	r3, #2
 80051c8:	e104      	b.n	80053d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_I2C_IsDeviceReady+0x50>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e0fd      	b.n	80053d4 <HAL_I2C_IsDeviceReady+0x24c>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d007      	beq.n	80051fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f042 0201 	orr.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800520c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2224      	movs	r2, #36	; 0x24
 8005212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4a70      	ldr	r2, [pc, #448]	; (80053e0 <HAL_I2C_IsDeviceReady+0x258>)
 8005220:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005230:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2200      	movs	r2, #0
 800523a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 fad0 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00d      	beq.n	8005266 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005258:	d103      	bne.n	8005262 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e0b6      	b.n	80053d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005266:	897b      	ldrh	r3, [r7, #10]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	461a      	mov	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005274:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005276:	f7fe fedb 	bl	8004030 <HAL_GetTick>
 800527a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b02      	cmp	r3, #2
 8005288:	bf0c      	ite	eq
 800528a:	2301      	moveq	r3, #1
 800528c:	2300      	movne	r3, #0
 800528e:	b2db      	uxtb	r3, r3
 8005290:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800529c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a0:	bf0c      	ite	eq
 80052a2:	2301      	moveq	r3, #1
 80052a4:	2300      	movne	r3, #0
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80052aa:	e025      	b.n	80052f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052ac:	f7fe fec0 	bl	8004030 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d302      	bcc.n	80052c2 <HAL_I2C_IsDeviceReady+0x13a>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d103      	bne.n	80052ca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	22a0      	movs	r2, #160	; 0xa0
 80052c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	bf0c      	ite	eq
 80052d8:	2301      	moveq	r3, #1
 80052da:	2300      	movne	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ee:	bf0c      	ite	eq
 80052f0:	2301      	moveq	r3, #1
 80052f2:	2300      	movne	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2ba0      	cmp	r3, #160	; 0xa0
 8005302:	d005      	beq.n	8005310 <HAL_I2C_IsDeviceReady+0x188>
 8005304:	7dfb      	ldrb	r3, [r7, #23]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d102      	bne.n	8005310 <HAL_I2C_IsDeviceReady+0x188>
 800530a:	7dbb      	ldrb	r3, [r7, #22]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0cd      	beq.n	80052ac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2220      	movs	r2, #32
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b02      	cmp	r3, #2
 8005324:	d129      	bne.n	800537a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005334:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005336:	2300      	movs	r3, #0
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	2319      	movs	r3, #25
 8005352:	2201      	movs	r2, #1
 8005354:	4921      	ldr	r1, [pc, #132]	; (80053dc <HAL_I2C_IsDeviceReady+0x254>)
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 fa44 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e036      	b.n	80053d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2220      	movs	r2, #32
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	e02c      	b.n	80053d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005388:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005392:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	2319      	movs	r3, #25
 800539a:	2201      	movs	r2, #1
 800539c:	490f      	ldr	r1, [pc, #60]	; (80053dc <HAL_I2C_IsDeviceReady+0x254>)
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 fa20 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e012      	b.n	80053d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	3301      	adds	r3, #1
 80053b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	f4ff af32 	bcc.w	8005222 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80053d2:	2302      	movs	r3, #2
  }
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3720      	adds	r7, #32
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	00100002 	.word	0x00100002
 80053e0:	ffff0000 	.word	0xffff0000

080053e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b088      	sub	sp, #32
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	607a      	str	r2, [r7, #4]
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	460b      	mov	r3, r1
 80053f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d006      	beq.n	800540e <I2C_MasterRequestWrite+0x2a>
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d003      	beq.n	800540e <I2C_MasterRequestWrite+0x2a>
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800540c:	d108      	bne.n	8005420 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	e00b      	b.n	8005438 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	2b12      	cmp	r3, #18
 8005426:	d107      	bne.n	8005438 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005436:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 f9cd 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00d      	beq.n	800546c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800545e:	d103      	bne.n	8005468 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005466:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e035      	b.n	80054d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005474:	d108      	bne.n	8005488 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005476:	897b      	ldrh	r3, [r7, #10]
 8005478:	b2db      	uxtb	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005484:	611a      	str	r2, [r3, #16]
 8005486:	e01b      	b.n	80054c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005488:	897b      	ldrh	r3, [r7, #10]
 800548a:	11db      	asrs	r3, r3, #7
 800548c:	b2db      	uxtb	r3, r3
 800548e:	f003 0306 	and.w	r3, r3, #6
 8005492:	b2db      	uxtb	r3, r3
 8005494:	f063 030f 	orn	r3, r3, #15
 8005498:	b2da      	uxtb	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	490e      	ldr	r1, [pc, #56]	; (80054e0 <I2C_MasterRequestWrite+0xfc>)
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 fa16 	bl	80058d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e010      	b.n	80054d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054b6:	897b      	ldrh	r3, [r7, #10]
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	4907      	ldr	r1, [pc, #28]	; (80054e4 <I2C_MasterRequestWrite+0x100>)
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 fa06 	bl	80058d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e000      	b.n	80054d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	00010008 	.word	0x00010008
 80054e4:	00010002 	.word	0x00010002

080054e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b088      	sub	sp, #32
 80054ec:	af02      	add	r7, sp, #8
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	4608      	mov	r0, r1
 80054f2:	4611      	mov	r1, r2
 80054f4:	461a      	mov	r2, r3
 80054f6:	4603      	mov	r3, r0
 80054f8:	817b      	strh	r3, [r7, #10]
 80054fa:	460b      	mov	r3, r1
 80054fc:	813b      	strh	r3, [r7, #8]
 80054fe:	4613      	mov	r3, r2
 8005500:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005510:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	2200      	movs	r2, #0
 800551a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 f960 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00d      	beq.n	8005546 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005538:	d103      	bne.n	8005542 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005540:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e05f      	b.n	8005606 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005546:	897b      	ldrh	r3, [r7, #10]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	461a      	mov	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005554:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	6a3a      	ldr	r2, [r7, #32]
 800555a:	492d      	ldr	r1, [pc, #180]	; (8005610 <I2C_RequestMemoryWrite+0x128>)
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f9bb 	bl	80058d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e04c      	b.n	8005606 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005584:	6a39      	ldr	r1, [r7, #32]
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 fa46 	bl	8005a18 <I2C_WaitOnTXEFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00d      	beq.n	80055ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	2b04      	cmp	r3, #4
 8005598:	d107      	bne.n	80055aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e02b      	b.n	8005606 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055ae:	88fb      	ldrh	r3, [r7, #6]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d105      	bne.n	80055c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055b4:	893b      	ldrh	r3, [r7, #8]
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	611a      	str	r2, [r3, #16]
 80055be:	e021      	b.n	8005604 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055c0:	893b      	ldrh	r3, [r7, #8]
 80055c2:	0a1b      	lsrs	r3, r3, #8
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d0:	6a39      	ldr	r1, [r7, #32]
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 fa20 	bl	8005a18 <I2C_WaitOnTXEFlagUntilTimeout>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00d      	beq.n	80055fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d107      	bne.n	80055f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e005      	b.n	8005606 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055fa:	893b      	ldrh	r3, [r7, #8]
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	00010002 	.word	0x00010002

08005614 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af02      	add	r7, sp, #8
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	4608      	mov	r0, r1
 800561e:	4611      	mov	r1, r2
 8005620:	461a      	mov	r2, r3
 8005622:	4603      	mov	r3, r0
 8005624:	817b      	strh	r3, [r7, #10]
 8005626:	460b      	mov	r3, r1
 8005628:	813b      	strh	r3, [r7, #8]
 800562a:	4613      	mov	r3, r2
 800562c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800563c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800564c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	2200      	movs	r2, #0
 8005656:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f8c2 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00d      	beq.n	8005682 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005674:	d103      	bne.n	800567e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800567c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e0aa      	b.n	80057d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005682:	897b      	ldrh	r3, [r7, #10]
 8005684:	b2db      	uxtb	r3, r3
 8005686:	461a      	mov	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005690:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	6a3a      	ldr	r2, [r7, #32]
 8005696:	4952      	ldr	r1, [pc, #328]	; (80057e0 <I2C_RequestMemoryRead+0x1cc>)
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 f91d 	bl	80058d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e097      	b.n	80057d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c0:	6a39      	ldr	r1, [r7, #32]
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 f9a8 	bl	8005a18 <I2C_WaitOnTXEFlagUntilTimeout>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00d      	beq.n	80056ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	d107      	bne.n	80056e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e076      	b.n	80057d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056ea:	88fb      	ldrh	r3, [r7, #6]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d105      	bne.n	80056fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056f0:	893b      	ldrh	r3, [r7, #8]
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	611a      	str	r2, [r3, #16]
 80056fa:	e021      	b.n	8005740 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80056fc:	893b      	ldrh	r3, [r7, #8]
 80056fe:	0a1b      	lsrs	r3, r3, #8
 8005700:	b29b      	uxth	r3, r3
 8005702:	b2da      	uxtb	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800570a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570c:	6a39      	ldr	r1, [r7, #32]
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 f982 	bl	8005a18 <I2C_WaitOnTXEFlagUntilTimeout>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00d      	beq.n	8005736 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	2b04      	cmp	r3, #4
 8005720:	d107      	bne.n	8005732 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005730:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e050      	b.n	80057d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005736:	893b      	ldrh	r3, [r7, #8]
 8005738:	b2da      	uxtb	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005742:	6a39      	ldr	r1, [r7, #32]
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 f967 	bl	8005a18 <I2C_WaitOnTXEFlagUntilTimeout>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00d      	beq.n	800576c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	2b04      	cmp	r3, #4
 8005756:	d107      	bne.n	8005768 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005766:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e035      	b.n	80057d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800577a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	2200      	movs	r2, #0
 8005784:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f82b 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00d      	beq.n	80057b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a2:	d103      	bne.n	80057ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e013      	b.n	80057d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057b0:	897b      	ldrh	r3, [r7, #10]
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	f043 0301 	orr.w	r3, r3, #1
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	6a3a      	ldr	r2, [r7, #32]
 80057c4:	4906      	ldr	r1, [pc, #24]	; (80057e0 <I2C_RequestMemoryRead+0x1cc>)
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 f886 	bl	80058d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e000      	b.n	80057d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	00010002 	.word	0x00010002

080057e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	603b      	str	r3, [r7, #0]
 80057f0:	4613      	mov	r3, r2
 80057f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057f4:	e048      	b.n	8005888 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fc:	d044      	beq.n	8005888 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057fe:	f7fe fc17 	bl	8004030 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	429a      	cmp	r2, r3
 800580c:	d302      	bcc.n	8005814 <I2C_WaitOnFlagUntilTimeout+0x30>
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d139      	bne.n	8005888 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	0c1b      	lsrs	r3, r3, #16
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b01      	cmp	r3, #1
 800581c:	d10d      	bne.n	800583a <I2C_WaitOnFlagUntilTimeout+0x56>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	43da      	mvns	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	4013      	ands	r3, r2
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	bf0c      	ite	eq
 8005830:	2301      	moveq	r3, #1
 8005832:	2300      	movne	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	461a      	mov	r2, r3
 8005838:	e00c      	b.n	8005854 <I2C_WaitOnFlagUntilTimeout+0x70>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	43da      	mvns	r2, r3
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	4013      	ands	r3, r2
 8005846:	b29b      	uxth	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	bf0c      	ite	eq
 800584c:	2301      	moveq	r3, #1
 800584e:	2300      	movne	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	461a      	mov	r2, r3
 8005854:	79fb      	ldrb	r3, [r7, #7]
 8005856:	429a      	cmp	r2, r3
 8005858:	d116      	bne.n	8005888 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2220      	movs	r2, #32
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	f043 0220 	orr.w	r2, r3, #32
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e023      	b.n	80058d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	0c1b      	lsrs	r3, r3, #16
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b01      	cmp	r3, #1
 8005890:	d10d      	bne.n	80058ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	43da      	mvns	r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	4013      	ands	r3, r2
 800589e:	b29b      	uxth	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	bf0c      	ite	eq
 80058a4:	2301      	moveq	r3, #1
 80058a6:	2300      	movne	r3, #0
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	461a      	mov	r2, r3
 80058ac:	e00c      	b.n	80058c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	43da      	mvns	r2, r3
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	4013      	ands	r3, r2
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bf0c      	ite	eq
 80058c0:	2301      	moveq	r3, #1
 80058c2:	2300      	movne	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	461a      	mov	r2, r3
 80058c8:	79fb      	ldrb	r3, [r7, #7]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d093      	beq.n	80057f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058e6:	e071      	b.n	80059cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f6:	d123      	bne.n	8005940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005906:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005910:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592c:	f043 0204 	orr.w	r2, r3, #4
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e067      	b.n	8005a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005946:	d041      	beq.n	80059cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005948:	f7fe fb72 	bl	8004030 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	429a      	cmp	r2, r3
 8005956:	d302      	bcc.n	800595e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d136      	bne.n	80059cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	0c1b      	lsrs	r3, r3, #16
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b01      	cmp	r3, #1
 8005966:	d10c      	bne.n	8005982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	43da      	mvns	r2, r3
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	4013      	ands	r3, r2
 8005974:	b29b      	uxth	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	bf14      	ite	ne
 800597a:	2301      	movne	r3, #1
 800597c:	2300      	moveq	r3, #0
 800597e:	b2db      	uxtb	r3, r3
 8005980:	e00b      	b.n	800599a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	43da      	mvns	r2, r3
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	4013      	ands	r3, r2
 800598e:	b29b      	uxth	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	bf14      	ite	ne
 8005994:	2301      	movne	r3, #1
 8005996:	2300      	moveq	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d016      	beq.n	80059cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	f043 0220 	orr.w	r2, r3, #32
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e021      	b.n	8005a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	0c1b      	lsrs	r3, r3, #16
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d10c      	bne.n	80059f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	43da      	mvns	r2, r3
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	4013      	ands	r3, r2
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	bf14      	ite	ne
 80059e8:	2301      	movne	r3, #1
 80059ea:	2300      	moveq	r3, #0
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	e00b      	b.n	8005a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	43da      	mvns	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4013      	ands	r3, r2
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	bf14      	ite	ne
 8005a02:	2301      	movne	r3, #1
 8005a04:	2300      	moveq	r3, #0
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f47f af6d 	bne.w	80058e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a24:	e034      	b.n	8005a90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f8e3 	bl	8005bf2 <I2C_IsAcknowledgeFailed>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e034      	b.n	8005aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3c:	d028      	beq.n	8005a90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a3e:	f7fe faf7 	bl	8004030 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d302      	bcc.n	8005a54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d11d      	bne.n	8005a90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5e:	2b80      	cmp	r3, #128	; 0x80
 8005a60:	d016      	beq.n	8005a90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7c:	f043 0220 	orr.w	r2, r3, #32
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e007      	b.n	8005aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9a:	2b80      	cmp	r3, #128	; 0x80
 8005a9c:	d1c3      	bne.n	8005a26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ab4:	e034      	b.n	8005b20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 f89b 	bl	8005bf2 <I2C_IsAcknowledgeFailed>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e034      	b.n	8005b30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005acc:	d028      	beq.n	8005b20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ace:	f7fe faaf 	bl	8004030 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d302      	bcc.n	8005ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d11d      	bne.n	8005b20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	f003 0304 	and.w	r3, r3, #4
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	d016      	beq.n	8005b20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0c:	f043 0220 	orr.w	r2, r3, #32
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e007      	b.n	8005b30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	f003 0304 	and.w	r3, r3, #4
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d1c3      	bne.n	8005ab6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b44:	e049      	b.n	8005bda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	f003 0310 	and.w	r3, r3, #16
 8005b50:	2b10      	cmp	r3, #16
 8005b52:	d119      	bne.n	8005b88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0210 	mvn.w	r2, #16
 8005b5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e030      	b.n	8005bea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b88:	f7fe fa52 	bl	8004030 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d302      	bcc.n	8005b9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d11d      	bne.n	8005bda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba8:	2b40      	cmp	r3, #64	; 0x40
 8005baa:	d016      	beq.n	8005bda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	f043 0220 	orr.w	r2, r3, #32
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e007      	b.n	8005bea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	d1ae      	bne.n	8005b46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c08:	d11b      	bne.n	8005c42 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c12:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f043 0204 	orr.w	r2, r3, #4
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bc80      	pop	{r7}
 8005c4c:	4770      	bx	lr
	...

08005c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e272      	b.n	8006148 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 8087 	beq.w	8005d7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c70:	4b92      	ldr	r3, [pc, #584]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f003 030c 	and.w	r3, r3, #12
 8005c78:	2b04      	cmp	r3, #4
 8005c7a:	d00c      	beq.n	8005c96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c7c:	4b8f      	ldr	r3, [pc, #572]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f003 030c 	and.w	r3, r3, #12
 8005c84:	2b08      	cmp	r3, #8
 8005c86:	d112      	bne.n	8005cae <HAL_RCC_OscConfig+0x5e>
 8005c88:	4b8c      	ldr	r3, [pc, #560]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c94:	d10b      	bne.n	8005cae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c96:	4b89      	ldr	r3, [pc, #548]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d06c      	beq.n	8005d7c <HAL_RCC_OscConfig+0x12c>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d168      	bne.n	8005d7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e24c      	b.n	8006148 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb6:	d106      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x76>
 8005cb8:	4b80      	ldr	r3, [pc, #512]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a7f      	ldr	r2, [pc, #508]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	e02e      	b.n	8005d24 <HAL_RCC_OscConfig+0xd4>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10c      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x98>
 8005cce:	4b7b      	ldr	r3, [pc, #492]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a7a      	ldr	r2, [pc, #488]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	4b78      	ldr	r3, [pc, #480]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a77      	ldr	r2, [pc, #476]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	e01d      	b.n	8005d24 <HAL_RCC_OscConfig+0xd4>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cf0:	d10c      	bne.n	8005d0c <HAL_RCC_OscConfig+0xbc>
 8005cf2:	4b72      	ldr	r3, [pc, #456]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a71      	ldr	r2, [pc, #452]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	4b6f      	ldr	r3, [pc, #444]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a6e      	ldr	r2, [pc, #440]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	e00b      	b.n	8005d24 <HAL_RCC_OscConfig+0xd4>
 8005d0c:	4b6b      	ldr	r3, [pc, #428]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a6a      	ldr	r2, [pc, #424]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	4b68      	ldr	r3, [pc, #416]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a67      	ldr	r2, [pc, #412]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d013      	beq.n	8005d54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d2c:	f7fe f980 	bl	8004030 <HAL_GetTick>
 8005d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d34:	f7fe f97c 	bl	8004030 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b64      	cmp	r3, #100	; 0x64
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e200      	b.n	8006148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d46:	4b5d      	ldr	r3, [pc, #372]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0f0      	beq.n	8005d34 <HAL_RCC_OscConfig+0xe4>
 8005d52:	e014      	b.n	8005d7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d54:	f7fe f96c 	bl	8004030 <HAL_GetTick>
 8005d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d5c:	f7fe f968 	bl	8004030 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b64      	cmp	r3, #100	; 0x64
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e1ec      	b.n	8006148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d6e:	4b53      	ldr	r3, [pc, #332]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1f0      	bne.n	8005d5c <HAL_RCC_OscConfig+0x10c>
 8005d7a:	e000      	b.n	8005d7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d063      	beq.n	8005e52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d8a:	4b4c      	ldr	r3, [pc, #304]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f003 030c 	and.w	r3, r3, #12
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00b      	beq.n	8005dae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005d96:	4b49      	ldr	r3, [pc, #292]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f003 030c 	and.w	r3, r3, #12
 8005d9e:	2b08      	cmp	r3, #8
 8005da0:	d11c      	bne.n	8005ddc <HAL_RCC_OscConfig+0x18c>
 8005da2:	4b46      	ldr	r3, [pc, #280]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d116      	bne.n	8005ddc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dae:	4b43      	ldr	r3, [pc, #268]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d005      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x176>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d001      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e1c0      	b.n	8006148 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc6:	4b3d      	ldr	r3, [pc, #244]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	4939      	ldr	r1, [pc, #228]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dda:	e03a      	b.n	8005e52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d020      	beq.n	8005e26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005de4:	4b36      	ldr	r3, [pc, #216]	; (8005ec0 <HAL_RCC_OscConfig+0x270>)
 8005de6:	2201      	movs	r2, #1
 8005de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dea:	f7fe f921 	bl	8004030 <HAL_GetTick>
 8005dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005df2:	f7fe f91d 	bl	8004030 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e1a1      	b.n	8006148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e04:	4b2d      	ldr	r3, [pc, #180]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0f0      	beq.n	8005df2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e10:	4b2a      	ldr	r3, [pc, #168]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	4927      	ldr	r1, [pc, #156]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	600b      	str	r3, [r1, #0]
 8005e24:	e015      	b.n	8005e52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e26:	4b26      	ldr	r3, [pc, #152]	; (8005ec0 <HAL_RCC_OscConfig+0x270>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e2c:	f7fe f900 	bl	8004030 <HAL_GetTick>
 8005e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e34:	f7fe f8fc 	bl	8004030 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e180      	b.n	8006148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e46:	4b1d      	ldr	r3, [pc, #116]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1f0      	bne.n	8005e34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0308 	and.w	r3, r3, #8
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d03a      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d019      	beq.n	8005e9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e66:	4b17      	ldr	r3, [pc, #92]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e6c:	f7fe f8e0 	bl	8004030 <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e74:	f7fe f8dc 	bl	8004030 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e160      	b.n	8006148 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e86:	4b0d      	ldr	r3, [pc, #52]	; (8005ebc <HAL_RCC_OscConfig+0x26c>)
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0f0      	beq.n	8005e74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005e92:	2001      	movs	r0, #1
 8005e94:	f000 faba 	bl	800640c <RCC_Delay>
 8005e98:	e01c      	b.n	8005ed4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e9a:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ea0:	f7fe f8c6 	bl	8004030 <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ea6:	e00f      	b.n	8005ec8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ea8:	f7fe f8c2 	bl	8004030 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d908      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e146      	b.n	8006148 <HAL_RCC_OscConfig+0x4f8>
 8005eba:	bf00      	nop
 8005ebc:	40021000 	.word	0x40021000
 8005ec0:	42420000 	.word	0x42420000
 8005ec4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ec8:	4b92      	ldr	r3, [pc, #584]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e9      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80a6 	beq.w	800602e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ee6:	4b8b      	ldr	r3, [pc, #556]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10d      	bne.n	8005f0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ef2:	4b88      	ldr	r3, [pc, #544]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	4a87      	ldr	r2, [pc, #540]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8005ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efc:	61d3      	str	r3, [r2, #28]
 8005efe:	4b85      	ldr	r3, [pc, #532]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f06:	60bb      	str	r3, [r7, #8]
 8005f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f0e:	4b82      	ldr	r3, [pc, #520]	; (8006118 <HAL_RCC_OscConfig+0x4c8>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d118      	bne.n	8005f4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f1a:	4b7f      	ldr	r3, [pc, #508]	; (8006118 <HAL_RCC_OscConfig+0x4c8>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a7e      	ldr	r2, [pc, #504]	; (8006118 <HAL_RCC_OscConfig+0x4c8>)
 8005f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f26:	f7fe f883 	bl	8004030 <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f2e:	f7fe f87f 	bl	8004030 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b64      	cmp	r3, #100	; 0x64
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e103      	b.n	8006148 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f40:	4b75      	ldr	r3, [pc, #468]	; (8006118 <HAL_RCC_OscConfig+0x4c8>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0f0      	beq.n	8005f2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d106      	bne.n	8005f62 <HAL_RCC_OscConfig+0x312>
 8005f54:	4b6f      	ldr	r3, [pc, #444]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	4a6e      	ldr	r2, [pc, #440]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8005f5a:	f043 0301 	orr.w	r3, r3, #1
 8005f5e:	6213      	str	r3, [r2, #32]
 8005f60:	e02d      	b.n	8005fbe <HAL_RCC_OscConfig+0x36e>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10c      	bne.n	8005f84 <HAL_RCC_OscConfig+0x334>
 8005f6a:	4b6a      	ldr	r3, [pc, #424]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	4a69      	ldr	r2, [pc, #420]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8005f70:	f023 0301 	bic.w	r3, r3, #1
 8005f74:	6213      	str	r3, [r2, #32]
 8005f76:	4b67      	ldr	r3, [pc, #412]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	4a66      	ldr	r2, [pc, #408]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8005f7c:	f023 0304 	bic.w	r3, r3, #4
 8005f80:	6213      	str	r3, [r2, #32]
 8005f82:	e01c      	b.n	8005fbe <HAL_RCC_OscConfig+0x36e>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	2b05      	cmp	r3, #5
 8005f8a:	d10c      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x356>
 8005f8c:	4b61      	ldr	r3, [pc, #388]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	4a60      	ldr	r2, [pc, #384]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8005f92:	f043 0304 	orr.w	r3, r3, #4
 8005f96:	6213      	str	r3, [r2, #32]
 8005f98:	4b5e      	ldr	r3, [pc, #376]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	4a5d      	ldr	r2, [pc, #372]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8005f9e:	f043 0301 	orr.w	r3, r3, #1
 8005fa2:	6213      	str	r3, [r2, #32]
 8005fa4:	e00b      	b.n	8005fbe <HAL_RCC_OscConfig+0x36e>
 8005fa6:	4b5b      	ldr	r3, [pc, #364]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	4a5a      	ldr	r2, [pc, #360]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8005fac:	f023 0301 	bic.w	r3, r3, #1
 8005fb0:	6213      	str	r3, [r2, #32]
 8005fb2:	4b58      	ldr	r3, [pc, #352]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	4a57      	ldr	r2, [pc, #348]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8005fb8:	f023 0304 	bic.w	r3, r3, #4
 8005fbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d015      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fc6:	f7fe f833 	bl	8004030 <HAL_GetTick>
 8005fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fcc:	e00a      	b.n	8005fe4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fce:	f7fe f82f 	bl	8004030 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d901      	bls.n	8005fe4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e0b1      	b.n	8006148 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe4:	4b4b      	ldr	r3, [pc, #300]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0ee      	beq.n	8005fce <HAL_RCC_OscConfig+0x37e>
 8005ff0:	e014      	b.n	800601c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ff2:	f7fe f81d 	bl	8004030 <HAL_GetTick>
 8005ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ff8:	e00a      	b.n	8006010 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ffa:	f7fe f819 	bl	8004030 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	f241 3288 	movw	r2, #5000	; 0x1388
 8006008:	4293      	cmp	r3, r2
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e09b      	b.n	8006148 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006010:	4b40      	ldr	r3, [pc, #256]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1ee      	bne.n	8005ffa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800601c:	7dfb      	ldrb	r3, [r7, #23]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d105      	bne.n	800602e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006022:	4b3c      	ldr	r3, [pc, #240]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	4a3b      	ldr	r2, [pc, #236]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8006028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800602c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 8087 	beq.w	8006146 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006038:	4b36      	ldr	r3, [pc, #216]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f003 030c 	and.w	r3, r3, #12
 8006040:	2b08      	cmp	r3, #8
 8006042:	d061      	beq.n	8006108 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	2b02      	cmp	r3, #2
 800604a:	d146      	bne.n	80060da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800604c:	4b33      	ldr	r3, [pc, #204]	; (800611c <HAL_RCC_OscConfig+0x4cc>)
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006052:	f7fd ffed 	bl	8004030 <HAL_GetTick>
 8006056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006058:	e008      	b.n	800606c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800605a:	f7fd ffe9 	bl	8004030 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e06d      	b.n	8006148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800606c:	4b29      	ldr	r3, [pc, #164]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1f0      	bne.n	800605a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006080:	d108      	bne.n	8006094 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006082:	4b24      	ldr	r3, [pc, #144]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	4921      	ldr	r1, [pc, #132]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8006090:	4313      	orrs	r3, r2
 8006092:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006094:	4b1f      	ldr	r3, [pc, #124]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a19      	ldr	r1, [r3, #32]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	430b      	orrs	r3, r1
 80060a6:	491b      	ldr	r1, [pc, #108]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060ac:	4b1b      	ldr	r3, [pc, #108]	; (800611c <HAL_RCC_OscConfig+0x4cc>)
 80060ae:	2201      	movs	r2, #1
 80060b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b2:	f7fd ffbd 	bl	8004030 <HAL_GetTick>
 80060b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060b8:	e008      	b.n	80060cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060ba:	f7fd ffb9 	bl	8004030 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d901      	bls.n	80060cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e03d      	b.n	8006148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060cc:	4b11      	ldr	r3, [pc, #68]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d0f0      	beq.n	80060ba <HAL_RCC_OscConfig+0x46a>
 80060d8:	e035      	b.n	8006146 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060da:	4b10      	ldr	r3, [pc, #64]	; (800611c <HAL_RCC_OscConfig+0x4cc>)
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e0:	f7fd ffa6 	bl	8004030 <HAL_GetTick>
 80060e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060e8:	f7fd ffa2 	bl	8004030 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e026      	b.n	8006148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060fa:	4b06      	ldr	r3, [pc, #24]	; (8006114 <HAL_RCC_OscConfig+0x4c4>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1f0      	bne.n	80060e8 <HAL_RCC_OscConfig+0x498>
 8006106:	e01e      	b.n	8006146 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d107      	bne.n	8006120 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e019      	b.n	8006148 <HAL_RCC_OscConfig+0x4f8>
 8006114:	40021000 	.word	0x40021000
 8006118:	40007000 	.word	0x40007000
 800611c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006120:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <HAL_RCC_OscConfig+0x500>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	429a      	cmp	r2, r3
 8006132:	d106      	bne.n	8006142 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800613e:	429a      	cmp	r2, r3
 8006140:	d001      	beq.n	8006146 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e000      	b.n	8006148 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	40021000 	.word	0x40021000

08006154 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e0d0      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006168:	4b6a      	ldr	r3, [pc, #424]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d910      	bls.n	8006198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006176:	4b67      	ldr	r3, [pc, #412]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f023 0207 	bic.w	r2, r3, #7
 800617e:	4965      	ldr	r1, [pc, #404]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	4313      	orrs	r3, r2
 8006184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006186:	4b63      	ldr	r3, [pc, #396]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d001      	beq.n	8006198 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e0b8      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d020      	beq.n	80061e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061b0:	4b59      	ldr	r3, [pc, #356]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	4a58      	ldr	r2, [pc, #352]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80061ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d005      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061c8:	4b53      	ldr	r3, [pc, #332]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	4a52      	ldr	r2, [pc, #328]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80061d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061d4:	4b50      	ldr	r3, [pc, #320]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	494d      	ldr	r1, [pc, #308]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d040      	beq.n	8006274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d107      	bne.n	800620a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061fa:	4b47      	ldr	r3, [pc, #284]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d115      	bne.n	8006232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e07f      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2b02      	cmp	r3, #2
 8006210:	d107      	bne.n	8006222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006212:	4b41      	ldr	r3, [pc, #260]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d109      	bne.n	8006232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e073      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006222:	4b3d      	ldr	r3, [pc, #244]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e06b      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006232:	4b39      	ldr	r3, [pc, #228]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f023 0203 	bic.w	r2, r3, #3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	4936      	ldr	r1, [pc, #216]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 8006240:	4313      	orrs	r3, r2
 8006242:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006244:	f7fd fef4 	bl	8004030 <HAL_GetTick>
 8006248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800624a:	e00a      	b.n	8006262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800624c:	f7fd fef0 	bl	8004030 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	f241 3288 	movw	r2, #5000	; 0x1388
 800625a:	4293      	cmp	r3, r2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e053      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006262:	4b2d      	ldr	r3, [pc, #180]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f003 020c 	and.w	r2, r3, #12
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	429a      	cmp	r2, r3
 8006272:	d1eb      	bne.n	800624c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006274:	4b27      	ldr	r3, [pc, #156]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d210      	bcs.n	80062a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006282:	4b24      	ldr	r3, [pc, #144]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f023 0207 	bic.w	r2, r3, #7
 800628a:	4922      	ldr	r1, [pc, #136]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	4313      	orrs	r3, r2
 8006290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006292:	4b20      	ldr	r3, [pc, #128]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d001      	beq.n	80062a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e032      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d008      	beq.n	80062c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062b0:	4b19      	ldr	r3, [pc, #100]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	4916      	ldr	r1, [pc, #88]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d009      	beq.n	80062e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80062ce:	4b12      	ldr	r3, [pc, #72]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	490e      	ldr	r1, [pc, #56]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062e2:	f000 f821 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 80062e6:	4602      	mov	r2, r0
 80062e8:	4b0b      	ldr	r3, [pc, #44]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	091b      	lsrs	r3, r3, #4
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	490a      	ldr	r1, [pc, #40]	; (800631c <HAL_RCC_ClockConfig+0x1c8>)
 80062f4:	5ccb      	ldrb	r3, [r1, r3]
 80062f6:	fa22 f303 	lsr.w	r3, r2, r3
 80062fa:	4a09      	ldr	r2, [pc, #36]	; (8006320 <HAL_RCC_ClockConfig+0x1cc>)
 80062fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80062fe:	4b09      	ldr	r3, [pc, #36]	; (8006324 <HAL_RCC_ClockConfig+0x1d0>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4618      	mov	r0, r3
 8006304:	f7fd fe52 	bl	8003fac <HAL_InitTick>

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	40022000 	.word	0x40022000
 8006318:	40021000 	.word	0x40021000
 800631c:	08007ac8 	.word	0x08007ac8
 8006320:	20000000 	.word	0x20000000
 8006324:	20000004 	.word	0x20000004

08006328 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	2300      	movs	r3, #0
 8006334:	60bb      	str	r3, [r7, #8]
 8006336:	2300      	movs	r3, #0
 8006338:	617b      	str	r3, [r7, #20]
 800633a:	2300      	movs	r3, #0
 800633c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006342:	4b1e      	ldr	r3, [pc, #120]	; (80063bc <HAL_RCC_GetSysClockFreq+0x94>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f003 030c 	and.w	r3, r3, #12
 800634e:	2b04      	cmp	r3, #4
 8006350:	d002      	beq.n	8006358 <HAL_RCC_GetSysClockFreq+0x30>
 8006352:	2b08      	cmp	r3, #8
 8006354:	d003      	beq.n	800635e <HAL_RCC_GetSysClockFreq+0x36>
 8006356:	e027      	b.n	80063a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006358:	4b19      	ldr	r3, [pc, #100]	; (80063c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800635a:	613b      	str	r3, [r7, #16]
      break;
 800635c:	e027      	b.n	80063ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	0c9b      	lsrs	r3, r3, #18
 8006362:	f003 030f 	and.w	r3, r3, #15
 8006366:	4a17      	ldr	r2, [pc, #92]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006368:	5cd3      	ldrb	r3, [r2, r3]
 800636a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d010      	beq.n	8006398 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006376:	4b11      	ldr	r3, [pc, #68]	; (80063bc <HAL_RCC_GetSysClockFreq+0x94>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	0c5b      	lsrs	r3, r3, #17
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	4a11      	ldr	r2, [pc, #68]	; (80063c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006382:	5cd3      	ldrb	r3, [r2, r3]
 8006384:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a0d      	ldr	r2, [pc, #52]	; (80063c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800638a:	fb03 f202 	mul.w	r2, r3, r2
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	fbb2 f3f3 	udiv	r3, r2, r3
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	e004      	b.n	80063a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a0c      	ldr	r2, [pc, #48]	; (80063cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800639c:	fb02 f303 	mul.w	r3, r2, r3
 80063a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	613b      	str	r3, [r7, #16]
      break;
 80063a6:	e002      	b.n	80063ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80063a8:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80063aa:	613b      	str	r3, [r7, #16]
      break;
 80063ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063ae:	693b      	ldr	r3, [r7, #16]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc80      	pop	{r7}
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	40021000 	.word	0x40021000
 80063c0:	007a1200 	.word	0x007a1200
 80063c4:	08007ae0 	.word	0x08007ae0
 80063c8:	08007af0 	.word	0x08007af0
 80063cc:	003d0900 	.word	0x003d0900

080063d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063d4:	4b02      	ldr	r3, [pc, #8]	; (80063e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80063d6:	681b      	ldr	r3, [r3, #0]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	46bd      	mov	sp, r7
 80063dc:	bc80      	pop	{r7}
 80063de:	4770      	bx	lr
 80063e0:	20000000 	.word	0x20000000

080063e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063e8:	f7ff fff2 	bl	80063d0 <HAL_RCC_GetHCLKFreq>
 80063ec:	4602      	mov	r2, r0
 80063ee:	4b05      	ldr	r3, [pc, #20]	; (8006404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	0a1b      	lsrs	r3, r3, #8
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	4903      	ldr	r1, [pc, #12]	; (8006408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063fa:	5ccb      	ldrb	r3, [r1, r3]
 80063fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006400:	4618      	mov	r0, r3
 8006402:	bd80      	pop	{r7, pc}
 8006404:	40021000 	.word	0x40021000
 8006408:	08007ad8 	.word	0x08007ad8

0800640c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006414:	4b0a      	ldr	r3, [pc, #40]	; (8006440 <RCC_Delay+0x34>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a0a      	ldr	r2, [pc, #40]	; (8006444 <RCC_Delay+0x38>)
 800641a:	fba2 2303 	umull	r2, r3, r2, r3
 800641e:	0a5b      	lsrs	r3, r3, #9
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	fb02 f303 	mul.w	r3, r2, r3
 8006426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006428:	bf00      	nop
  }
  while (Delay --);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	1e5a      	subs	r2, r3, #1
 800642e:	60fa      	str	r2, [r7, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1f9      	bne.n	8006428 <RCC_Delay+0x1c>
}
 8006434:	bf00      	nop
 8006436:	bf00      	nop
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	bc80      	pop	{r7}
 800643e:	4770      	bx	lr
 8006440:	20000000 	.word	0x20000000
 8006444:	10624dd3 	.word	0x10624dd3

08006448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e041      	b.n	80064de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d106      	bne.n	8006474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7fd fc48 	bl	8003d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3304      	adds	r3, #4
 8006484:	4619      	mov	r1, r3
 8006486:	4610      	mov	r0, r2
 8006488:	f000 fbe2 	bl	8006c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
	...

080064e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d001      	beq.n	8006500 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e032      	b.n	8006566 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a18      	ldr	r2, [pc, #96]	; (8006570 <HAL_TIM_Base_Start+0x88>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00e      	beq.n	8006530 <HAL_TIM_Base_Start+0x48>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800651a:	d009      	beq.n	8006530 <HAL_TIM_Base_Start+0x48>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a14      	ldr	r2, [pc, #80]	; (8006574 <HAL_TIM_Base_Start+0x8c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d004      	beq.n	8006530 <HAL_TIM_Base_Start+0x48>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a13      	ldr	r2, [pc, #76]	; (8006578 <HAL_TIM_Base_Start+0x90>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d111      	bne.n	8006554 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f003 0307 	and.w	r3, r3, #7
 800653a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b06      	cmp	r3, #6
 8006540:	d010      	beq.n	8006564 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 0201 	orr.w	r2, r2, #1
 8006550:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006552:	e007      	b.n	8006564 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0201 	orr.w	r2, r2, #1
 8006562:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	bc80      	pop	{r7}
 800656e:	4770      	bx	lr
 8006570:	40012c00 	.word	0x40012c00
 8006574:	40000400 	.word	0x40000400
 8006578:	40000800 	.word	0x40000800

0800657c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6a1a      	ldr	r2, [r3, #32]
 800658a:	f241 1311 	movw	r3, #4369	; 0x1111
 800658e:	4013      	ands	r3, r2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10f      	bne.n	80065b4 <HAL_TIM_Base_Stop+0x38>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6a1a      	ldr	r2, [r3, #32]
 800659a:	f240 4344 	movw	r3, #1092	; 0x444
 800659e:	4013      	ands	r3, r2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d107      	bne.n	80065b4 <HAL_TIM_Base_Stop+0x38>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0201 	bic.w	r2, r2, #1
 80065b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bc80      	pop	{r7}
 80065c6:	4770      	bx	lr

080065c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e093      	b.n	8006704 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d106      	bne.n	80065f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7fd fbcb 	bl	8003d8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2202      	movs	r2, #2
 80065fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6812      	ldr	r2, [r2, #0]
 8006608:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800660c:	f023 0307 	bic.w	r3, r3, #7
 8006610:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	3304      	adds	r3, #4
 800661a:	4619      	mov	r1, r3
 800661c:	4610      	mov	r0, r2
 800661e:	f000 fb17 	bl	8006c50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	4313      	orrs	r3, r2
 8006642:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800664a:	f023 0303 	bic.w	r3, r3, #3
 800664e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	021b      	lsls	r3, r3, #8
 800665a:	4313      	orrs	r3, r2
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	4313      	orrs	r3, r2
 8006660:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006668:	f023 030c 	bic.w	r3, r3, #12
 800666c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006674:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006678:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68da      	ldr	r2, [r3, #12]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	021b      	lsls	r3, r3, #8
 8006684:	4313      	orrs	r3, r2
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	4313      	orrs	r3, r2
 800668a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	011a      	lsls	r2, r3, #4
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	031b      	lsls	r3, r3, #12
 8006698:	4313      	orrs	r3, r2
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	4313      	orrs	r3, r2
 800669e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80066a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	011b      	lsls	r3, r3, #4
 80066b2:	4313      	orrs	r3, r2
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800671c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006724:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800672c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006734:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d110      	bne.n	800675e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d102      	bne.n	8006748 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006742:	7b7b      	ldrb	r3, [r7, #13]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d001      	beq.n	800674c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e089      	b.n	8006860 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800675c:	e031      	b.n	80067c2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b04      	cmp	r3, #4
 8006762:	d110      	bne.n	8006786 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006764:	7bbb      	ldrb	r3, [r7, #14]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d102      	bne.n	8006770 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800676a:	7b3b      	ldrb	r3, [r7, #12]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d001      	beq.n	8006774 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e075      	b.n	8006860 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006784:	e01d      	b.n	80067c2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d108      	bne.n	800679e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800678c:	7bbb      	ldrb	r3, [r7, #14]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d105      	bne.n	800679e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006792:	7b7b      	ldrb	r3, [r7, #13]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d102      	bne.n	800679e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006798:	7b3b      	ldrb	r3, [r7, #12]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d001      	beq.n	80067a2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e05e      	b.n	8006860 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2202      	movs	r2, #2
 80067a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2202      	movs	r2, #2
 80067ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2202      	movs	r2, #2
 80067b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2202      	movs	r2, #2
 80067be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <HAL_TIM_Encoder_Start_IT+0xc4>
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	d010      	beq.n	80067f0 <HAL_TIM_Encoder_Start_IT+0xe4>
 80067ce:	e01f      	b.n	8006810 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2201      	movs	r2, #1
 80067d6:	2100      	movs	r1, #0
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 fb31 	bl	8006e40 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f042 0202 	orr.w	r2, r2, #2
 80067ec:	60da      	str	r2, [r3, #12]
      break;
 80067ee:	e02e      	b.n	800684e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2201      	movs	r2, #1
 80067f6:	2104      	movs	r1, #4
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 fb21 	bl	8006e40 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68da      	ldr	r2, [r3, #12]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f042 0204 	orr.w	r2, r2, #4
 800680c:	60da      	str	r2, [r3, #12]
      break;
 800680e:	e01e      	b.n	800684e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2201      	movs	r2, #1
 8006816:	2100      	movs	r1, #0
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fb11 	bl	8006e40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2201      	movs	r2, #1
 8006824:	2104      	movs	r1, #4
 8006826:	4618      	mov	r0, r3
 8006828:	f000 fb0a 	bl	8006e40 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0202 	orr.w	r2, r2, #2
 800683a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0204 	orr.w	r2, r2, #4
 800684a:	60da      	str	r2, [r3, #12]
      break;
 800684c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f042 0201 	orr.w	r2, r2, #1
 800685c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b02      	cmp	r3, #2
 800687c:	d122      	bne.n	80068c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b02      	cmp	r3, #2
 800688a:	d11b      	bne.n	80068c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f06f 0202 	mvn.w	r2, #2
 8006894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7fa fd8e 	bl	80013cc <HAL_TIM_IC_CaptureCallback>
 80068b0:	e005      	b.n	80068be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f9b0 	bl	8006c18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f9b6 	bl	8006c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d122      	bne.n	8006918 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f003 0304 	and.w	r3, r3, #4
 80068dc:	2b04      	cmp	r3, #4
 80068de:	d11b      	bne.n	8006918 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f06f 0204 	mvn.w	r2, #4
 80068e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2202      	movs	r2, #2
 80068ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fa fd64 	bl	80013cc <HAL_TIM_IC_CaptureCallback>
 8006904:	e005      	b.n	8006912 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f986 	bl	8006c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f98c 	bl	8006c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	f003 0308 	and.w	r3, r3, #8
 8006922:	2b08      	cmp	r3, #8
 8006924:	d122      	bne.n	800696c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f003 0308 	and.w	r3, r3, #8
 8006930:	2b08      	cmp	r3, #8
 8006932:	d11b      	bne.n	800696c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f06f 0208 	mvn.w	r2, #8
 800693c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2204      	movs	r2, #4
 8006942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	f003 0303 	and.w	r3, r3, #3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7fa fd3a 	bl	80013cc <HAL_TIM_IC_CaptureCallback>
 8006958:	e005      	b.n	8006966 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f95c 	bl	8006c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f962 	bl	8006c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	f003 0310 	and.w	r3, r3, #16
 8006976:	2b10      	cmp	r3, #16
 8006978:	d122      	bne.n	80069c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f003 0310 	and.w	r3, r3, #16
 8006984:	2b10      	cmp	r3, #16
 8006986:	d11b      	bne.n	80069c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f06f 0210 	mvn.w	r2, #16
 8006990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2208      	movs	r2, #8
 8006996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7fa fd10 	bl	80013cc <HAL_TIM_IC_CaptureCallback>
 80069ac:	e005      	b.n	80069ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f932 	bl	8006c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f938 	bl	8006c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d10e      	bne.n	80069ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d107      	bne.n	80069ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f06f 0201 	mvn.w	r2, #1
 80069e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f90d 	bl	8006c06 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f6:	2b80      	cmp	r3, #128	; 0x80
 80069f8:	d10e      	bne.n	8006a18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a04:	2b80      	cmp	r3, #128	; 0x80
 8006a06:	d107      	bne.n	8006a18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fa9f 	bl	8006f56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a22:	2b40      	cmp	r3, #64	; 0x40
 8006a24:	d10e      	bne.n	8006a44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a30:	2b40      	cmp	r3, #64	; 0x40
 8006a32:	d107      	bne.n	8006a44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f8fc 	bl	8006c3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d10e      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b20      	cmp	r3, #32
 8006a5e:	d107      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f06f 0220 	mvn.w	r2, #32
 8006a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fa6a 	bl	8006f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a70:	bf00      	nop
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <HAL_TIM_ConfigClockSource+0x1c>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e0b4      	b.n	8006bfe <HAL_TIM_ConfigClockSource+0x186>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006aba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006acc:	d03e      	beq.n	8006b4c <HAL_TIM_ConfigClockSource+0xd4>
 8006ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ad2:	f200 8087 	bhi.w	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ada:	f000 8086 	beq.w	8006bea <HAL_TIM_ConfigClockSource+0x172>
 8006ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae2:	d87f      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae4:	2b70      	cmp	r3, #112	; 0x70
 8006ae6:	d01a      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0xa6>
 8006ae8:	2b70      	cmp	r3, #112	; 0x70
 8006aea:	d87b      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006aec:	2b60      	cmp	r3, #96	; 0x60
 8006aee:	d050      	beq.n	8006b92 <HAL_TIM_ConfigClockSource+0x11a>
 8006af0:	2b60      	cmp	r3, #96	; 0x60
 8006af2:	d877      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006af4:	2b50      	cmp	r3, #80	; 0x50
 8006af6:	d03c      	beq.n	8006b72 <HAL_TIM_ConfigClockSource+0xfa>
 8006af8:	2b50      	cmp	r3, #80	; 0x50
 8006afa:	d873      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006afc:	2b40      	cmp	r3, #64	; 0x40
 8006afe:	d058      	beq.n	8006bb2 <HAL_TIM_ConfigClockSource+0x13a>
 8006b00:	2b40      	cmp	r3, #64	; 0x40
 8006b02:	d86f      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b04:	2b30      	cmp	r3, #48	; 0x30
 8006b06:	d064      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b08:	2b30      	cmp	r3, #48	; 0x30
 8006b0a:	d86b      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b0c:	2b20      	cmp	r3, #32
 8006b0e:	d060      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	d867      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d05c      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b18:	2b10      	cmp	r3, #16
 8006b1a:	d05a      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b1c:	e062      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b2e:	f000 f968 	bl	8006e02 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	609a      	str	r2, [r3, #8]
      break;
 8006b4a:	e04f      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b5c:	f000 f951 	bl	8006e02 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b6e:	609a      	str	r2, [r3, #8]
      break;
 8006b70:	e03c      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f000 f8c8 	bl	8006d14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2150      	movs	r1, #80	; 0x50
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 f91f 	bl	8006dce <TIM_ITRx_SetConfig>
      break;
 8006b90:	e02c      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	f000 f8e6 	bl	8006d70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2160      	movs	r1, #96	; 0x60
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 f90f 	bl	8006dce <TIM_ITRx_SetConfig>
      break;
 8006bb0:	e01c      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f000 f8a8 	bl	8006d14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2140      	movs	r1, #64	; 0x40
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 f8ff 	bl	8006dce <TIM_ITRx_SetConfig>
      break;
 8006bd0:	e00c      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4610      	mov	r0, r2
 8006bde:	f000 f8f6 	bl	8006dce <TIM_ITRx_SetConfig>
      break;
 8006be2:	e003      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	73fb      	strb	r3, [r7, #15]
      break;
 8006be8:	e000      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006bea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b083      	sub	sp, #12
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006c0e:	bf00      	nop
 8006c10:	370c      	adds	r7, #12
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr

08006c18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bc80      	pop	{r7}
 8006c28:	4770      	bx	lr

08006c2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c32:	bf00      	nop
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bc80      	pop	{r7}
 8006c3a:	4770      	bx	lr

08006c3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bc80      	pop	{r7}
 8006c4c:	4770      	bx	lr
	...

08006c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a29      	ldr	r2, [pc, #164]	; (8006d08 <TIM_Base_SetConfig+0xb8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d00b      	beq.n	8006c80 <TIM_Base_SetConfig+0x30>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c6e:	d007      	beq.n	8006c80 <TIM_Base_SetConfig+0x30>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a26      	ldr	r2, [pc, #152]	; (8006d0c <TIM_Base_SetConfig+0xbc>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d003      	beq.n	8006c80 <TIM_Base_SetConfig+0x30>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a25      	ldr	r2, [pc, #148]	; (8006d10 <TIM_Base_SetConfig+0xc0>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d108      	bne.n	8006c92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a1c      	ldr	r2, [pc, #112]	; (8006d08 <TIM_Base_SetConfig+0xb8>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d00b      	beq.n	8006cb2 <TIM_Base_SetConfig+0x62>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca0:	d007      	beq.n	8006cb2 <TIM_Base_SetConfig+0x62>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a19      	ldr	r2, [pc, #100]	; (8006d0c <TIM_Base_SetConfig+0xbc>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d003      	beq.n	8006cb2 <TIM_Base_SetConfig+0x62>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a18      	ldr	r2, [pc, #96]	; (8006d10 <TIM_Base_SetConfig+0xc0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d108      	bne.n	8006cc4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a07      	ldr	r2, [pc, #28]	; (8006d08 <TIM_Base_SetConfig+0xb8>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d103      	bne.n	8006cf8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	615a      	str	r2, [r3, #20]
}
 8006cfe:	bf00      	nop
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bc80      	pop	{r7}
 8006d06:	4770      	bx	lr
 8006d08:	40012c00 	.word	0x40012c00
 8006d0c:	40000400 	.word	0x40000400
 8006d10:	40000800 	.word	0x40000800

08006d14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	f023 0201 	bic.w	r2, r3, #1
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	011b      	lsls	r3, r3, #4
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f023 030a 	bic.w	r3, r3, #10
 8006d50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	621a      	str	r2, [r3, #32]
}
 8006d66:	bf00      	nop
 8006d68:	371c      	adds	r7, #28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bc80      	pop	{r7}
 8006d6e:	4770      	bx	lr

08006d70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	f023 0210 	bic.w	r2, r3, #16
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	031b      	lsls	r3, r3, #12
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	011b      	lsls	r3, r3, #4
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	621a      	str	r2, [r3, #32]
}
 8006dc4:	bf00      	nop
 8006dc6:	371c      	adds	r7, #28
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bc80      	pop	{r7}
 8006dcc:	4770      	bx	lr

08006dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b085      	sub	sp, #20
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	f043 0307 	orr.w	r3, r3, #7
 8006df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	609a      	str	r2, [r3, #8]
}
 8006df8:	bf00      	nop
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bc80      	pop	{r7}
 8006e00:	4770      	bx	lr

08006e02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b087      	sub	sp, #28
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	607a      	str	r2, [r7, #4]
 8006e0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	021a      	lsls	r2, r3, #8
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	431a      	orrs	r2, r3
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	609a      	str	r2, [r3, #8]
}
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bc80      	pop	{r7}
 8006e3e:	4770      	bx	lr

08006e40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f003 031f 	and.w	r3, r3, #31
 8006e52:	2201      	movs	r2, #1
 8006e54:	fa02 f303 	lsl.w	r3, r2, r3
 8006e58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6a1a      	ldr	r2, [r3, #32]
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	43db      	mvns	r3, r3
 8006e62:	401a      	ands	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a1a      	ldr	r2, [r3, #32]
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f003 031f 	and.w	r3, r3, #31
 8006e72:	6879      	ldr	r1, [r7, #4]
 8006e74:	fa01 f303 	lsl.w	r3, r1, r3
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	621a      	str	r2, [r3, #32]
}
 8006e7e:	bf00      	nop
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bc80      	pop	{r7}
 8006e86:	4770      	bx	lr

08006e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d101      	bne.n	8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	e046      	b.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a16      	ldr	r2, [pc, #88]	; (8006f38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d00e      	beq.n	8006f02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eec:	d009      	beq.n	8006f02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a12      	ldr	r2, [pc, #72]	; (8006f3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d004      	beq.n	8006f02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a10      	ldr	r2, [pc, #64]	; (8006f40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d10c      	bne.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bc80      	pop	{r7}
 8006f36:	4770      	bx	lr
 8006f38:	40012c00 	.word	0x40012c00
 8006f3c:	40000400 	.word	0x40000400
 8006f40:	40000800 	.word	0x40000800

08006f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bc80      	pop	{r7}
 8006f54:	4770      	bx	lr

08006f56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bc80      	pop	{r7}
 8006f66:	4770      	bx	lr

08006f68 <siprintf>:
 8006f68:	b40e      	push	{r1, r2, r3}
 8006f6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f6e:	b500      	push	{lr}
 8006f70:	b09c      	sub	sp, #112	; 0x70
 8006f72:	ab1d      	add	r3, sp, #116	; 0x74
 8006f74:	9002      	str	r0, [sp, #8]
 8006f76:	9006      	str	r0, [sp, #24]
 8006f78:	9107      	str	r1, [sp, #28]
 8006f7a:	9104      	str	r1, [sp, #16]
 8006f7c:	4808      	ldr	r0, [pc, #32]	; (8006fa0 <siprintf+0x38>)
 8006f7e:	4909      	ldr	r1, [pc, #36]	; (8006fa4 <siprintf+0x3c>)
 8006f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f84:	9105      	str	r1, [sp, #20]
 8006f86:	6800      	ldr	r0, [r0, #0]
 8006f88:	a902      	add	r1, sp, #8
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	f000 f98e 	bl	80072ac <_svfiprintf_r>
 8006f90:	2200      	movs	r2, #0
 8006f92:	9b02      	ldr	r3, [sp, #8]
 8006f94:	701a      	strb	r2, [r3, #0]
 8006f96:	b01c      	add	sp, #112	; 0x70
 8006f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f9c:	b003      	add	sp, #12
 8006f9e:	4770      	bx	lr
 8006fa0:	20000058 	.word	0x20000058
 8006fa4:	ffff0208 	.word	0xffff0208

08006fa8 <memset>:
 8006fa8:	4603      	mov	r3, r0
 8006faa:	4402      	add	r2, r0
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d100      	bne.n	8006fb2 <memset+0xa>
 8006fb0:	4770      	bx	lr
 8006fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fb6:	e7f9      	b.n	8006fac <memset+0x4>

08006fb8 <__errno>:
 8006fb8:	4b01      	ldr	r3, [pc, #4]	; (8006fc0 <__errno+0x8>)
 8006fba:	6818      	ldr	r0, [r3, #0]
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	20000058 	.word	0x20000058

08006fc4 <__libc_init_array>:
 8006fc4:	b570      	push	{r4, r5, r6, lr}
 8006fc6:	2600      	movs	r6, #0
 8006fc8:	4d0c      	ldr	r5, [pc, #48]	; (8006ffc <__libc_init_array+0x38>)
 8006fca:	4c0d      	ldr	r4, [pc, #52]	; (8007000 <__libc_init_array+0x3c>)
 8006fcc:	1b64      	subs	r4, r4, r5
 8006fce:	10a4      	asrs	r4, r4, #2
 8006fd0:	42a6      	cmp	r6, r4
 8006fd2:	d109      	bne.n	8006fe8 <__libc_init_array+0x24>
 8006fd4:	f000 fc7a 	bl	80078cc <_init>
 8006fd8:	2600      	movs	r6, #0
 8006fda:	4d0a      	ldr	r5, [pc, #40]	; (8007004 <__libc_init_array+0x40>)
 8006fdc:	4c0a      	ldr	r4, [pc, #40]	; (8007008 <__libc_init_array+0x44>)
 8006fde:	1b64      	subs	r4, r4, r5
 8006fe0:	10a4      	asrs	r4, r4, #2
 8006fe2:	42a6      	cmp	r6, r4
 8006fe4:	d105      	bne.n	8006ff2 <__libc_init_array+0x2e>
 8006fe6:	bd70      	pop	{r4, r5, r6, pc}
 8006fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fec:	4798      	blx	r3
 8006fee:	3601      	adds	r6, #1
 8006ff0:	e7ee      	b.n	8006fd0 <__libc_init_array+0xc>
 8006ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ff6:	4798      	blx	r3
 8006ff8:	3601      	adds	r6, #1
 8006ffa:	e7f2      	b.n	8006fe2 <__libc_init_array+0x1e>
 8006ffc:	08007b28 	.word	0x08007b28
 8007000:	08007b28 	.word	0x08007b28
 8007004:	08007b28 	.word	0x08007b28
 8007008:	08007b2c 	.word	0x08007b2c

0800700c <__retarget_lock_acquire_recursive>:
 800700c:	4770      	bx	lr

0800700e <__retarget_lock_release_recursive>:
 800700e:	4770      	bx	lr

08007010 <_free_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	4605      	mov	r5, r0
 8007014:	2900      	cmp	r1, #0
 8007016:	d040      	beq.n	800709a <_free_r+0x8a>
 8007018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800701c:	1f0c      	subs	r4, r1, #4
 800701e:	2b00      	cmp	r3, #0
 8007020:	bfb8      	it	lt
 8007022:	18e4      	addlt	r4, r4, r3
 8007024:	f000 f8dc 	bl	80071e0 <__malloc_lock>
 8007028:	4a1c      	ldr	r2, [pc, #112]	; (800709c <_free_r+0x8c>)
 800702a:	6813      	ldr	r3, [r2, #0]
 800702c:	b933      	cbnz	r3, 800703c <_free_r+0x2c>
 800702e:	6063      	str	r3, [r4, #4]
 8007030:	6014      	str	r4, [r2, #0]
 8007032:	4628      	mov	r0, r5
 8007034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007038:	f000 b8d8 	b.w	80071ec <__malloc_unlock>
 800703c:	42a3      	cmp	r3, r4
 800703e:	d908      	bls.n	8007052 <_free_r+0x42>
 8007040:	6820      	ldr	r0, [r4, #0]
 8007042:	1821      	adds	r1, r4, r0
 8007044:	428b      	cmp	r3, r1
 8007046:	bf01      	itttt	eq
 8007048:	6819      	ldreq	r1, [r3, #0]
 800704a:	685b      	ldreq	r3, [r3, #4]
 800704c:	1809      	addeq	r1, r1, r0
 800704e:	6021      	streq	r1, [r4, #0]
 8007050:	e7ed      	b.n	800702e <_free_r+0x1e>
 8007052:	461a      	mov	r2, r3
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	b10b      	cbz	r3, 800705c <_free_r+0x4c>
 8007058:	42a3      	cmp	r3, r4
 800705a:	d9fa      	bls.n	8007052 <_free_r+0x42>
 800705c:	6811      	ldr	r1, [r2, #0]
 800705e:	1850      	adds	r0, r2, r1
 8007060:	42a0      	cmp	r0, r4
 8007062:	d10b      	bne.n	800707c <_free_r+0x6c>
 8007064:	6820      	ldr	r0, [r4, #0]
 8007066:	4401      	add	r1, r0
 8007068:	1850      	adds	r0, r2, r1
 800706a:	4283      	cmp	r3, r0
 800706c:	6011      	str	r1, [r2, #0]
 800706e:	d1e0      	bne.n	8007032 <_free_r+0x22>
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	4408      	add	r0, r1
 8007076:	6010      	str	r0, [r2, #0]
 8007078:	6053      	str	r3, [r2, #4]
 800707a:	e7da      	b.n	8007032 <_free_r+0x22>
 800707c:	d902      	bls.n	8007084 <_free_r+0x74>
 800707e:	230c      	movs	r3, #12
 8007080:	602b      	str	r3, [r5, #0]
 8007082:	e7d6      	b.n	8007032 <_free_r+0x22>
 8007084:	6820      	ldr	r0, [r4, #0]
 8007086:	1821      	adds	r1, r4, r0
 8007088:	428b      	cmp	r3, r1
 800708a:	bf01      	itttt	eq
 800708c:	6819      	ldreq	r1, [r3, #0]
 800708e:	685b      	ldreq	r3, [r3, #4]
 8007090:	1809      	addeq	r1, r1, r0
 8007092:	6021      	streq	r1, [r4, #0]
 8007094:	6063      	str	r3, [r4, #4]
 8007096:	6054      	str	r4, [r2, #4]
 8007098:	e7cb      	b.n	8007032 <_free_r+0x22>
 800709a:	bd38      	pop	{r3, r4, r5, pc}
 800709c:	200003d8 	.word	0x200003d8

080070a0 <sbrk_aligned>:
 80070a0:	b570      	push	{r4, r5, r6, lr}
 80070a2:	4e0e      	ldr	r6, [pc, #56]	; (80070dc <sbrk_aligned+0x3c>)
 80070a4:	460c      	mov	r4, r1
 80070a6:	6831      	ldr	r1, [r6, #0]
 80070a8:	4605      	mov	r5, r0
 80070aa:	b911      	cbnz	r1, 80070b2 <sbrk_aligned+0x12>
 80070ac:	f000 fbaa 	bl	8007804 <_sbrk_r>
 80070b0:	6030      	str	r0, [r6, #0]
 80070b2:	4621      	mov	r1, r4
 80070b4:	4628      	mov	r0, r5
 80070b6:	f000 fba5 	bl	8007804 <_sbrk_r>
 80070ba:	1c43      	adds	r3, r0, #1
 80070bc:	d00a      	beq.n	80070d4 <sbrk_aligned+0x34>
 80070be:	1cc4      	adds	r4, r0, #3
 80070c0:	f024 0403 	bic.w	r4, r4, #3
 80070c4:	42a0      	cmp	r0, r4
 80070c6:	d007      	beq.n	80070d8 <sbrk_aligned+0x38>
 80070c8:	1a21      	subs	r1, r4, r0
 80070ca:	4628      	mov	r0, r5
 80070cc:	f000 fb9a 	bl	8007804 <_sbrk_r>
 80070d0:	3001      	adds	r0, #1
 80070d2:	d101      	bne.n	80070d8 <sbrk_aligned+0x38>
 80070d4:	f04f 34ff 	mov.w	r4, #4294967295
 80070d8:	4620      	mov	r0, r4
 80070da:	bd70      	pop	{r4, r5, r6, pc}
 80070dc:	200003dc 	.word	0x200003dc

080070e0 <_malloc_r>:
 80070e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070e4:	1ccd      	adds	r5, r1, #3
 80070e6:	f025 0503 	bic.w	r5, r5, #3
 80070ea:	3508      	adds	r5, #8
 80070ec:	2d0c      	cmp	r5, #12
 80070ee:	bf38      	it	cc
 80070f0:	250c      	movcc	r5, #12
 80070f2:	2d00      	cmp	r5, #0
 80070f4:	4607      	mov	r7, r0
 80070f6:	db01      	blt.n	80070fc <_malloc_r+0x1c>
 80070f8:	42a9      	cmp	r1, r5
 80070fa:	d905      	bls.n	8007108 <_malloc_r+0x28>
 80070fc:	230c      	movs	r3, #12
 80070fe:	2600      	movs	r6, #0
 8007100:	603b      	str	r3, [r7, #0]
 8007102:	4630      	mov	r0, r6
 8007104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007108:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80071dc <_malloc_r+0xfc>
 800710c:	f000 f868 	bl	80071e0 <__malloc_lock>
 8007110:	f8d8 3000 	ldr.w	r3, [r8]
 8007114:	461c      	mov	r4, r3
 8007116:	bb5c      	cbnz	r4, 8007170 <_malloc_r+0x90>
 8007118:	4629      	mov	r1, r5
 800711a:	4638      	mov	r0, r7
 800711c:	f7ff ffc0 	bl	80070a0 <sbrk_aligned>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	4604      	mov	r4, r0
 8007124:	d155      	bne.n	80071d2 <_malloc_r+0xf2>
 8007126:	f8d8 4000 	ldr.w	r4, [r8]
 800712a:	4626      	mov	r6, r4
 800712c:	2e00      	cmp	r6, #0
 800712e:	d145      	bne.n	80071bc <_malloc_r+0xdc>
 8007130:	2c00      	cmp	r4, #0
 8007132:	d048      	beq.n	80071c6 <_malloc_r+0xe6>
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	4631      	mov	r1, r6
 8007138:	4638      	mov	r0, r7
 800713a:	eb04 0903 	add.w	r9, r4, r3
 800713e:	f000 fb61 	bl	8007804 <_sbrk_r>
 8007142:	4581      	cmp	r9, r0
 8007144:	d13f      	bne.n	80071c6 <_malloc_r+0xe6>
 8007146:	6821      	ldr	r1, [r4, #0]
 8007148:	4638      	mov	r0, r7
 800714a:	1a6d      	subs	r5, r5, r1
 800714c:	4629      	mov	r1, r5
 800714e:	f7ff ffa7 	bl	80070a0 <sbrk_aligned>
 8007152:	3001      	adds	r0, #1
 8007154:	d037      	beq.n	80071c6 <_malloc_r+0xe6>
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	442b      	add	r3, r5
 800715a:	6023      	str	r3, [r4, #0]
 800715c:	f8d8 3000 	ldr.w	r3, [r8]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d038      	beq.n	80071d6 <_malloc_r+0xf6>
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	42a2      	cmp	r2, r4
 8007168:	d12b      	bne.n	80071c2 <_malloc_r+0xe2>
 800716a:	2200      	movs	r2, #0
 800716c:	605a      	str	r2, [r3, #4]
 800716e:	e00f      	b.n	8007190 <_malloc_r+0xb0>
 8007170:	6822      	ldr	r2, [r4, #0]
 8007172:	1b52      	subs	r2, r2, r5
 8007174:	d41f      	bmi.n	80071b6 <_malloc_r+0xd6>
 8007176:	2a0b      	cmp	r2, #11
 8007178:	d917      	bls.n	80071aa <_malloc_r+0xca>
 800717a:	1961      	adds	r1, r4, r5
 800717c:	42a3      	cmp	r3, r4
 800717e:	6025      	str	r5, [r4, #0]
 8007180:	bf18      	it	ne
 8007182:	6059      	strne	r1, [r3, #4]
 8007184:	6863      	ldr	r3, [r4, #4]
 8007186:	bf08      	it	eq
 8007188:	f8c8 1000 	streq.w	r1, [r8]
 800718c:	5162      	str	r2, [r4, r5]
 800718e:	604b      	str	r3, [r1, #4]
 8007190:	4638      	mov	r0, r7
 8007192:	f104 060b 	add.w	r6, r4, #11
 8007196:	f000 f829 	bl	80071ec <__malloc_unlock>
 800719a:	f026 0607 	bic.w	r6, r6, #7
 800719e:	1d23      	adds	r3, r4, #4
 80071a0:	1af2      	subs	r2, r6, r3
 80071a2:	d0ae      	beq.n	8007102 <_malloc_r+0x22>
 80071a4:	1b9b      	subs	r3, r3, r6
 80071a6:	50a3      	str	r3, [r4, r2]
 80071a8:	e7ab      	b.n	8007102 <_malloc_r+0x22>
 80071aa:	42a3      	cmp	r3, r4
 80071ac:	6862      	ldr	r2, [r4, #4]
 80071ae:	d1dd      	bne.n	800716c <_malloc_r+0x8c>
 80071b0:	f8c8 2000 	str.w	r2, [r8]
 80071b4:	e7ec      	b.n	8007190 <_malloc_r+0xb0>
 80071b6:	4623      	mov	r3, r4
 80071b8:	6864      	ldr	r4, [r4, #4]
 80071ba:	e7ac      	b.n	8007116 <_malloc_r+0x36>
 80071bc:	4634      	mov	r4, r6
 80071be:	6876      	ldr	r6, [r6, #4]
 80071c0:	e7b4      	b.n	800712c <_malloc_r+0x4c>
 80071c2:	4613      	mov	r3, r2
 80071c4:	e7cc      	b.n	8007160 <_malloc_r+0x80>
 80071c6:	230c      	movs	r3, #12
 80071c8:	4638      	mov	r0, r7
 80071ca:	603b      	str	r3, [r7, #0]
 80071cc:	f000 f80e 	bl	80071ec <__malloc_unlock>
 80071d0:	e797      	b.n	8007102 <_malloc_r+0x22>
 80071d2:	6025      	str	r5, [r4, #0]
 80071d4:	e7dc      	b.n	8007190 <_malloc_r+0xb0>
 80071d6:	605b      	str	r3, [r3, #4]
 80071d8:	deff      	udf	#255	; 0xff
 80071da:	bf00      	nop
 80071dc:	200003d8 	.word	0x200003d8

080071e0 <__malloc_lock>:
 80071e0:	4801      	ldr	r0, [pc, #4]	; (80071e8 <__malloc_lock+0x8>)
 80071e2:	f7ff bf13 	b.w	800700c <__retarget_lock_acquire_recursive>
 80071e6:	bf00      	nop
 80071e8:	200003d4 	.word	0x200003d4

080071ec <__malloc_unlock>:
 80071ec:	4801      	ldr	r0, [pc, #4]	; (80071f4 <__malloc_unlock+0x8>)
 80071ee:	f7ff bf0e 	b.w	800700e <__retarget_lock_release_recursive>
 80071f2:	bf00      	nop
 80071f4:	200003d4 	.word	0x200003d4

080071f8 <__ssputs_r>:
 80071f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071fc:	461f      	mov	r7, r3
 80071fe:	688e      	ldr	r6, [r1, #8]
 8007200:	4682      	mov	sl, r0
 8007202:	42be      	cmp	r6, r7
 8007204:	460c      	mov	r4, r1
 8007206:	4690      	mov	r8, r2
 8007208:	680b      	ldr	r3, [r1, #0]
 800720a:	d82c      	bhi.n	8007266 <__ssputs_r+0x6e>
 800720c:	898a      	ldrh	r2, [r1, #12]
 800720e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007212:	d026      	beq.n	8007262 <__ssputs_r+0x6a>
 8007214:	6965      	ldr	r5, [r4, #20]
 8007216:	6909      	ldr	r1, [r1, #16]
 8007218:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800721c:	eba3 0901 	sub.w	r9, r3, r1
 8007220:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007224:	1c7b      	adds	r3, r7, #1
 8007226:	444b      	add	r3, r9
 8007228:	106d      	asrs	r5, r5, #1
 800722a:	429d      	cmp	r5, r3
 800722c:	bf38      	it	cc
 800722e:	461d      	movcc	r5, r3
 8007230:	0553      	lsls	r3, r2, #21
 8007232:	d527      	bpl.n	8007284 <__ssputs_r+0x8c>
 8007234:	4629      	mov	r1, r5
 8007236:	f7ff ff53 	bl	80070e0 <_malloc_r>
 800723a:	4606      	mov	r6, r0
 800723c:	b360      	cbz	r0, 8007298 <__ssputs_r+0xa0>
 800723e:	464a      	mov	r2, r9
 8007240:	6921      	ldr	r1, [r4, #16]
 8007242:	f000 fafd 	bl	8007840 <memcpy>
 8007246:	89a3      	ldrh	r3, [r4, #12]
 8007248:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800724c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007250:	81a3      	strh	r3, [r4, #12]
 8007252:	6126      	str	r6, [r4, #16]
 8007254:	444e      	add	r6, r9
 8007256:	6026      	str	r6, [r4, #0]
 8007258:	463e      	mov	r6, r7
 800725a:	6165      	str	r5, [r4, #20]
 800725c:	eba5 0509 	sub.w	r5, r5, r9
 8007260:	60a5      	str	r5, [r4, #8]
 8007262:	42be      	cmp	r6, r7
 8007264:	d900      	bls.n	8007268 <__ssputs_r+0x70>
 8007266:	463e      	mov	r6, r7
 8007268:	4632      	mov	r2, r6
 800726a:	4641      	mov	r1, r8
 800726c:	6820      	ldr	r0, [r4, #0]
 800726e:	f000 faaf 	bl	80077d0 <memmove>
 8007272:	2000      	movs	r0, #0
 8007274:	68a3      	ldr	r3, [r4, #8]
 8007276:	1b9b      	subs	r3, r3, r6
 8007278:	60a3      	str	r3, [r4, #8]
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	4433      	add	r3, r6
 800727e:	6023      	str	r3, [r4, #0]
 8007280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007284:	462a      	mov	r2, r5
 8007286:	f000 fae9 	bl	800785c <_realloc_r>
 800728a:	4606      	mov	r6, r0
 800728c:	2800      	cmp	r0, #0
 800728e:	d1e0      	bne.n	8007252 <__ssputs_r+0x5a>
 8007290:	4650      	mov	r0, sl
 8007292:	6921      	ldr	r1, [r4, #16]
 8007294:	f7ff febc 	bl	8007010 <_free_r>
 8007298:	230c      	movs	r3, #12
 800729a:	f8ca 3000 	str.w	r3, [sl]
 800729e:	89a3      	ldrh	r3, [r4, #12]
 80072a0:	f04f 30ff 	mov.w	r0, #4294967295
 80072a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072a8:	81a3      	strh	r3, [r4, #12]
 80072aa:	e7e9      	b.n	8007280 <__ssputs_r+0x88>

080072ac <_svfiprintf_r>:
 80072ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b0:	4698      	mov	r8, r3
 80072b2:	898b      	ldrh	r3, [r1, #12]
 80072b4:	4607      	mov	r7, r0
 80072b6:	061b      	lsls	r3, r3, #24
 80072b8:	460d      	mov	r5, r1
 80072ba:	4614      	mov	r4, r2
 80072bc:	b09d      	sub	sp, #116	; 0x74
 80072be:	d50e      	bpl.n	80072de <_svfiprintf_r+0x32>
 80072c0:	690b      	ldr	r3, [r1, #16]
 80072c2:	b963      	cbnz	r3, 80072de <_svfiprintf_r+0x32>
 80072c4:	2140      	movs	r1, #64	; 0x40
 80072c6:	f7ff ff0b 	bl	80070e0 <_malloc_r>
 80072ca:	6028      	str	r0, [r5, #0]
 80072cc:	6128      	str	r0, [r5, #16]
 80072ce:	b920      	cbnz	r0, 80072da <_svfiprintf_r+0x2e>
 80072d0:	230c      	movs	r3, #12
 80072d2:	603b      	str	r3, [r7, #0]
 80072d4:	f04f 30ff 	mov.w	r0, #4294967295
 80072d8:	e0d0      	b.n	800747c <_svfiprintf_r+0x1d0>
 80072da:	2340      	movs	r3, #64	; 0x40
 80072dc:	616b      	str	r3, [r5, #20]
 80072de:	2300      	movs	r3, #0
 80072e0:	9309      	str	r3, [sp, #36]	; 0x24
 80072e2:	2320      	movs	r3, #32
 80072e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072e8:	2330      	movs	r3, #48	; 0x30
 80072ea:	f04f 0901 	mov.w	r9, #1
 80072ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80072f2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007494 <_svfiprintf_r+0x1e8>
 80072f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072fa:	4623      	mov	r3, r4
 80072fc:	469a      	mov	sl, r3
 80072fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007302:	b10a      	cbz	r2, 8007308 <_svfiprintf_r+0x5c>
 8007304:	2a25      	cmp	r2, #37	; 0x25
 8007306:	d1f9      	bne.n	80072fc <_svfiprintf_r+0x50>
 8007308:	ebba 0b04 	subs.w	fp, sl, r4
 800730c:	d00b      	beq.n	8007326 <_svfiprintf_r+0x7a>
 800730e:	465b      	mov	r3, fp
 8007310:	4622      	mov	r2, r4
 8007312:	4629      	mov	r1, r5
 8007314:	4638      	mov	r0, r7
 8007316:	f7ff ff6f 	bl	80071f8 <__ssputs_r>
 800731a:	3001      	adds	r0, #1
 800731c:	f000 80a9 	beq.w	8007472 <_svfiprintf_r+0x1c6>
 8007320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007322:	445a      	add	r2, fp
 8007324:	9209      	str	r2, [sp, #36]	; 0x24
 8007326:	f89a 3000 	ldrb.w	r3, [sl]
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 80a1 	beq.w	8007472 <_svfiprintf_r+0x1c6>
 8007330:	2300      	movs	r3, #0
 8007332:	f04f 32ff 	mov.w	r2, #4294967295
 8007336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800733a:	f10a 0a01 	add.w	sl, sl, #1
 800733e:	9304      	str	r3, [sp, #16]
 8007340:	9307      	str	r3, [sp, #28]
 8007342:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007346:	931a      	str	r3, [sp, #104]	; 0x68
 8007348:	4654      	mov	r4, sl
 800734a:	2205      	movs	r2, #5
 800734c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007350:	4850      	ldr	r0, [pc, #320]	; (8007494 <_svfiprintf_r+0x1e8>)
 8007352:	f000 fa67 	bl	8007824 <memchr>
 8007356:	9a04      	ldr	r2, [sp, #16]
 8007358:	b9d8      	cbnz	r0, 8007392 <_svfiprintf_r+0xe6>
 800735a:	06d0      	lsls	r0, r2, #27
 800735c:	bf44      	itt	mi
 800735e:	2320      	movmi	r3, #32
 8007360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007364:	0711      	lsls	r1, r2, #28
 8007366:	bf44      	itt	mi
 8007368:	232b      	movmi	r3, #43	; 0x2b
 800736a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800736e:	f89a 3000 	ldrb.w	r3, [sl]
 8007372:	2b2a      	cmp	r3, #42	; 0x2a
 8007374:	d015      	beq.n	80073a2 <_svfiprintf_r+0xf6>
 8007376:	4654      	mov	r4, sl
 8007378:	2000      	movs	r0, #0
 800737a:	f04f 0c0a 	mov.w	ip, #10
 800737e:	9a07      	ldr	r2, [sp, #28]
 8007380:	4621      	mov	r1, r4
 8007382:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007386:	3b30      	subs	r3, #48	; 0x30
 8007388:	2b09      	cmp	r3, #9
 800738a:	d94d      	bls.n	8007428 <_svfiprintf_r+0x17c>
 800738c:	b1b0      	cbz	r0, 80073bc <_svfiprintf_r+0x110>
 800738e:	9207      	str	r2, [sp, #28]
 8007390:	e014      	b.n	80073bc <_svfiprintf_r+0x110>
 8007392:	eba0 0308 	sub.w	r3, r0, r8
 8007396:	fa09 f303 	lsl.w	r3, r9, r3
 800739a:	4313      	orrs	r3, r2
 800739c:	46a2      	mov	sl, r4
 800739e:	9304      	str	r3, [sp, #16]
 80073a0:	e7d2      	b.n	8007348 <_svfiprintf_r+0x9c>
 80073a2:	9b03      	ldr	r3, [sp, #12]
 80073a4:	1d19      	adds	r1, r3, #4
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	9103      	str	r1, [sp, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	bfbb      	ittet	lt
 80073ae:	425b      	neglt	r3, r3
 80073b0:	f042 0202 	orrlt.w	r2, r2, #2
 80073b4:	9307      	strge	r3, [sp, #28]
 80073b6:	9307      	strlt	r3, [sp, #28]
 80073b8:	bfb8      	it	lt
 80073ba:	9204      	strlt	r2, [sp, #16]
 80073bc:	7823      	ldrb	r3, [r4, #0]
 80073be:	2b2e      	cmp	r3, #46	; 0x2e
 80073c0:	d10c      	bne.n	80073dc <_svfiprintf_r+0x130>
 80073c2:	7863      	ldrb	r3, [r4, #1]
 80073c4:	2b2a      	cmp	r3, #42	; 0x2a
 80073c6:	d134      	bne.n	8007432 <_svfiprintf_r+0x186>
 80073c8:	9b03      	ldr	r3, [sp, #12]
 80073ca:	3402      	adds	r4, #2
 80073cc:	1d1a      	adds	r2, r3, #4
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	9203      	str	r2, [sp, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	bfb8      	it	lt
 80073d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80073da:	9305      	str	r3, [sp, #20]
 80073dc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007498 <_svfiprintf_r+0x1ec>
 80073e0:	2203      	movs	r2, #3
 80073e2:	4650      	mov	r0, sl
 80073e4:	7821      	ldrb	r1, [r4, #0]
 80073e6:	f000 fa1d 	bl	8007824 <memchr>
 80073ea:	b138      	cbz	r0, 80073fc <_svfiprintf_r+0x150>
 80073ec:	2240      	movs	r2, #64	; 0x40
 80073ee:	9b04      	ldr	r3, [sp, #16]
 80073f0:	eba0 000a 	sub.w	r0, r0, sl
 80073f4:	4082      	lsls	r2, r0
 80073f6:	4313      	orrs	r3, r2
 80073f8:	3401      	adds	r4, #1
 80073fa:	9304      	str	r3, [sp, #16]
 80073fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007400:	2206      	movs	r2, #6
 8007402:	4826      	ldr	r0, [pc, #152]	; (800749c <_svfiprintf_r+0x1f0>)
 8007404:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007408:	f000 fa0c 	bl	8007824 <memchr>
 800740c:	2800      	cmp	r0, #0
 800740e:	d038      	beq.n	8007482 <_svfiprintf_r+0x1d6>
 8007410:	4b23      	ldr	r3, [pc, #140]	; (80074a0 <_svfiprintf_r+0x1f4>)
 8007412:	bb1b      	cbnz	r3, 800745c <_svfiprintf_r+0x1b0>
 8007414:	9b03      	ldr	r3, [sp, #12]
 8007416:	3307      	adds	r3, #7
 8007418:	f023 0307 	bic.w	r3, r3, #7
 800741c:	3308      	adds	r3, #8
 800741e:	9303      	str	r3, [sp, #12]
 8007420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007422:	4433      	add	r3, r6
 8007424:	9309      	str	r3, [sp, #36]	; 0x24
 8007426:	e768      	b.n	80072fa <_svfiprintf_r+0x4e>
 8007428:	460c      	mov	r4, r1
 800742a:	2001      	movs	r0, #1
 800742c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007430:	e7a6      	b.n	8007380 <_svfiprintf_r+0xd4>
 8007432:	2300      	movs	r3, #0
 8007434:	f04f 0c0a 	mov.w	ip, #10
 8007438:	4619      	mov	r1, r3
 800743a:	3401      	adds	r4, #1
 800743c:	9305      	str	r3, [sp, #20]
 800743e:	4620      	mov	r0, r4
 8007440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007444:	3a30      	subs	r2, #48	; 0x30
 8007446:	2a09      	cmp	r2, #9
 8007448:	d903      	bls.n	8007452 <_svfiprintf_r+0x1a6>
 800744a:	2b00      	cmp	r3, #0
 800744c:	d0c6      	beq.n	80073dc <_svfiprintf_r+0x130>
 800744e:	9105      	str	r1, [sp, #20]
 8007450:	e7c4      	b.n	80073dc <_svfiprintf_r+0x130>
 8007452:	4604      	mov	r4, r0
 8007454:	2301      	movs	r3, #1
 8007456:	fb0c 2101 	mla	r1, ip, r1, r2
 800745a:	e7f0      	b.n	800743e <_svfiprintf_r+0x192>
 800745c:	ab03      	add	r3, sp, #12
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	462a      	mov	r2, r5
 8007462:	4638      	mov	r0, r7
 8007464:	4b0f      	ldr	r3, [pc, #60]	; (80074a4 <_svfiprintf_r+0x1f8>)
 8007466:	a904      	add	r1, sp, #16
 8007468:	f3af 8000 	nop.w
 800746c:	1c42      	adds	r2, r0, #1
 800746e:	4606      	mov	r6, r0
 8007470:	d1d6      	bne.n	8007420 <_svfiprintf_r+0x174>
 8007472:	89ab      	ldrh	r3, [r5, #12]
 8007474:	065b      	lsls	r3, r3, #25
 8007476:	f53f af2d 	bmi.w	80072d4 <_svfiprintf_r+0x28>
 800747a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800747c:	b01d      	add	sp, #116	; 0x74
 800747e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007482:	ab03      	add	r3, sp, #12
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	462a      	mov	r2, r5
 8007488:	4638      	mov	r0, r7
 800748a:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <_svfiprintf_r+0x1f8>)
 800748c:	a904      	add	r1, sp, #16
 800748e:	f000 f87d 	bl	800758c <_printf_i>
 8007492:	e7eb      	b.n	800746c <_svfiprintf_r+0x1c0>
 8007494:	08007af2 	.word	0x08007af2
 8007498:	08007af8 	.word	0x08007af8
 800749c:	08007afc 	.word	0x08007afc
 80074a0:	00000000 	.word	0x00000000
 80074a4:	080071f9 	.word	0x080071f9

080074a8 <_printf_common>:
 80074a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074ac:	4616      	mov	r6, r2
 80074ae:	4699      	mov	r9, r3
 80074b0:	688a      	ldr	r2, [r1, #8]
 80074b2:	690b      	ldr	r3, [r1, #16]
 80074b4:	4607      	mov	r7, r0
 80074b6:	4293      	cmp	r3, r2
 80074b8:	bfb8      	it	lt
 80074ba:	4613      	movlt	r3, r2
 80074bc:	6033      	str	r3, [r6, #0]
 80074be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074c2:	460c      	mov	r4, r1
 80074c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074c8:	b10a      	cbz	r2, 80074ce <_printf_common+0x26>
 80074ca:	3301      	adds	r3, #1
 80074cc:	6033      	str	r3, [r6, #0]
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	0699      	lsls	r1, r3, #26
 80074d2:	bf42      	ittt	mi
 80074d4:	6833      	ldrmi	r3, [r6, #0]
 80074d6:	3302      	addmi	r3, #2
 80074d8:	6033      	strmi	r3, [r6, #0]
 80074da:	6825      	ldr	r5, [r4, #0]
 80074dc:	f015 0506 	ands.w	r5, r5, #6
 80074e0:	d106      	bne.n	80074f0 <_printf_common+0x48>
 80074e2:	f104 0a19 	add.w	sl, r4, #25
 80074e6:	68e3      	ldr	r3, [r4, #12]
 80074e8:	6832      	ldr	r2, [r6, #0]
 80074ea:	1a9b      	subs	r3, r3, r2
 80074ec:	42ab      	cmp	r3, r5
 80074ee:	dc2b      	bgt.n	8007548 <_printf_common+0xa0>
 80074f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074f4:	1e13      	subs	r3, r2, #0
 80074f6:	6822      	ldr	r2, [r4, #0]
 80074f8:	bf18      	it	ne
 80074fa:	2301      	movne	r3, #1
 80074fc:	0692      	lsls	r2, r2, #26
 80074fe:	d430      	bmi.n	8007562 <_printf_common+0xba>
 8007500:	4649      	mov	r1, r9
 8007502:	4638      	mov	r0, r7
 8007504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007508:	47c0      	blx	r8
 800750a:	3001      	adds	r0, #1
 800750c:	d023      	beq.n	8007556 <_printf_common+0xae>
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	6922      	ldr	r2, [r4, #16]
 8007512:	f003 0306 	and.w	r3, r3, #6
 8007516:	2b04      	cmp	r3, #4
 8007518:	bf14      	ite	ne
 800751a:	2500      	movne	r5, #0
 800751c:	6833      	ldreq	r3, [r6, #0]
 800751e:	f04f 0600 	mov.w	r6, #0
 8007522:	bf08      	it	eq
 8007524:	68e5      	ldreq	r5, [r4, #12]
 8007526:	f104 041a 	add.w	r4, r4, #26
 800752a:	bf08      	it	eq
 800752c:	1aed      	subeq	r5, r5, r3
 800752e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007532:	bf08      	it	eq
 8007534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007538:	4293      	cmp	r3, r2
 800753a:	bfc4      	itt	gt
 800753c:	1a9b      	subgt	r3, r3, r2
 800753e:	18ed      	addgt	r5, r5, r3
 8007540:	42b5      	cmp	r5, r6
 8007542:	d11a      	bne.n	800757a <_printf_common+0xd2>
 8007544:	2000      	movs	r0, #0
 8007546:	e008      	b.n	800755a <_printf_common+0xb2>
 8007548:	2301      	movs	r3, #1
 800754a:	4652      	mov	r2, sl
 800754c:	4649      	mov	r1, r9
 800754e:	4638      	mov	r0, r7
 8007550:	47c0      	blx	r8
 8007552:	3001      	adds	r0, #1
 8007554:	d103      	bne.n	800755e <_printf_common+0xb6>
 8007556:	f04f 30ff 	mov.w	r0, #4294967295
 800755a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755e:	3501      	adds	r5, #1
 8007560:	e7c1      	b.n	80074e6 <_printf_common+0x3e>
 8007562:	2030      	movs	r0, #48	; 0x30
 8007564:	18e1      	adds	r1, r4, r3
 8007566:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800756a:	1c5a      	adds	r2, r3, #1
 800756c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007570:	4422      	add	r2, r4
 8007572:	3302      	adds	r3, #2
 8007574:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007578:	e7c2      	b.n	8007500 <_printf_common+0x58>
 800757a:	2301      	movs	r3, #1
 800757c:	4622      	mov	r2, r4
 800757e:	4649      	mov	r1, r9
 8007580:	4638      	mov	r0, r7
 8007582:	47c0      	blx	r8
 8007584:	3001      	adds	r0, #1
 8007586:	d0e6      	beq.n	8007556 <_printf_common+0xae>
 8007588:	3601      	adds	r6, #1
 800758a:	e7d9      	b.n	8007540 <_printf_common+0x98>

0800758c <_printf_i>:
 800758c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007590:	7e0f      	ldrb	r7, [r1, #24]
 8007592:	4691      	mov	r9, r2
 8007594:	2f78      	cmp	r7, #120	; 0x78
 8007596:	4680      	mov	r8, r0
 8007598:	460c      	mov	r4, r1
 800759a:	469a      	mov	sl, r3
 800759c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800759e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075a2:	d807      	bhi.n	80075b4 <_printf_i+0x28>
 80075a4:	2f62      	cmp	r7, #98	; 0x62
 80075a6:	d80a      	bhi.n	80075be <_printf_i+0x32>
 80075a8:	2f00      	cmp	r7, #0
 80075aa:	f000 80d5 	beq.w	8007758 <_printf_i+0x1cc>
 80075ae:	2f58      	cmp	r7, #88	; 0x58
 80075b0:	f000 80c1 	beq.w	8007736 <_printf_i+0x1aa>
 80075b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075bc:	e03a      	b.n	8007634 <_printf_i+0xa8>
 80075be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075c2:	2b15      	cmp	r3, #21
 80075c4:	d8f6      	bhi.n	80075b4 <_printf_i+0x28>
 80075c6:	a101      	add	r1, pc, #4	; (adr r1, 80075cc <_printf_i+0x40>)
 80075c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075cc:	08007625 	.word	0x08007625
 80075d0:	08007639 	.word	0x08007639
 80075d4:	080075b5 	.word	0x080075b5
 80075d8:	080075b5 	.word	0x080075b5
 80075dc:	080075b5 	.word	0x080075b5
 80075e0:	080075b5 	.word	0x080075b5
 80075e4:	08007639 	.word	0x08007639
 80075e8:	080075b5 	.word	0x080075b5
 80075ec:	080075b5 	.word	0x080075b5
 80075f0:	080075b5 	.word	0x080075b5
 80075f4:	080075b5 	.word	0x080075b5
 80075f8:	0800773f 	.word	0x0800773f
 80075fc:	08007665 	.word	0x08007665
 8007600:	080076f9 	.word	0x080076f9
 8007604:	080075b5 	.word	0x080075b5
 8007608:	080075b5 	.word	0x080075b5
 800760c:	08007761 	.word	0x08007761
 8007610:	080075b5 	.word	0x080075b5
 8007614:	08007665 	.word	0x08007665
 8007618:	080075b5 	.word	0x080075b5
 800761c:	080075b5 	.word	0x080075b5
 8007620:	08007701 	.word	0x08007701
 8007624:	682b      	ldr	r3, [r5, #0]
 8007626:	1d1a      	adds	r2, r3, #4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	602a      	str	r2, [r5, #0]
 800762c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007634:	2301      	movs	r3, #1
 8007636:	e0a0      	b.n	800777a <_printf_i+0x1ee>
 8007638:	6820      	ldr	r0, [r4, #0]
 800763a:	682b      	ldr	r3, [r5, #0]
 800763c:	0607      	lsls	r7, r0, #24
 800763e:	f103 0104 	add.w	r1, r3, #4
 8007642:	6029      	str	r1, [r5, #0]
 8007644:	d501      	bpl.n	800764a <_printf_i+0xbe>
 8007646:	681e      	ldr	r6, [r3, #0]
 8007648:	e003      	b.n	8007652 <_printf_i+0xc6>
 800764a:	0646      	lsls	r6, r0, #25
 800764c:	d5fb      	bpl.n	8007646 <_printf_i+0xba>
 800764e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007652:	2e00      	cmp	r6, #0
 8007654:	da03      	bge.n	800765e <_printf_i+0xd2>
 8007656:	232d      	movs	r3, #45	; 0x2d
 8007658:	4276      	negs	r6, r6
 800765a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800765e:	230a      	movs	r3, #10
 8007660:	4859      	ldr	r0, [pc, #356]	; (80077c8 <_printf_i+0x23c>)
 8007662:	e012      	b.n	800768a <_printf_i+0xfe>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	6820      	ldr	r0, [r4, #0]
 8007668:	1d19      	adds	r1, r3, #4
 800766a:	6029      	str	r1, [r5, #0]
 800766c:	0605      	lsls	r5, r0, #24
 800766e:	d501      	bpl.n	8007674 <_printf_i+0xe8>
 8007670:	681e      	ldr	r6, [r3, #0]
 8007672:	e002      	b.n	800767a <_printf_i+0xee>
 8007674:	0641      	lsls	r1, r0, #25
 8007676:	d5fb      	bpl.n	8007670 <_printf_i+0xe4>
 8007678:	881e      	ldrh	r6, [r3, #0]
 800767a:	2f6f      	cmp	r7, #111	; 0x6f
 800767c:	bf0c      	ite	eq
 800767e:	2308      	moveq	r3, #8
 8007680:	230a      	movne	r3, #10
 8007682:	4851      	ldr	r0, [pc, #324]	; (80077c8 <_printf_i+0x23c>)
 8007684:	2100      	movs	r1, #0
 8007686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800768a:	6865      	ldr	r5, [r4, #4]
 800768c:	2d00      	cmp	r5, #0
 800768e:	bfa8      	it	ge
 8007690:	6821      	ldrge	r1, [r4, #0]
 8007692:	60a5      	str	r5, [r4, #8]
 8007694:	bfa4      	itt	ge
 8007696:	f021 0104 	bicge.w	r1, r1, #4
 800769a:	6021      	strge	r1, [r4, #0]
 800769c:	b90e      	cbnz	r6, 80076a2 <_printf_i+0x116>
 800769e:	2d00      	cmp	r5, #0
 80076a0:	d04b      	beq.n	800773a <_printf_i+0x1ae>
 80076a2:	4615      	mov	r5, r2
 80076a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80076a8:	fb03 6711 	mls	r7, r3, r1, r6
 80076ac:	5dc7      	ldrb	r7, [r0, r7]
 80076ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076b2:	4637      	mov	r7, r6
 80076b4:	42bb      	cmp	r3, r7
 80076b6:	460e      	mov	r6, r1
 80076b8:	d9f4      	bls.n	80076a4 <_printf_i+0x118>
 80076ba:	2b08      	cmp	r3, #8
 80076bc:	d10b      	bne.n	80076d6 <_printf_i+0x14a>
 80076be:	6823      	ldr	r3, [r4, #0]
 80076c0:	07de      	lsls	r6, r3, #31
 80076c2:	d508      	bpl.n	80076d6 <_printf_i+0x14a>
 80076c4:	6923      	ldr	r3, [r4, #16]
 80076c6:	6861      	ldr	r1, [r4, #4]
 80076c8:	4299      	cmp	r1, r3
 80076ca:	bfde      	ittt	le
 80076cc:	2330      	movle	r3, #48	; 0x30
 80076ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076d6:	1b52      	subs	r2, r2, r5
 80076d8:	6122      	str	r2, [r4, #16]
 80076da:	464b      	mov	r3, r9
 80076dc:	4621      	mov	r1, r4
 80076de:	4640      	mov	r0, r8
 80076e0:	f8cd a000 	str.w	sl, [sp]
 80076e4:	aa03      	add	r2, sp, #12
 80076e6:	f7ff fedf 	bl	80074a8 <_printf_common>
 80076ea:	3001      	adds	r0, #1
 80076ec:	d14a      	bne.n	8007784 <_printf_i+0x1f8>
 80076ee:	f04f 30ff 	mov.w	r0, #4294967295
 80076f2:	b004      	add	sp, #16
 80076f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f8:	6823      	ldr	r3, [r4, #0]
 80076fa:	f043 0320 	orr.w	r3, r3, #32
 80076fe:	6023      	str	r3, [r4, #0]
 8007700:	2778      	movs	r7, #120	; 0x78
 8007702:	4832      	ldr	r0, [pc, #200]	; (80077cc <_printf_i+0x240>)
 8007704:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007708:	6823      	ldr	r3, [r4, #0]
 800770a:	6829      	ldr	r1, [r5, #0]
 800770c:	061f      	lsls	r7, r3, #24
 800770e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007712:	d402      	bmi.n	800771a <_printf_i+0x18e>
 8007714:	065f      	lsls	r7, r3, #25
 8007716:	bf48      	it	mi
 8007718:	b2b6      	uxthmi	r6, r6
 800771a:	07df      	lsls	r7, r3, #31
 800771c:	bf48      	it	mi
 800771e:	f043 0320 	orrmi.w	r3, r3, #32
 8007722:	6029      	str	r1, [r5, #0]
 8007724:	bf48      	it	mi
 8007726:	6023      	strmi	r3, [r4, #0]
 8007728:	b91e      	cbnz	r6, 8007732 <_printf_i+0x1a6>
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	f023 0320 	bic.w	r3, r3, #32
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	2310      	movs	r3, #16
 8007734:	e7a6      	b.n	8007684 <_printf_i+0xf8>
 8007736:	4824      	ldr	r0, [pc, #144]	; (80077c8 <_printf_i+0x23c>)
 8007738:	e7e4      	b.n	8007704 <_printf_i+0x178>
 800773a:	4615      	mov	r5, r2
 800773c:	e7bd      	b.n	80076ba <_printf_i+0x12e>
 800773e:	682b      	ldr	r3, [r5, #0]
 8007740:	6826      	ldr	r6, [r4, #0]
 8007742:	1d18      	adds	r0, r3, #4
 8007744:	6961      	ldr	r1, [r4, #20]
 8007746:	6028      	str	r0, [r5, #0]
 8007748:	0635      	lsls	r5, r6, #24
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	d501      	bpl.n	8007752 <_printf_i+0x1c6>
 800774e:	6019      	str	r1, [r3, #0]
 8007750:	e002      	b.n	8007758 <_printf_i+0x1cc>
 8007752:	0670      	lsls	r0, r6, #25
 8007754:	d5fb      	bpl.n	800774e <_printf_i+0x1c2>
 8007756:	8019      	strh	r1, [r3, #0]
 8007758:	2300      	movs	r3, #0
 800775a:	4615      	mov	r5, r2
 800775c:	6123      	str	r3, [r4, #16]
 800775e:	e7bc      	b.n	80076da <_printf_i+0x14e>
 8007760:	682b      	ldr	r3, [r5, #0]
 8007762:	2100      	movs	r1, #0
 8007764:	1d1a      	adds	r2, r3, #4
 8007766:	602a      	str	r2, [r5, #0]
 8007768:	681d      	ldr	r5, [r3, #0]
 800776a:	6862      	ldr	r2, [r4, #4]
 800776c:	4628      	mov	r0, r5
 800776e:	f000 f859 	bl	8007824 <memchr>
 8007772:	b108      	cbz	r0, 8007778 <_printf_i+0x1ec>
 8007774:	1b40      	subs	r0, r0, r5
 8007776:	6060      	str	r0, [r4, #4]
 8007778:	6863      	ldr	r3, [r4, #4]
 800777a:	6123      	str	r3, [r4, #16]
 800777c:	2300      	movs	r3, #0
 800777e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007782:	e7aa      	b.n	80076da <_printf_i+0x14e>
 8007784:	462a      	mov	r2, r5
 8007786:	4649      	mov	r1, r9
 8007788:	4640      	mov	r0, r8
 800778a:	6923      	ldr	r3, [r4, #16]
 800778c:	47d0      	blx	sl
 800778e:	3001      	adds	r0, #1
 8007790:	d0ad      	beq.n	80076ee <_printf_i+0x162>
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	079b      	lsls	r3, r3, #30
 8007796:	d413      	bmi.n	80077c0 <_printf_i+0x234>
 8007798:	68e0      	ldr	r0, [r4, #12]
 800779a:	9b03      	ldr	r3, [sp, #12]
 800779c:	4298      	cmp	r0, r3
 800779e:	bfb8      	it	lt
 80077a0:	4618      	movlt	r0, r3
 80077a2:	e7a6      	b.n	80076f2 <_printf_i+0x166>
 80077a4:	2301      	movs	r3, #1
 80077a6:	4632      	mov	r2, r6
 80077a8:	4649      	mov	r1, r9
 80077aa:	4640      	mov	r0, r8
 80077ac:	47d0      	blx	sl
 80077ae:	3001      	adds	r0, #1
 80077b0:	d09d      	beq.n	80076ee <_printf_i+0x162>
 80077b2:	3501      	adds	r5, #1
 80077b4:	68e3      	ldr	r3, [r4, #12]
 80077b6:	9903      	ldr	r1, [sp, #12]
 80077b8:	1a5b      	subs	r3, r3, r1
 80077ba:	42ab      	cmp	r3, r5
 80077bc:	dcf2      	bgt.n	80077a4 <_printf_i+0x218>
 80077be:	e7eb      	b.n	8007798 <_printf_i+0x20c>
 80077c0:	2500      	movs	r5, #0
 80077c2:	f104 0619 	add.w	r6, r4, #25
 80077c6:	e7f5      	b.n	80077b4 <_printf_i+0x228>
 80077c8:	08007b03 	.word	0x08007b03
 80077cc:	08007b14 	.word	0x08007b14

080077d0 <memmove>:
 80077d0:	4288      	cmp	r0, r1
 80077d2:	b510      	push	{r4, lr}
 80077d4:	eb01 0402 	add.w	r4, r1, r2
 80077d8:	d902      	bls.n	80077e0 <memmove+0x10>
 80077da:	4284      	cmp	r4, r0
 80077dc:	4623      	mov	r3, r4
 80077de:	d807      	bhi.n	80077f0 <memmove+0x20>
 80077e0:	1e43      	subs	r3, r0, #1
 80077e2:	42a1      	cmp	r1, r4
 80077e4:	d008      	beq.n	80077f8 <memmove+0x28>
 80077e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077ee:	e7f8      	b.n	80077e2 <memmove+0x12>
 80077f0:	4601      	mov	r1, r0
 80077f2:	4402      	add	r2, r0
 80077f4:	428a      	cmp	r2, r1
 80077f6:	d100      	bne.n	80077fa <memmove+0x2a>
 80077f8:	bd10      	pop	{r4, pc}
 80077fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007802:	e7f7      	b.n	80077f4 <memmove+0x24>

08007804 <_sbrk_r>:
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	2300      	movs	r3, #0
 8007808:	4d05      	ldr	r5, [pc, #20]	; (8007820 <_sbrk_r+0x1c>)
 800780a:	4604      	mov	r4, r0
 800780c:	4608      	mov	r0, r1
 800780e:	602b      	str	r3, [r5, #0]
 8007810:	f7fc fb54 	bl	8003ebc <_sbrk>
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	d102      	bne.n	800781e <_sbrk_r+0x1a>
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	b103      	cbz	r3, 800781e <_sbrk_r+0x1a>
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	bd38      	pop	{r3, r4, r5, pc}
 8007820:	200003d0 	.word	0x200003d0

08007824 <memchr>:
 8007824:	4603      	mov	r3, r0
 8007826:	b510      	push	{r4, lr}
 8007828:	b2c9      	uxtb	r1, r1
 800782a:	4402      	add	r2, r0
 800782c:	4293      	cmp	r3, r2
 800782e:	4618      	mov	r0, r3
 8007830:	d101      	bne.n	8007836 <memchr+0x12>
 8007832:	2000      	movs	r0, #0
 8007834:	e003      	b.n	800783e <memchr+0x1a>
 8007836:	7804      	ldrb	r4, [r0, #0]
 8007838:	3301      	adds	r3, #1
 800783a:	428c      	cmp	r4, r1
 800783c:	d1f6      	bne.n	800782c <memchr+0x8>
 800783e:	bd10      	pop	{r4, pc}

08007840 <memcpy>:
 8007840:	440a      	add	r2, r1
 8007842:	4291      	cmp	r1, r2
 8007844:	f100 33ff 	add.w	r3, r0, #4294967295
 8007848:	d100      	bne.n	800784c <memcpy+0xc>
 800784a:	4770      	bx	lr
 800784c:	b510      	push	{r4, lr}
 800784e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007852:	4291      	cmp	r1, r2
 8007854:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007858:	d1f9      	bne.n	800784e <memcpy+0xe>
 800785a:	bd10      	pop	{r4, pc}

0800785c <_realloc_r>:
 800785c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007860:	4680      	mov	r8, r0
 8007862:	4614      	mov	r4, r2
 8007864:	460e      	mov	r6, r1
 8007866:	b921      	cbnz	r1, 8007872 <_realloc_r+0x16>
 8007868:	4611      	mov	r1, r2
 800786a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800786e:	f7ff bc37 	b.w	80070e0 <_malloc_r>
 8007872:	b92a      	cbnz	r2, 8007880 <_realloc_r+0x24>
 8007874:	f7ff fbcc 	bl	8007010 <_free_r>
 8007878:	4625      	mov	r5, r4
 800787a:	4628      	mov	r0, r5
 800787c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007880:	f000 f81b 	bl	80078ba <_malloc_usable_size_r>
 8007884:	4284      	cmp	r4, r0
 8007886:	4607      	mov	r7, r0
 8007888:	d802      	bhi.n	8007890 <_realloc_r+0x34>
 800788a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800788e:	d812      	bhi.n	80078b6 <_realloc_r+0x5a>
 8007890:	4621      	mov	r1, r4
 8007892:	4640      	mov	r0, r8
 8007894:	f7ff fc24 	bl	80070e0 <_malloc_r>
 8007898:	4605      	mov	r5, r0
 800789a:	2800      	cmp	r0, #0
 800789c:	d0ed      	beq.n	800787a <_realloc_r+0x1e>
 800789e:	42bc      	cmp	r4, r7
 80078a0:	4622      	mov	r2, r4
 80078a2:	4631      	mov	r1, r6
 80078a4:	bf28      	it	cs
 80078a6:	463a      	movcs	r2, r7
 80078a8:	f7ff ffca 	bl	8007840 <memcpy>
 80078ac:	4631      	mov	r1, r6
 80078ae:	4640      	mov	r0, r8
 80078b0:	f7ff fbae 	bl	8007010 <_free_r>
 80078b4:	e7e1      	b.n	800787a <_realloc_r+0x1e>
 80078b6:	4635      	mov	r5, r6
 80078b8:	e7df      	b.n	800787a <_realloc_r+0x1e>

080078ba <_malloc_usable_size_r>:
 80078ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078be:	1f18      	subs	r0, r3, #4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	bfbc      	itt	lt
 80078c4:	580b      	ldrlt	r3, [r1, r0]
 80078c6:	18c0      	addlt	r0, r0, r3
 80078c8:	4770      	bx	lr
	...

080078cc <_init>:
 80078cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ce:	bf00      	nop
 80078d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078d2:	bc08      	pop	{r3}
 80078d4:	469e      	mov	lr, r3
 80078d6:	4770      	bx	lr

080078d8 <_fini>:
 80078d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078da:	bf00      	nop
 80078dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078de:	bc08      	pop	{r3}
 80078e0:	469e      	mov	lr, r3
 80078e2:	4770      	bx	lr
